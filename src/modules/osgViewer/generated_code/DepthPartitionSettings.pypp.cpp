// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgviewer.h"
#include "wrap_referenced.h"
#include "depthpartitionsettings.pypp.hpp"

namespace bp = boost::python;

struct DepthPartitionSettings_wrapper : osgViewer::DepthPartitionSettings, bp::wrapper< osgViewer::DepthPartitionSettings > {

    DepthPartitionSettings_wrapper(::osgViewer::DepthPartitionSettings::DepthMode mode=::osgViewer::DepthPartitionSettings::BOUNDING_VOLUME )
    : osgViewer::DepthPartitionSettings( mode )
      , bp::wrapper< osgViewer::DepthPartitionSettings >(){
        // constructor
    
    }

    virtual bool getDepthRange( ::osg::View & view, unsigned int partition, double & zNear, double & zFar ) {
        if( bp::override func_getDepthRange = this->get_override( "getDepthRange" ) )
            return func_getDepthRange( boost::ref(view), partition, zNear, zFar );
        else{
            return this->osgViewer::DepthPartitionSettings::getDepthRange( boost::ref(view), partition, zNear, zFar );
        }
    }
    
    bool default_getDepthRange( ::osg::View & view, unsigned int partition, double & zNear, double & zFar ) {
        return osgViewer::DepthPartitionSettings::getDepthRange( boost::ref(view), partition, zNear, zFar );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_DepthPartitionSettings_class(){

    { //::osgViewer::DepthPartitionSettings
        typedef bp::class_< DepthPartitionSettings_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< ::osgViewer::DepthPartitionSettings >, boost::noncopyable > DepthPartitionSettings_exposer_t;
        DepthPartitionSettings_exposer_t DepthPartitionSettings_exposer = DepthPartitionSettings_exposer_t( "DepthPartitionSettings", bp::init< bp::optional< osgViewer::DepthPartitionSettings::DepthMode > >(( bp::arg("mode")=(long)(::osgViewer::DepthPartitionSettings::BOUNDING_VOLUME) )) );
        bp::scope DepthPartitionSettings_scope( DepthPartitionSettings_exposer );
        bp::enum_< osgViewer::DepthPartitionSettings::DepthMode>("DepthMode")
            .value("FIXED_RANGE", osgViewer::DepthPartitionSettings::FIXED_RANGE)
            .value("BOUNDING_VOLUME", osgViewer::DepthPartitionSettings::BOUNDING_VOLUME)
            .export_values()
            ;
        bp::implicitly_convertible< osgViewer::DepthPartitionSettings::DepthMode, osgViewer::DepthPartitionSettings >();
        { //::osgViewer::DepthPartitionSettings::getDepthRange
        
            typedef bool ( ::osgViewer::DepthPartitionSettings::*getDepthRange_function_type)( ::osg::View &,unsigned int,double &,double & ) ;
            typedef bool ( DepthPartitionSettings_wrapper::*default_getDepthRange_function_type)( ::osg::View &,unsigned int,double &,double & ) ;
            
            DepthPartitionSettings_exposer.def( 
                "getDepthRange"
                , getDepthRange_function_type(&::osgViewer::DepthPartitionSettings::getDepthRange)
                , default_getDepthRange_function_type(&DepthPartitionSettings_wrapper::default_getDepthRange)
                , ( bp::arg("view"), bp::arg("partition"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        DepthPartitionSettings_exposer.def_readwrite( "_mode", &osgViewer::DepthPartitionSettings::_mode );
        DepthPartitionSettings_exposer.def_readwrite( "_zFar", &osgViewer::DepthPartitionSettings::_zFar );
        DepthPartitionSettings_exposer.def_readwrite( "_zMid", &osgViewer::DepthPartitionSettings::_zMid );
        DepthPartitionSettings_exposer.def_readwrite( "_zNear", &osgViewer::DepthPartitionSettings::_zNear );
    }

}
