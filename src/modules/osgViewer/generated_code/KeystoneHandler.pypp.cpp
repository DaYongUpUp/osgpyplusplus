// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgviewer.h"
#include "wrap_referenced.h"
#include "keystonehandler.pypp.hpp"

namespace bp = boost::python;

struct KeystoneHandler_wrapper : osgViewer::KeystoneHandler, bp::wrapper< osgViewer::KeystoneHandler > {

    KeystoneHandler_wrapper(::osgViewer::Keystone * keystone )
    : osgViewer::KeystoneHandler( boost::python::ptr(keystone) )
      , bp::wrapper< osgViewer::KeystoneHandler >(){
        // constructor
    
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_KeystoneHandler_class(){

    { //::osgViewer::KeystoneHandler
        typedef bp::class_< KeystoneHandler_wrapper, osg::ref_ptr< ::osgViewer::KeystoneHandler >, boost::noncopyable > KeystoneHandler_exposer_t;
        KeystoneHandler_exposer_t KeystoneHandler_exposer = KeystoneHandler_exposer_t( "KeystoneHandler", bp::init< osgViewer::Keystone * >(( bp::arg("keystone") )) );
        bp::scope KeystoneHandler_scope( KeystoneHandler_exposer );
        bp::enum_< osgViewer::KeystoneHandler::Region>("Region")
            .value("NONE_SELECTED", osgViewer::KeystoneHandler::NONE_SELECTED)
            .value("TOP_LEFT", osgViewer::KeystoneHandler::TOP_LEFT)
            .value("TOP", osgViewer::KeystoneHandler::TOP)
            .value("TOP_RIGHT", osgViewer::KeystoneHandler::TOP_RIGHT)
            .value("RIGHT", osgViewer::KeystoneHandler::RIGHT)
            .value("BOTTOM_RIGHT", osgViewer::KeystoneHandler::BOTTOM_RIGHT)
            .value("BOTTOM", osgViewer::KeystoneHandler::BOTTOM)
            .value("BOTTOM_LEFT", osgViewer::KeystoneHandler::BOTTOM_LEFT)
            .value("LEFT", osgViewer::KeystoneHandler::LEFT)
            .value("CENTER", osgViewer::KeystoneHandler::CENTER)
            .export_values()
            ;
        bp::implicitly_convertible< osgViewer::Keystone *, osgViewer::KeystoneHandler >();
        { //::osgViewer::KeystoneHandler::getKeystoneEditingEnabled
        
            typedef bool ( ::osgViewer::KeystoneHandler::*getKeystoneEditingEnabled_function_type)(  ) const;
            
            KeystoneHandler_exposer.def( 
                "getKeystoneEditingEnabled"
                , getKeystoneEditingEnabled_function_type( &::osgViewer::KeystoneHandler::getKeystoneEditingEnabled ) );
        
        }
        { //::osgViewer::KeystoneHandler::move
        
            typedef void ( ::osgViewer::KeystoneHandler::*move_function_type)( ::osgViewer::KeystoneHandler::Region,::osg::Vec2d const & ) ;
            
            KeystoneHandler_exposer.def( 
                "move"
                , move_function_type( &::osgViewer::KeystoneHandler::move )
                , ( bp::arg("region"), bp::arg("delta") ) );
        
        }
        { //::osgViewer::KeystoneHandler::setKeystoneEditingEnabled
        
            typedef void ( ::osgViewer::KeystoneHandler::*setKeystoneEditingEnabled_function_type)( bool ) ;
            
            KeystoneHandler_exposer.def( 
                "setKeystoneEditingEnabled"
                , setKeystoneEditingEnabled_function_type( &::osgViewer::KeystoneHandler::setKeystoneEditingEnabled )
                , ( bp::arg("enabled") ) );
        
        }
    }

}
