// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgviewer.h"
#include "wrap_referenced.h"
#include "viewconfig.pypp.hpp"

namespace bp = boost::python;

struct ViewConfig_wrapper : osgViewer::ViewConfig, bp::wrapper< osgViewer::ViewConfig > {

    ViewConfig_wrapper( )
    : osgViewer::ViewConfig( )
      , bp::wrapper< osgViewer::ViewConfig >(){
        // null constructor
    
    }

    ViewConfig_wrapper(::osgViewer::ViewConfig const & rhs, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osgViewer::ViewConfig( boost::ref(rhs), boost::ref(copyop) )
      , bp::wrapper< osgViewer::ViewConfig >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgViewer::ViewConfig::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgViewer::ViewConfig::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgViewer::ViewConfig::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgViewer::ViewConfig::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgViewer::ViewConfig::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgViewer::ViewConfig::cloneType( );
    }

    virtual void configure( ::osgViewer::View & arg0 ) const  {
        if( bp::override func_configure = this->get_override( "configure" ) )
            func_configure( boost::ref(arg0) );
        else{
            this->osgViewer::ViewConfig::configure( boost::ref(arg0) );
        }
    }
    
    void default_configure( ::osgViewer::View & arg0 ) const  {
        osgViewer::ViewConfig::configure( boost::ref(arg0) );
    }

    virtual ::osg::DisplaySettings * getActiveDisplaySetting( ::osgViewer::View & view ) const  {
        if( bp::override func_getActiveDisplaySetting = this->get_override( "getActiveDisplaySetting" ) )
            return func_getActiveDisplaySetting( boost::ref(view) );
        else{
            return this->osgViewer::ViewConfig::getActiveDisplaySetting( boost::ref(view) );
        }
    }
    
    ::osg::DisplaySettings * default_getActiveDisplaySetting( ::osgViewer::View & view ) const  {
        return osgViewer::ViewConfig::getActiveDisplaySetting( boost::ref(view) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgViewer::ViewConfig::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgViewer::ViewConfig::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgViewer::ViewConfig::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgViewer::ViewConfig::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ViewConfig_class(){

    { //::osgViewer::ViewConfig
        typedef bp::class_< ViewConfig_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< ::osgViewer::ViewConfig >, boost::noncopyable > ViewConfig_exposer_t;
        ViewConfig_exposer_t ViewConfig_exposer = ViewConfig_exposer_t( "ViewConfig", bp::init< >() );
        bp::scope ViewConfig_scope( ViewConfig_exposer );
        ViewConfig_exposer.def( bp::init< osgViewer::ViewConfig const &, bp::optional< osg::CopyOp const & > >(( bp::arg("rhs"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osgViewer::ViewConfig const &, osgViewer::ViewConfig >();
        { //::osgViewer::ViewConfig::className
        
            typedef char const * ( ::osgViewer::ViewConfig::*className_function_type)(  ) const;
            typedef char const * ( ViewConfig_wrapper::*default_className_function_type)(  ) const;
            
            ViewConfig_exposer.def( 
                "className"
                , className_function_type(&::osgViewer::ViewConfig::className)
                , default_className_function_type(&ViewConfig_wrapper::default_className) );
        
        }
        { //::osgViewer::ViewConfig::clone
        
            typedef ::osg::Object * ( ::osgViewer::ViewConfig::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ViewConfig_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            ViewConfig_exposer.def( 
                "clone"
                , clone_function_type(&::osgViewer::ViewConfig::clone)
                , default_clone_function_type(&ViewConfig_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::ViewConfig::cloneType
        
            typedef ::osg::Object * ( ::osgViewer::ViewConfig::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( ViewConfig_wrapper::*default_cloneType_function_type)(  ) const;
            
            ViewConfig_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgViewer::ViewConfig::cloneType)
                , default_cloneType_function_type(&ViewConfig_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::ViewConfig::configure
        
            typedef void ( ::osgViewer::ViewConfig::*configure_function_type)( ::osgViewer::View & ) const;
            typedef void ( ViewConfig_wrapper::*default_configure_function_type)( ::osgViewer::View & ) const;
            
            ViewConfig_exposer.def( 
                "configure"
                , configure_function_type(&::osgViewer::ViewConfig::configure)
                , default_configure_function_type(&ViewConfig_wrapper::default_configure)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgViewer::ViewConfig::getActiveDisplaySetting
        
            typedef ::osg::DisplaySettings * ( ::osgViewer::ViewConfig::*getActiveDisplaySetting_function_type)( ::osgViewer::View & ) const;
            typedef ::osg::DisplaySettings * ( ViewConfig_wrapper::*default_getActiveDisplaySetting_function_type)( ::osgViewer::View & ) const;
            
            ViewConfig_exposer.def( 
                "getActiveDisplaySetting"
                , getActiveDisplaySetting_function_type(&::osgViewer::ViewConfig::getActiveDisplaySetting)
                , default_getActiveDisplaySetting_function_type(&ViewConfig_wrapper::default_getActiveDisplaySetting)
                , ( bp::arg("view") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewConfig::isSameKindAs
        
            typedef bool ( ::osgViewer::ViewConfig::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( ViewConfig_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            ViewConfig_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgViewer::ViewConfig::isSameKindAs)
                , default_isSameKindAs_function_type(&ViewConfig_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgViewer::ViewConfig::libraryName
        
            typedef char const * ( ::osgViewer::ViewConfig::*libraryName_function_type)(  ) const;
            typedef char const * ( ViewConfig_wrapper::*default_libraryName_function_type)(  ) const;
            
            ViewConfig_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgViewer::ViewConfig::libraryName)
                , default_libraryName_function_type(&ViewConfig_wrapper::default_libraryName) );
        
        }
    }

}
