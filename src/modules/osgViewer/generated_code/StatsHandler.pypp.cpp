// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgviewer.h"
#include "wrap_referenced.h"
#include "statshandler.pypp.hpp"

namespace bp = boost::python;

struct StatsHandler_wrapper : osgViewer::StatsHandler, bp::wrapper< osgViewer::StatsHandler > {

    StatsHandler_wrapper( )
    : osgViewer::StatsHandler( )
      , bp::wrapper< osgViewer::StatsHandler >(){
        // null constructor
    
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgViewer::StatsHandler::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgViewer::StatsHandler::getUsage( boost::ref(usage) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_StatsHandler_class(){

    { //::osgViewer::StatsHandler
        typedef bp::class_< StatsHandler_wrapper, osg::ref_ptr< ::osgViewer::StatsHandler >, boost::noncopyable > StatsHandler_exposer_t;
        StatsHandler_exposer_t StatsHandler_exposer = StatsHandler_exposer_t( "StatsHandler", bp::init< >() );
        bp::scope StatsHandler_scope( StatsHandler_exposer );
        bp::enum_< osgViewer::StatsHandler::StatsType>("StatsType")
            .value("NO_STATS", osgViewer::StatsHandler::NO_STATS)
            .value("FRAME_RATE", osgViewer::StatsHandler::FRAME_RATE)
            .value("VIEWER_STATS", osgViewer::StatsHandler::VIEWER_STATS)
            .value("CAMERA_SCENE_STATS", osgViewer::StatsHandler::CAMERA_SCENE_STATS)
            .value("VIEWER_SCENE_STATS", osgViewer::StatsHandler::VIEWER_SCENE_STATS)
            .value("LAST", osgViewer::StatsHandler::LAST)
            .export_values()
            ;
        { //::osgViewer::StatsHandler::addUserStatsLine
        
            typedef void ( ::osgViewer::StatsHandler::*addUserStatsLine_function_type)( ::std::string const &,::osg::Vec4 const &,::osg::Vec4 const &,::std::string const &,float,bool,bool,::std::string const &,::std::string const &,float ) ;
            
            StatsHandler_exposer.def( 
                "addUserStatsLine"
                , addUserStatsLine_function_type( &::osgViewer::StatsHandler::addUserStatsLine )
                , ( bp::arg("label"), bp::arg("textColor"), bp::arg("barColor"), bp::arg("timeTakenName"), bp::arg("multiplier"), bp::arg("average"), bp::arg("averageInInverseSpace"), bp::arg("beginTimeName"), bp::arg("endTimeName"), bp::arg("maxValue") ) );
        
        }
        { //::osgViewer::StatsHandler::getBlockMultiplier
        
            typedef double ( ::osgViewer::StatsHandler::*getBlockMultiplier_function_type)(  ) const;
            
            StatsHandler_exposer.def( 
                "getBlockMultiplier"
                , getBlockMultiplier_function_type( &::osgViewer::StatsHandler::getBlockMultiplier ) );
        
        }
        { //::osgViewer::StatsHandler::getCamera
        
            typedef ::osg::Camera * ( ::osgViewer::StatsHandler::*getCamera_function_type)(  ) ;
            
            StatsHandler_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osgViewer::StatsHandler::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::StatsHandler::getCamera
        
            typedef ::osg::Camera const * ( ::osgViewer::StatsHandler::*getCamera_function_type)(  ) const;
            
            StatsHandler_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osgViewer::StatsHandler::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::StatsHandler::getKeyEventPrintsOutStats
        
            typedef int ( ::osgViewer::StatsHandler::*getKeyEventPrintsOutStats_function_type)(  ) const;
            
            StatsHandler_exposer.def( 
                "getKeyEventPrintsOutStats"
                , getKeyEventPrintsOutStats_function_type( &::osgViewer::StatsHandler::getKeyEventPrintsOutStats ) );
        
        }
        { //::osgViewer::StatsHandler::getKeyEventToggleVSync
        
            typedef int ( ::osgViewer::StatsHandler::*getKeyEventToggleVSync_function_type)(  ) const;
            
            StatsHandler_exposer.def( 
                "getKeyEventToggleVSync"
                , getKeyEventToggleVSync_function_type( &::osgViewer::StatsHandler::getKeyEventToggleVSync ) );
        
        }
        { //::osgViewer::StatsHandler::getKeyEventTogglesOnScreenStats
        
            typedef int ( ::osgViewer::StatsHandler::*getKeyEventTogglesOnScreenStats_function_type)(  ) const;
            
            StatsHandler_exposer.def( 
                "getKeyEventTogglesOnScreenStats"
                , getKeyEventTogglesOnScreenStats_function_type( &::osgViewer::StatsHandler::getKeyEventTogglesOnScreenStats ) );
        
        }
        { //::osgViewer::StatsHandler::getUsage
        
            typedef void ( ::osgViewer::StatsHandler::*getUsage_function_type)( ::osg::ApplicationUsage & ) const;
            typedef void ( StatsHandler_wrapper::*default_getUsage_function_type)( ::osg::ApplicationUsage & ) const;
            
            StatsHandler_exposer.def( 
                "getUsage"
                , getUsage_function_type(&::osgViewer::StatsHandler::getUsage)
                , default_getUsage_function_type(&StatsHandler_wrapper::default_getUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osgViewer::StatsHandler::removeUserStatsLine
        
            typedef void ( ::osgViewer::StatsHandler::*removeUserStatsLine_function_type)( ::std::string const & ) ;
            
            StatsHandler_exposer.def( 
                "removeUserStatsLine"
                , removeUserStatsLine_function_type( &::osgViewer::StatsHandler::removeUserStatsLine )
                , ( bp::arg("label") ) );
        
        }
        { //::osgViewer::StatsHandler::reset
        
            typedef void ( ::osgViewer::StatsHandler::*reset_function_type)(  ) ;
            
            StatsHandler_exposer.def( 
                "reset"
                , reset_function_type( &::osgViewer::StatsHandler::reset ) );
        
        }
        { //::osgViewer::StatsHandler::setKeyEventPrintsOutStats
        
            typedef void ( ::osgViewer::StatsHandler::*setKeyEventPrintsOutStats_function_type)( int ) ;
            
            StatsHandler_exposer.def( 
                "setKeyEventPrintsOutStats"
                , setKeyEventPrintsOutStats_function_type( &::osgViewer::StatsHandler::setKeyEventPrintsOutStats )
                , ( bp::arg("key") ) );
        
        }
        { //::osgViewer::StatsHandler::setKeyEventToggleVSync
        
            typedef void ( ::osgViewer::StatsHandler::*setKeyEventToggleVSync_function_type)( int ) ;
            
            StatsHandler_exposer.def( 
                "setKeyEventToggleVSync"
                , setKeyEventToggleVSync_function_type( &::osgViewer::StatsHandler::setKeyEventToggleVSync )
                , ( bp::arg("key") ) );
        
        }
        { //::osgViewer::StatsHandler::setKeyEventTogglesOnScreenStats
        
            typedef void ( ::osgViewer::StatsHandler::*setKeyEventTogglesOnScreenStats_function_type)( int ) ;
            
            StatsHandler_exposer.def( 
                "setKeyEventTogglesOnScreenStats"
                , setKeyEventTogglesOnScreenStats_function_type( &::osgViewer::StatsHandler::setKeyEventTogglesOnScreenStats )
                , ( bp::arg("key") ) );
        
        }
    }

}
