// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgviewer.h"
#include "wrap_referenced.h"
#include "recordcamerapathhandler.pypp.hpp"

namespace bp = boost::python;

struct RecordCameraPathHandler_wrapper : osgViewer::RecordCameraPathHandler, bp::wrapper< osgViewer::RecordCameraPathHandler > {

    RecordCameraPathHandler_wrapper(::std::string const & filename="saved_animation.path", float fps=2.5e+1f )
    : osgViewer::RecordCameraPathHandler( filename, fps )
      , bp::wrapper< osgViewer::RecordCameraPathHandler >(){
        // constructor
    
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgViewer::RecordCameraPathHandler::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgViewer::RecordCameraPathHandler::getUsage( boost::ref(usage) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_RecordCameraPathHandler_class(){

    { //::osgViewer::RecordCameraPathHandler
        typedef bp::class_< RecordCameraPathHandler_wrapper, osg::ref_ptr< ::osgViewer::RecordCameraPathHandler >, boost::noncopyable > RecordCameraPathHandler_exposer_t;
        RecordCameraPathHandler_exposer_t RecordCameraPathHandler_exposer = RecordCameraPathHandler_exposer_t( "RecordCameraPathHandler", bp::init< bp::optional< std::string const &, float > >(( bp::arg("filename")="saved_animation.path", bp::arg("fps")=2.5e+1f )) );
        bp::scope RecordCameraPathHandler_scope( RecordCameraPathHandler_exposer );
        bp::implicitly_convertible< std::string const &, osgViewer::RecordCameraPathHandler >();
        { //::osgViewer::RecordCameraPathHandler::getKeyEventTogglePlayback
        
            typedef int ( ::osgViewer::RecordCameraPathHandler::*getKeyEventTogglePlayback_function_type)(  ) const;
            
            RecordCameraPathHandler_exposer.def( 
                "getKeyEventTogglePlayback"
                , getKeyEventTogglePlayback_function_type( &::osgViewer::RecordCameraPathHandler::getKeyEventTogglePlayback ) );
        
        }
        { //::osgViewer::RecordCameraPathHandler::getKeyEventToggleRecord
        
            typedef int ( ::osgViewer::RecordCameraPathHandler::*getKeyEventToggleRecord_function_type)(  ) const;
            
            RecordCameraPathHandler_exposer.def( 
                "getKeyEventToggleRecord"
                , getKeyEventToggleRecord_function_type( &::osgViewer::RecordCameraPathHandler::getKeyEventToggleRecord ) );
        
        }
        { //::osgViewer::RecordCameraPathHandler::getUsage
        
            typedef void ( ::osgViewer::RecordCameraPathHandler::*getUsage_function_type)( ::osg::ApplicationUsage & ) const;
            typedef void ( RecordCameraPathHandler_wrapper::*default_getUsage_function_type)( ::osg::ApplicationUsage & ) const;
            
            RecordCameraPathHandler_exposer.def( 
                "getUsage"
                , getUsage_function_type(&::osgViewer::RecordCameraPathHandler::getUsage)
                , default_getUsage_function_type(&RecordCameraPathHandler_wrapper::default_getUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osgViewer::RecordCameraPathHandler::setAutoIncrementFilename
        
            typedef void ( ::osgViewer::RecordCameraPathHandler::*setAutoIncrementFilename_function_type)( bool ) ;
            
            RecordCameraPathHandler_exposer.def( 
                "setAutoIncrementFilename"
                , setAutoIncrementFilename_function_type( &::osgViewer::RecordCameraPathHandler::setAutoIncrementFilename )
                , ( bp::arg("autoinc")=(bool)(true) ) );
        
        }
        { //::osgViewer::RecordCameraPathHandler::setKeyEventTogglePlayback
        
            typedef void ( ::osgViewer::RecordCameraPathHandler::*setKeyEventTogglePlayback_function_type)( int ) ;
            
            RecordCameraPathHandler_exposer.def( 
                "setKeyEventTogglePlayback"
                , setKeyEventTogglePlayback_function_type( &::osgViewer::RecordCameraPathHandler::setKeyEventTogglePlayback )
                , ( bp::arg("key") ) );
        
        }
        { //::osgViewer::RecordCameraPathHandler::setKeyEventToggleRecord
        
            typedef void ( ::osgViewer::RecordCameraPathHandler::*setKeyEventToggleRecord_function_type)( int ) ;
            
            RecordCameraPathHandler_exposer.def( 
                "setKeyEventToggleRecord"
                , setKeyEventToggleRecord_function_type( &::osgViewer::RecordCameraPathHandler::setKeyEventToggleRecord )
                , ( bp::arg("key") ) );
        
        }
    }

}
