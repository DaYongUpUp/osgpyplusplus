// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgfx.h"
#include "wrap_referenced.h"
#include "registry.pypp.hpp"

namespace bp = boost::python;

struct FXRegistry_wrapper : osgFX::Registry, bp::wrapper< osgFX::Registry > {

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_Registry_class(){

    { //::osgFX::Registry
        typedef bp::class_< FXRegistry_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< FXRegistry_wrapper >, boost::noncopyable > Registry_exposer_t;
        Registry_exposer_t Registry_exposer = Registry_exposer_t( "Registry", bp::no_init );
        bp::scope Registry_scope( Registry_exposer );
        { //::osgFX::Registry::Proxy
            typedef bp::class_< osgFX::Registry::Proxy > Proxy_exposer_t;
            Proxy_exposer_t Proxy_exposer = Proxy_exposer_t( "Proxy", bp::init< osgFX::Effect const * >(( bp::arg("effect") )) );
            bp::scope Proxy_scope( Proxy_exposer );
            bp::implicitly_convertible< osgFX::Effect const *, osgFX::Registry::Proxy >();
        }
        { //::osgFX::Registry::getEffectMap
        
            typedef ::std::map< std::string, osg::ref_ptr<osgFX::Effect const> > const & ( ::osgFX::Registry::*getEffectMap_function_type)(  ) const;
            
            Registry_exposer.def( 
                "getEffectMap"
                , getEffectMap_function_type( &::osgFX::Registry::getEffectMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgFX::Registry::instance
        
            typedef ::osgFX::Registry * ( *instance_function_type )(  );
            
            Registry_exposer.def( 
                "instance"
                , instance_function_type( &::osgFX::Registry::instance )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgFX::Registry::registerEffect
        
            typedef void ( ::osgFX::Registry::*registerEffect_function_type)( ::osgFX::Effect const * ) ;
            
            Registry_exposer.def( 
                "registerEffect"
                , registerEffect_function_type( &::osgFX::Registry::registerEffect )
                , ( bp::arg("effect") ) );
        
        }
        { //::osgFX::Registry::removeEffect
        
            typedef void ( ::osgFX::Registry::*removeEffect_function_type)( ::osgFX::Effect const * ) ;
            
            Registry_exposer.def( 
                "removeEffect"
                , removeEffect_function_type( &::osgFX::Registry::removeEffect )
                , ( bp::arg("effect") ) );
        
        }
        Registry_exposer.staticmethod( "instance" );
    }

}
