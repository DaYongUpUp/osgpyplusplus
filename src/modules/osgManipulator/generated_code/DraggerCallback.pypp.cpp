// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgmanipulator.h"
#include "wrap_referenced.h"
#include "draggercallback.pypp.hpp"

namespace bp = boost::python;

struct DraggerCallback_wrapper : osgManipulator::DraggerCallback, bp::wrapper< osgManipulator::DraggerCallback > {

    DraggerCallback_wrapper( )
    : osgManipulator::DraggerCallback( )
      , bp::wrapper< osgManipulator::DraggerCallback >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgManipulator::DraggerCallback::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgManipulator::DraggerCallback::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgManipulator::DraggerCallback::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgManipulator::DraggerCallback::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgManipulator::DraggerCallback::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgManipulator::DraggerCallback::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgManipulator::DraggerCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgManipulator::DraggerCallback::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgManipulator::DraggerCallback::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgManipulator::DraggerCallback::libraryName( );
    }

    virtual bool receive( ::osgManipulator::MotionCommand const & arg0 ) {
        if( bp::override func_receive = this->get_override( "receive" ) )
            return func_receive( boost::ref(arg0) );
        else{
            return this->osgManipulator::DraggerCallback::receive( boost::ref(arg0) );
        }
    }
    
    bool default_receive( ::osgManipulator::MotionCommand const & arg0 ) {
        return osgManipulator::DraggerCallback::receive( boost::ref(arg0) );
    }

    virtual bool receive( ::osgManipulator::TranslateInLineCommand const & command ) {
        if( bp::override func_receive = this->get_override( "receive" ) )
            return func_receive( boost::ref(command) );
        else{
            return this->osgManipulator::DraggerCallback::receive( boost::ref(command) );
        }
    }
    
    bool default_receive( ::osgManipulator::TranslateInLineCommand const & command ) {
        return osgManipulator::DraggerCallback::receive( boost::ref(command) );
    }

    virtual bool receive( ::osgManipulator::TranslateInPlaneCommand const & command ) {
        if( bp::override func_receive = this->get_override( "receive" ) )
            return func_receive( boost::ref(command) );
        else{
            return this->osgManipulator::DraggerCallback::receive( boost::ref(command) );
        }
    }
    
    bool default_receive( ::osgManipulator::TranslateInPlaneCommand const & command ) {
        return osgManipulator::DraggerCallback::receive( boost::ref(command) );
    }

    virtual bool receive( ::osgManipulator::Scale1DCommand const & command ) {
        if( bp::override func_receive = this->get_override( "receive" ) )
            return func_receive( boost::ref(command) );
        else{
            return this->osgManipulator::DraggerCallback::receive( boost::ref(command) );
        }
    }
    
    bool default_receive( ::osgManipulator::Scale1DCommand const & command ) {
        return osgManipulator::DraggerCallback::receive( boost::ref(command) );
    }

    virtual bool receive( ::osgManipulator::Scale2DCommand const & command ) {
        if( bp::override func_receive = this->get_override( "receive" ) )
            return func_receive( boost::ref(command) );
        else{
            return this->osgManipulator::DraggerCallback::receive( boost::ref(command) );
        }
    }
    
    bool default_receive( ::osgManipulator::Scale2DCommand const & command ) {
        return osgManipulator::DraggerCallback::receive( boost::ref(command) );
    }

    virtual bool receive( ::osgManipulator::ScaleUniformCommand const & command ) {
        if( bp::override func_receive = this->get_override( "receive" ) )
            return func_receive( boost::ref(command) );
        else{
            return this->osgManipulator::DraggerCallback::receive( boost::ref(command) );
        }
    }
    
    bool default_receive( ::osgManipulator::ScaleUniformCommand const & command ) {
        return osgManipulator::DraggerCallback::receive( boost::ref(command) );
    }

    virtual bool receive( ::osgManipulator::Rotate3DCommand const & command ) {
        if( bp::override func_receive = this->get_override( "receive" ) )
            return func_receive( boost::ref(command) );
        else{
            return this->osgManipulator::DraggerCallback::receive( boost::ref(command) );
        }
    }
    
    bool default_receive( ::osgManipulator::Rotate3DCommand const & command ) {
        return osgManipulator::DraggerCallback::receive( boost::ref(command) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_DraggerCallback_class(){

    bp::class_< DraggerCallback_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< ::osgManipulator::DraggerCallback >, boost::noncopyable >( "DraggerCallback", bp::init< >() )    
        .def( 
            "className"
            , (char const * ( ::osgManipulator::DraggerCallback::* )(  )const)(&::osgManipulator::DraggerCallback::className)
            , (char const * ( DraggerCallback_wrapper::* )(  )const)(&DraggerCallback_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgManipulator::DraggerCallback::* )( ::osg::CopyOp const & )const)(&::osgManipulator::DraggerCallback::clone)
            , (::osg::Object * ( DraggerCallback_wrapper::* )( ::osg::CopyOp const & )const)(&DraggerCallback_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgManipulator::DraggerCallback::* )(  )const)(&::osgManipulator::DraggerCallback::cloneType)
            , (::osg::Object * ( DraggerCallback_wrapper::* )(  )const)(&DraggerCallback_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osg::Object const * )const)(&::osgManipulator::DraggerCallback::isSameKindAs)
            , (bool ( DraggerCallback_wrapper::* )( ::osg::Object const * )const)(&DraggerCallback_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgManipulator::DraggerCallback::* )(  )const)(&::osgManipulator::DraggerCallback::libraryName)
            , (char const * ( DraggerCallback_wrapper::* )(  )const)(&DraggerCallback_wrapper::default_libraryName) )    
        .def( 
            "receive"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osgManipulator::MotionCommand const & ))(&::osgManipulator::DraggerCallback::receive)
            , (bool ( DraggerCallback_wrapper::* )( ::osgManipulator::MotionCommand const & ))(&DraggerCallback_wrapper::default_receive)
            , ( bp::arg("arg0") ) )    
        .def( 
            "receive"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osgManipulator::TranslateInLineCommand const & ))(&::osgManipulator::DraggerCallback::receive)
            , (bool ( DraggerCallback_wrapper::* )( ::osgManipulator::TranslateInLineCommand const & ))(&DraggerCallback_wrapper::default_receive)
            , ( bp::arg("command") ) )    
        .def( 
            "receive"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osgManipulator::TranslateInPlaneCommand const & ))(&::osgManipulator::DraggerCallback::receive)
            , (bool ( DraggerCallback_wrapper::* )( ::osgManipulator::TranslateInPlaneCommand const & ))(&DraggerCallback_wrapper::default_receive)
            , ( bp::arg("command") ) )    
        .def( 
            "receive"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osgManipulator::Scale1DCommand const & ))(&::osgManipulator::DraggerCallback::receive)
            , (bool ( DraggerCallback_wrapper::* )( ::osgManipulator::Scale1DCommand const & ))(&DraggerCallback_wrapper::default_receive)
            , ( bp::arg("command") ) )    
        .def( 
            "receive"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osgManipulator::Scale2DCommand const & ))(&::osgManipulator::DraggerCallback::receive)
            , (bool ( DraggerCallback_wrapper::* )( ::osgManipulator::Scale2DCommand const & ))(&DraggerCallback_wrapper::default_receive)
            , ( bp::arg("command") ) )    
        .def( 
            "receive"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osgManipulator::ScaleUniformCommand const & ))(&::osgManipulator::DraggerCallback::receive)
            , (bool ( DraggerCallback_wrapper::* )( ::osgManipulator::ScaleUniformCommand const & ))(&DraggerCallback_wrapper::default_receive)
            , ( bp::arg("command") ) )    
        .def( 
            "receive"
            , (bool ( ::osgManipulator::DraggerCallback::* )( ::osgManipulator::Rotate3DCommand const & ))(&::osgManipulator::DraggerCallback::receive)
            , (bool ( DraggerCallback_wrapper::* )( ::osgManipulator::Rotate3DCommand const & ))(&DraggerCallback_wrapper::default_receive)
            , ( bp::arg("command") ) );

}
