// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgutil.h"
#include "baseoptimizervisitor.pypp.hpp"

namespace bp = boost::python;

struct BaseOptimizerVisitor_wrapper : osgUtil::BaseOptimizerVisitor, bp::wrapper< osgUtil::BaseOptimizerVisitor > {

    BaseOptimizerVisitor_wrapper(::osgUtil::Optimizer * optimizer, unsigned int operation )
    : osgUtil::BaseOptimizerVisitor( boost::python::ptr(optimizer), operation )
      , bp::wrapper< osgUtil::BaseOptimizerVisitor >(){
        // constructor
    
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_BaseOptimizerVisitor_class(){

    bp::class_< BaseOptimizerVisitor_wrapper, boost::noncopyable >( "BaseOptimizerVisitor", bp::init< osgUtil::Optimizer *, unsigned int >(( bp::arg("optimizer"), bp::arg("operation") )) )    
        .def( 
            "isOperationPermissibleForObject"
            , (bool ( ::osgUtil::BaseOptimizerVisitor::* )( ::osg::StateSet const * )const)( &::osgUtil::BaseOptimizerVisitor::isOperationPermissibleForObject )
            , ( bp::arg("object") ) )    
        .def( 
            "isOperationPermissibleForObject"
            , (bool ( ::osgUtil::BaseOptimizerVisitor::* )( ::osg::StateAttribute const * )const)( &::osgUtil::BaseOptimizerVisitor::isOperationPermissibleForObject )
            , ( bp::arg("object") ) )    
        .def( 
            "isOperationPermissibleForObject"
            , (bool ( ::osgUtil::BaseOptimizerVisitor::* )( ::osg::Drawable const * )const)( &::osgUtil::BaseOptimizerVisitor::isOperationPermissibleForObject )
            , ( bp::arg("object") ) )    
        .def( 
            "isOperationPermissibleForObject"
            , (bool ( ::osgUtil::BaseOptimizerVisitor::* )( ::osg::Node const * )const)( &::osgUtil::BaseOptimizerVisitor::isOperationPermissibleForObject )
            , ( bp::arg("object") ) );

}
