// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgwidget.h"
#include "wrap_referenced.h"
#include "windowmanager.pypp.hpp"

namespace bp = boost::python;

struct WindowManager_wrapper : osgWidget::WindowManager, bp::wrapper< osgWidget::WindowManager > {

    WindowManager_wrapper(::osgViewer::View * arg0=0, ::osgWidget::point_type arg1=0.0f, ::osgWidget::point_type arg2=0.0f, unsigned int arg3=0, unsigned int arg4=0 )
    : osgWidget::WindowManager( boost::python::ptr(arg0), arg1, arg2, arg3, arg4 )
      , bp::wrapper< osgWidget::WindowManager >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgWidget::WindowManager::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgWidget::WindowManager::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgWidget::WindowManager::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgWidget::WindowManager::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgWidget::WindowManager::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgWidget::WindowManager::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgWidget::WindowManager::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgWidget::WindowManager::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgWidget::WindowManager::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgWidget::WindowManager::libraryName( );
    }

};

void register_WindowManager_class(){

    { //::osgWidget::WindowManager
        typedef bp::class_< WindowManager_wrapper, bp::bases< osgWidget::UIObjectParent< osgWidget::Window > >, osg::ref_ptr< ::osgWidget::WindowManager >, boost::noncopyable > WindowManager_exposer_t;
        WindowManager_exposer_t WindowManager_exposer = WindowManager_exposer_t( "WindowManager", bp::init< bp::optional< osgViewer::View *, osgWidget::point_type, osgWidget::point_type, unsigned int, unsigned int > >(( bp::arg("arg0")=bp::object(), bp::arg("arg1")=0.0f, bp::arg("arg2")=0.0f, bp::arg("arg3")=(unsigned int)(0), bp::arg("arg4")=(unsigned int)(0) )) );
        bp::scope WindowManager_scope( WindowManager_exposer );
        bp::enum_< osgWidget::WindowManager::PointerDirection>("PointerDirection")
            .value("PD_NONE", osgWidget::WindowManager::PD_NONE)
            .value("PD_LEFT", osgWidget::WindowManager::PD_LEFT)
            .value("PD_RIGHT", osgWidget::WindowManager::PD_RIGHT)
            .value("PD_UP", osgWidget::WindowManager::PD_UP)
            .value("PD_DOWN", osgWidget::WindowManager::PD_DOWN)
            .export_values()
            ;
        bp::enum_< osgWidget::WindowManager::PointerFocusMode>("PointerFocusMode")
            .value("PFM_FOCUS", osgWidget::WindowManager::PFM_FOCUS)
            .value("PFM_UNFOCUS", osgWidget::WindowManager::PFM_UNFOCUS)
            .value("PFM_SLOPPY", osgWidget::WindowManager::PFM_SLOPPY)
            .export_values()
            ;
        bp::enum_< osgWidget::WindowManager::WmFlags>("WmFlags")
            .value("WM_USE_LUA", osgWidget::WindowManager::WM_USE_LUA)
            .value("WM_USE_PYTHON", osgWidget::WindowManager::WM_USE_PYTHON)
            .value("WM_USE_RENDERBINS", osgWidget::WindowManager::WM_USE_RENDERBINS)
            .value("WM_PICK_DEBUG", osgWidget::WindowManager::WM_PICK_DEBUG)
            .export_values()
            ;
        bp::implicitly_convertible< osgViewer::View *, osgWidget::WindowManager >();
        { //::osgWidget::WindowManager::className
        
            typedef char const * ( ::osgWidget::WindowManager::*className_function_type )(  ) const;
            typedef char const * ( WindowManager_wrapper::*default_className_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "className"
                , className_function_type(&::osgWidget::WindowManager::className)
                , default_className_function_type(&WindowManager_wrapper::default_className) );
        
        }
        { //::osgWidget::WindowManager::clone
        
            typedef ::osg::Object * ( ::osgWidget::WindowManager::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( WindowManager_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            WindowManager_exposer.def( 
                "clone"
                , clone_function_type(&::osgWidget::WindowManager::clone)
                , default_clone_function_type(&WindowManager_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::WindowManager::cloneType
        
            typedef ::osg::Object * ( ::osgWidget::WindowManager::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( WindowManager_wrapper::*default_cloneType_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgWidget::WindowManager::cloneType)
                , default_cloneType_function_type(&WindowManager_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::WindowManager::createParentOrthoCamera
        
            typedef ::osg::Camera * ( ::osgWidget::WindowManager::*createParentOrthoCamera_function_type )(  ) ;
            
            WindowManager_exposer.def( 
                "createParentOrthoCamera"
                , createParentOrthoCamera_function_type( &::osgWidget::WindowManager::createParentOrthoCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getHeight
        
            typedef ::osgWidget::point_type ( ::osgWidget::WindowManager::*getHeight_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::osgWidget::WindowManager::getHeight ) );
        
        }
        { //::osgWidget::WindowManager::getLuaEngine
        
            typedef ::osgWidget::ScriptEngine * ( ::osgWidget::WindowManager::*getLuaEngine_function_type )(  ) ;
            
            WindowManager_exposer.def( 
                "getLuaEngine"
                , getLuaEngine_function_type( &::osgWidget::WindowManager::getLuaEngine )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getLuaEngine
        
            typedef ::osgWidget::ScriptEngine const * ( ::osgWidget::WindowManager::*getLuaEngine_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getLuaEngine"
                , getLuaEngine_function_type( &::osgWidget::WindowManager::getLuaEngine )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getMouseKeysDown
        
            typedef int ( ::osgWidget::WindowManager::*getMouseKeysDown_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getMouseKeysDown"
                , getMouseKeysDown_function_type( &::osgWidget::WindowManager::getMouseKeysDown ) );
        
        }
        { //::osgWidget::WindowManager::getNodeMask
        
            typedef unsigned int ( ::osgWidget::WindowManager::*getNodeMask_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getNodeMask"
                , getNodeMask_function_type( &::osgWidget::WindowManager::getNodeMask ) );
        
        }
        { //::osgWidget::WindowManager::getPointerDirectionVector
        
            typedef int ( ::osgWidget::WindowManager::*getPointerDirectionVector_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getPointerDirectionVector"
                , getPointerDirectionVector_function_type( &::osgWidget::WindowManager::getPointerDirectionVector ) );
        
        }
        { //::osgWidget::WindowManager::getPointerFocusMode
        
            typedef ::osgWidget::WindowManager::PointerFocusMode ( ::osgWidget::WindowManager::*getPointerFocusMode_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getPointerFocusMode"
                , getPointerFocusMode_function_type( &::osgWidget::WindowManager::getPointerFocusMode ) );
        
        }
        { //::osgWidget::WindowManager::getPointerHorizontalDirection
        
            typedef ::osgWidget::WindowManager::PointerDirection ( ::osgWidget::WindowManager::*getPointerHorizontalDirection_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getPointerHorizontalDirection"
                , getPointerHorizontalDirection_function_type( &::osgWidget::WindowManager::getPointerHorizontalDirection ) );
        
        }
        { //::osgWidget::WindowManager::getPointerVerticalDirection
        
            typedef ::osgWidget::WindowManager::PointerDirection ( ::osgWidget::WindowManager::*getPointerVerticalDirection_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getPointerVerticalDirection"
                , getPointerVerticalDirection_function_type( &::osgWidget::WindowManager::getPointerVerticalDirection ) );
        
        }
        { //::osgWidget::WindowManager::getPythonEngine
        
            typedef ::osgWidget::ScriptEngine * ( ::osgWidget::WindowManager::*getPythonEngine_function_type )(  ) ;
            
            WindowManager_exposer.def( 
                "getPythonEngine"
                , getPythonEngine_function_type( &::osgWidget::WindowManager::getPythonEngine )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getPythonEngine
        
            typedef ::osgWidget::ScriptEngine const * ( ::osgWidget::WindowManager::*getPythonEngine_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getPythonEngine"
                , getPythonEngine_function_type( &::osgWidget::WindowManager::getPythonEngine )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getStyleManager
        
            typedef ::osgWidget::StyleManager * ( ::osgWidget::WindowManager::*getStyleManager_function_type )(  ) ;
            
            WindowManager_exposer.def( 
                "getStyleManager"
                , getStyleManager_function_type( &::osgWidget::WindowManager::getStyleManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getStyleManager
        
            typedef ::osgWidget::StyleManager const * ( ::osgWidget::WindowManager::*getStyleManager_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getStyleManager"
                , getStyleManager_function_type( &::osgWidget::WindowManager::getStyleManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getView
        
            typedef ::osgViewer::View * ( ::osgWidget::WindowManager::*getView_function_type )(  ) ;
            
            WindowManager_exposer.def( 
                "getView"
                , getView_function_type( &::osgWidget::WindowManager::getView )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getView
        
            typedef ::osgViewer::View const * ( ::osgWidget::WindowManager::*getView_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getView"
                , getView_function_type( &::osgWidget::WindowManager::getView )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::WindowManager::getWidth
        
            typedef ::osgWidget::point_type ( ::osgWidget::WindowManager::*getWidth_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::osgWidget::WindowManager::getWidth ) );
        
        }
        { //::osgWidget::WindowManager::isLeftMouseButtonDown
        
            typedef bool ( ::osgWidget::WindowManager::*isLeftMouseButtonDown_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isLeftMouseButtonDown"
                , isLeftMouseButtonDown_function_type( &::osgWidget::WindowManager::isLeftMouseButtonDown ) );
        
        }
        { //::osgWidget::WindowManager::isMiddleMouseButtonDown
        
            typedef bool ( ::osgWidget::WindowManager::*isMiddleMouseButtonDown_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isMiddleMouseButtonDown"
                , isMiddleMouseButtonDown_function_type( &::osgWidget::WindowManager::isMiddleMouseButtonDown ) );
        
        }
        { //::osgWidget::WindowManager::isMouseScrollingDown
        
            typedef bool ( ::osgWidget::WindowManager::*isMouseScrollingDown_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isMouseScrollingDown"
                , isMouseScrollingDown_function_type( &::osgWidget::WindowManager::isMouseScrollingDown ) );
        
        }
        { //::osgWidget::WindowManager::isMouseScrollingUp
        
            typedef bool ( ::osgWidget::WindowManager::*isMouseScrollingUp_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isMouseScrollingUp"
                , isMouseScrollingUp_function_type( &::osgWidget::WindowManager::isMouseScrollingUp ) );
        
        }
        { //::osgWidget::WindowManager::isPointerMovingDown
        
            typedef bool ( ::osgWidget::WindowManager::*isPointerMovingDown_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isPointerMovingDown"
                , isPointerMovingDown_function_type( &::osgWidget::WindowManager::isPointerMovingDown ) );
        
        }
        { //::osgWidget::WindowManager::isPointerMovingHorizontally
        
            typedef bool ( ::osgWidget::WindowManager::*isPointerMovingHorizontally_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isPointerMovingHorizontally"
                , isPointerMovingHorizontally_function_type( &::osgWidget::WindowManager::isPointerMovingHorizontally ) );
        
        }
        { //::osgWidget::WindowManager::isPointerMovingLeft
        
            typedef bool ( ::osgWidget::WindowManager::*isPointerMovingLeft_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isPointerMovingLeft"
                , isPointerMovingLeft_function_type( &::osgWidget::WindowManager::isPointerMovingLeft ) );
        
        }
        { //::osgWidget::WindowManager::isPointerMovingRight
        
            typedef bool ( ::osgWidget::WindowManager::*isPointerMovingRight_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isPointerMovingRight"
                , isPointerMovingRight_function_type( &::osgWidget::WindowManager::isPointerMovingRight ) );
        
        }
        { //::osgWidget::WindowManager::isPointerMovingUp
        
            typedef bool ( ::osgWidget::WindowManager::*isPointerMovingUp_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isPointerMovingUp"
                , isPointerMovingUp_function_type( &::osgWidget::WindowManager::isPointerMovingUp ) );
        
        }
        { //::osgWidget::WindowManager::isPointerMovingVertically
        
            typedef bool ( ::osgWidget::WindowManager::*isPointerMovingVertically_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isPointerMovingVertically"
                , isPointerMovingVertically_function_type( &::osgWidget::WindowManager::isPointerMovingVertically ) );
        
        }
        { //::osgWidget::WindowManager::isRightMouseButtonDown
        
            typedef bool ( ::osgWidget::WindowManager::*isRightMouseButtonDown_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isRightMouseButtonDown"
                , isRightMouseButtonDown_function_type( &::osgWidget::WindowManager::isRightMouseButtonDown ) );
        
        }
        { //::osgWidget::WindowManager::isSameKindAs
        
            typedef bool ( ::osgWidget::WindowManager::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( WindowManager_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            WindowManager_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgWidget::WindowManager::isSameKindAs)
                , default_isSameKindAs_function_type(&WindowManager_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgWidget::WindowManager::isUsingLua
        
            typedef bool ( ::osgWidget::WindowManager::*isUsingLua_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isUsingLua"
                , isUsingLua_function_type( &::osgWidget::WindowManager::isUsingLua ) );
        
        }
        { //::osgWidget::WindowManager::isUsingPython
        
            typedef bool ( ::osgWidget::WindowManager::*isUsingPython_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isUsingPython"
                , isUsingPython_function_type( &::osgWidget::WindowManager::isUsingPython ) );
        
        }
        { //::osgWidget::WindowManager::isUsingRenderBins
        
            typedef bool ( ::osgWidget::WindowManager::*isUsingRenderBins_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "isUsingRenderBins"
                , isUsingRenderBins_function_type( &::osgWidget::WindowManager::isUsingRenderBins ) );
        
        }
        { //::osgWidget::WindowManager::keyDown
        
            typedef bool ( ::osgWidget::WindowManager::*keyDown_function_type )( int,int ) ;
            
            WindowManager_exposer.def( 
                "keyDown"
                , keyDown_function_type( &::osgWidget::WindowManager::keyDown )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::keyUp
        
            typedef bool ( ::osgWidget::WindowManager::*keyUp_function_type )( int,int ) ;
            
            WindowManager_exposer.def( 
                "keyUp"
                , keyUp_function_type( &::osgWidget::WindowManager::keyUp )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::libraryName
        
            typedef char const * ( ::osgWidget::WindowManager::*libraryName_function_type )(  ) const;
            typedef char const * ( WindowManager_wrapper::*default_libraryName_function_type )(  ) const;
            
            WindowManager_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgWidget::WindowManager::libraryName)
                , default_libraryName_function_type(&WindowManager_wrapper::default_libraryName) );
        
        }
        { //::osgWidget::WindowManager::localXY
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::WindowManager::*localXY_function_type )( double,double ) const;
            
            WindowManager_exposer.def( 
                "localXY"
                , localXY_function_type( &::osgWidget::WindowManager::localXY )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::mousePushedLeft
        
            typedef bool ( ::osgWidget::WindowManager::*mousePushedLeft_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "mousePushedLeft"
                , mousePushedLeft_function_type( &::osgWidget::WindowManager::mousePushedLeft )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::WindowManager::mousePushedMiddle
        
            typedef bool ( ::osgWidget::WindowManager::*mousePushedMiddle_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "mousePushedMiddle"
                , mousePushedMiddle_function_type( &::osgWidget::WindowManager::mousePushedMiddle )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::WindowManager::mousePushedRight
        
            typedef bool ( ::osgWidget::WindowManager::*mousePushedRight_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "mousePushedRight"
                , mousePushedRight_function_type( &::osgWidget::WindowManager::mousePushedRight )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::WindowManager::mouseReleasedLeft
        
            typedef bool ( ::osgWidget::WindowManager::*mouseReleasedLeft_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "mouseReleasedLeft"
                , mouseReleasedLeft_function_type( &::osgWidget::WindowManager::mouseReleasedLeft )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::WindowManager::mouseReleasedMiddle
        
            typedef bool ( ::osgWidget::WindowManager::*mouseReleasedMiddle_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "mouseReleasedMiddle"
                , mouseReleasedMiddle_function_type( &::osgWidget::WindowManager::mouseReleasedMiddle )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::WindowManager::mouseReleasedRight
        
            typedef bool ( ::osgWidget::WindowManager::*mouseReleasedRight_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "mouseReleasedRight"
                , mouseReleasedRight_function_type( &::osgWidget::WindowManager::mouseReleasedRight )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::WindowManager::mouseScroll
        
            typedef bool ( ::osgWidget::WindowManager::*mouseScroll_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "mouseScroll"
                , mouseScroll_function_type( &::osgWidget::WindowManager::mouseScroll )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::pickAtXY
        
            typedef bool ( ::osgWidget::WindowManager::*pickAtXY_function_type )( float,float,::osgWidget::WidgetList & ) ;
            
            WindowManager_exposer.def( 
                "pickAtXY"
                , pickAtXY_function_type( &::osgWidget::WindowManager::pickAtXY )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::WindowManager::pointerDrag
        
            typedef bool ( ::osgWidget::WindowManager::*pointerDrag_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "pointerDrag"
                , pointerDrag_function_type( &::osgWidget::WindowManager::pointerDrag )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::pointerMove
        
            typedef bool ( ::osgWidget::WindowManager::*pointerMove_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "pointerMove"
                , pointerMove_function_type( &::osgWidget::WindowManager::pointerMove )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::resizeAllWindows
        
            typedef void ( ::osgWidget::WindowManager::*resizeAllWindows_function_type )( bool ) ;
            
            WindowManager_exposer.def( 
                "resizeAllWindows"
                , resizeAllWindows_function_type( &::osgWidget::WindowManager::resizeAllWindows )
                , ( bp::arg("arg0")=(bool)(true) ) );
        
        }
        { //::osgWidget::WindowManager::setEventFromInterface
        
            typedef void ( *setEventFromInterface_function_type )( ::osgWidget::Event &,::osgWidget::EventInterface * );
            
            WindowManager_exposer.def( 
                "setEventFromInterface"
                , setEventFromInterface_function_type( &::osgWidget::WindowManager::setEventFromInterface )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::setFocused
        
            typedef bool ( ::osgWidget::WindowManager::*setFocused_function_type )( ::osgWidget::Window * ) ;
            
            WindowManager_exposer.def( 
                "setFocused"
                , setFocused_function_type( &::osgWidget::WindowManager::setFocused )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::WindowManager::setFocusedByName
        
            typedef bool ( ::osgWidget::WindowManager::*setFocusedByName_function_type )( ::std::string const & ) ;
            
            WindowManager_exposer.def( 
                "setFocusedByName"
                , setFocusedByName_function_type( &::osgWidget::WindowManager::setFocusedByName )
                , ( bp::arg("name") ) );
        
        }
        { //::osgWidget::WindowManager::setHeight
        
            typedef void ( ::osgWidget::WindowManager::*setHeight_function_type )( ::osgWidget::point_type ) ;
            
            WindowManager_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::osgWidget::WindowManager::setHeight )
                , ( bp::arg("h") ) );
        
        }
        { //::osgWidget::WindowManager::setPointerFocusMode
        
            typedef void ( ::osgWidget::WindowManager::*setPointerFocusMode_function_type )( ::osgWidget::WindowManager::PointerFocusMode ) ;
            
            WindowManager_exposer.def( 
                "setPointerFocusMode"
                , setPointerFocusMode_function_type( &::osgWidget::WindowManager::setPointerFocusMode )
                , ( bp::arg("pfm") ) );
        
        }
        { //::osgWidget::WindowManager::setPointerXY
        
            typedef void ( ::osgWidget::WindowManager::*setPointerXY_function_type )( float,float ) ;
            
            WindowManager_exposer.def( 
                "setPointerXY"
                , setPointerXY_function_type( &::osgWidget::WindowManager::setPointerXY )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::WindowManager::setScrollingMotion
        
            typedef void ( ::osgWidget::WindowManager::*setScrollingMotion_function_type )( ::osgGA::GUIEventAdapter::ScrollingMotion ) ;
            
            WindowManager_exposer.def( 
                "setScrollingMotion"
                , setScrollingMotion_function_type( &::osgWidget::WindowManager::setScrollingMotion )
                , ( bp::arg("sm") ) );
        
        }
        { //::osgWidget::WindowManager::setSize
        
            typedef void ( ::osgWidget::WindowManager::*setSize_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            WindowManager_exposer.def( 
                "setSize"
                , setSize_function_type( &::osgWidget::WindowManager::setSize )
                , ( bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::osgWidget::WindowManager::setStyleManager
        
            typedef void ( ::osgWidget::WindowManager::*setStyleManager_function_type )( ::osgWidget::StyleManager * ) ;
            
            WindowManager_exposer.def( 
                "setStyleManager"
                , setStyleManager_function_type( &::osgWidget::WindowManager::setStyleManager )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::WindowManager::setWidth
        
            typedef void ( ::osgWidget::WindowManager::*setWidth_function_type )( ::osgWidget::point_type ) ;
            
            WindowManager_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::osgWidget::WindowManager::setWidth )
                , ( bp::arg("w") ) );
        
        }
        { //::osgWidget::WindowManager::setWindowSize
        
            typedef void ( ::osgWidget::WindowManager::*setWindowSize_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            WindowManager_exposer.def( 
                "setWindowSize"
                , setWindowSize_function_type( &::osgWidget::WindowManager::setWindowSize )
                , ( bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::osgWidget::WindowManager::windowXY
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::WindowManager::*windowXY_function_type )( double,double ) const;
            
            WindowManager_exposer.def( 
                "windowXY"
                , windowXY_function_type( &::osgWidget::WindowManager::windowXY )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        WindowManager_exposer.staticmethod( "setEventFromInterface" );
    }

}
