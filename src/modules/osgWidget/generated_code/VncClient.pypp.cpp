// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgwidget.h"
#include "wrap_referenced.h"
#include "vncclient.pypp.hpp"

namespace bp = boost::python;

void register_VncClient_class(){

    { //::osgWidget::VncClient
        typedef bp::class_< osgWidget::VncClient, osg::ref_ptr< ::osgWidget::VncClient >, boost::noncopyable > VncClient_exposer_t;
        VncClient_exposer_t VncClient_exposer = VncClient_exposer_t( "VncClient", "\n Convinience Vnc Client class that provides a interactive quad that can be placed directly in the scene.\n", bp::init< >("\n Convinience Vnc Client class that provides a interactive quad that can be placed directly in the scene.\n") );
        bp::scope VncClient_scope( VncClient_exposer );
        VncClient_exposer.def( bp::init< std::string const &, bp::optional< osgWidget::GeometryHints const & > >(( bp::arg("hostname"), bp::arg("hints")=osgWidget::GeometryHints() ), "\n Convinience Vnc Client class that provides a interactive quad that can be placed directly in the scene.\n") );
        bp::implicitly_convertible< std::string const &, osgWidget::VncClient >();
        { //::osgWidget::VncClient::assign
        
            typedef bool ( ::osgWidget::VncClient::*assign_function_type )( ::osgWidget::VncImage *,::osgWidget::GeometryHints const & ) ;
            
            VncClient_exposer.def( 
                "assign"
                , assign_function_type( &::osgWidget::VncClient::assign )
                , ( bp::arg("vncImage"), bp::arg("hints")=osgWidget::GeometryHints() ) );
        
        }
        { //::osgWidget::VncClient::close
        
            typedef void ( ::osgWidget::VncClient::*close_function_type )(  ) ;
            
            VncClient_exposer.def( 
                "close"
                , close_function_type( &::osgWidget::VncClient::close ) );
        
        }
        { //::osgWidget::VncClient::connect
        
            typedef bool ( ::osgWidget::VncClient::*connect_function_type )( ::std::string const &,::osgWidget::GeometryHints const & ) ;
            
            VncClient_exposer.def( 
                "connect"
                , connect_function_type( &::osgWidget::VncClient::connect )
                , ( bp::arg("hostname"), bp::arg("hints")=osgWidget::GeometryHints() ) );
        
        }
    }

}
