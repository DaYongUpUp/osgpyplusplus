// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgwidget.h"
#include "wrap_referenced.h"
#include "window.pypp.hpp"

namespace bp = boost::python;

struct Window_wrapper : osgWidget::Window, bp::wrapper< osgWidget::Window > {

    struct EmbeddedWindow_wrapper : osgWidget::Window::EmbeddedWindow, bp::wrapper< osgWidget::Window::EmbeddedWindow > {
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osgWidget::Window::EmbeddedWindow::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osgWidget::Window::EmbeddedWindow::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osgWidget::Window::EmbeddedWindow::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osgWidget::Window::EmbeddedWindow::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osgWidget::Window::EmbeddedWindow::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osgWidget::Window::EmbeddedWindow::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osgWidget::Window::EmbeddedWindow::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osgWidget::Window::EmbeddedWindow::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osgWidget::Window::EmbeddedWindow::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osgWidget::Window::EmbeddedWindow::libraryName( );
        }
    
        virtual void managed( ::osgWidget::WindowManager * arg0 ) {
            if( bp::override func_managed = this->get_override( "managed" ) )
                func_managed( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Window::EmbeddedWindow::managed( boost::python::ptr(arg0) );
            }
        }
        
        void default_managed( ::osgWidget::WindowManager * arg0 ) {
            osgWidget::Window::EmbeddedWindow::managed( boost::python::ptr(arg0) );
        }
    
        virtual void parented( ::osgWidget::Window * arg0 ) {
            if( bp::override func_parented = this->get_override( "parented" ) )
                func_parented( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Window::EmbeddedWindow::parented( boost::python::ptr(arg0) );
            }
        }
        
        void default_parented( ::osgWidget::Window * arg0 ) {
            osgWidget::Window::EmbeddedWindow::parented( boost::python::ptr(arg0) );
        }
    
        virtual void positioned(  ) {
            if( bp::override func_positioned = this->get_override( "positioned" ) )
                func_positioned(  );
            else{
                this->osgWidget::Window::EmbeddedWindow::positioned(  );
            }
        }
        
        void default_positioned(  ) {
            osgWidget::Window::EmbeddedWindow::positioned( );
        }
    
        virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
            if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
                func_unmanaged( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Window::EmbeddedWindow::unmanaged( boost::python::ptr(arg0) );
            }
        }
        
        void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
            osgWidget::Window::EmbeddedWindow::unmanaged( boost::python::ptr(arg0) );
        }
    
        virtual void unparented( ::osgWidget::Window * arg0 ) {
            if( bp::override func_unparented = this->get_override( "unparented" ) )
                func_unparented( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Window::EmbeddedWindow::unparented( boost::python::ptr(arg0) );
            }
        }
        
        void default_unparented( ::osgWidget::Window * arg0 ) {
            osgWidget::Window::EmbeddedWindow::unparented( boost::python::ptr(arg0) );
        }
    
        virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
            if( bp::override func_focus = this->get_override( "focus" ) )
                return func_focus( boost::python::ptr(arg0) );
            else{
                return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
            }
        }
        
        bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
            return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    
        virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_keyDown = this->get_override( "keyDown" ) )
                return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_keyUp = this->get_override( "keyUp" ) )
                return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
                return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
                return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
                return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
                return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mousePush = this->get_override( "mousePush" ) )
                return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
                return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
                return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
            if( bp::override func_unfocus = this->get_override( "unfocus" ) )
                return func_unfocus( boost::python::ptr(arg0) );
            else{
                return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
            }
        }
        
        bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
            return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    
    };

    virtual bool addWidget( ::osgWidget::Widget * arg0 ) {
        if( bp::override func_addWidget = this->get_override( "addWidget" ) )
            return func_addWidget( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Window::addWidget( boost::python::ptr(arg0) );
        }
    }
    
    bool default_addWidget( ::osgWidget::Widget * arg0 ) {
        return osgWidget::Window::addWidget( boost::python::ptr(arg0) );
    }

    virtual bool insertWidget( ::osgWidget::Widget * arg0, unsigned int arg1 ) {
        if( bp::override func_insertWidget = this->get_override( "insertWidget" ) )
            return func_insertWidget( boost::python::ptr(arg0), arg1 );
        else{
            return this->osgWidget::Window::insertWidget( boost::python::ptr(arg0), arg1 );
        }
    }
    
    bool default_insertWidget( ::osgWidget::Widget * arg0, unsigned int arg1 ) {
        return osgWidget::Window::insertWidget( boost::python::ptr(arg0), arg1 );
    }

    virtual void managed( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_managed = this->get_override( "managed" ) )
            func_managed( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Window::managed( boost::python::ptr(arg0) );
        }
    }
    
    void default_managed( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Window::managed( boost::python::ptr(arg0) );
    }

    virtual bool removeWidget( ::osgWidget::Widget * arg0 ) {
        if( bp::override func_removeWidget = this->get_override( "removeWidget" ) )
            return func_removeWidget( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Window::removeWidget( boost::python::ptr(arg0) );
        }
    }
    
    bool default_removeWidget( ::osgWidget::Widget * arg0 ) {
        return osgWidget::Window::removeWidget( boost::python::ptr(arg0) );
    }

    virtual bool replaceWidget( ::osgWidget::Widget * arg0, ::osgWidget::Widget * arg1 ) {
        if( bp::override func_replaceWidget = this->get_override( "replaceWidget" ) )
            return func_replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        else{
            return this->osgWidget::Window::replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    }
    
    bool default_replaceWidget( ::osgWidget::Widget * arg0, ::osgWidget::Widget * arg1 ) {
        return osgWidget::Window::replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
    }

    virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
            func_unmanaged( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Window::unmanaged( boost::python::ptr(arg0) );
        }
    }
    
    void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Window::unmanaged( boost::python::ptr(arg0) );
    }

    virtual void update(  ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update(  );
        else{
            this->osgWidget::Window::update(  );
        }
    }
    
    void default_update(  ) {
        osgWidget::Window::update( );
    }

    virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_focus = this->get_override( "focus" ) )
            return func_focus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
    }

    virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyDown = this->get_override( "keyDown" ) )
            return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyUp = this->get_override( "keyUp" ) )
            return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
            return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
            return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
            return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
            return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mousePush = this->get_override( "mousePush" ) )
            return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
            return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
            return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_unfocus = this->get_override( "unfocus" ) )
            return func_unfocus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
    }

};

void register_Window_class(){

    { //::osgWidget::Window
        typedef bp::class_< Window_wrapper, bp::bases< osgWidget::UIObjectParent< osgWidget::Widget >, osgWidget::EventInterface, osgWidget::StyleInterface >, osg::ref_ptr< ::osgWidget::Window >, boost::noncopyable > Window_exposer_t;
        Window_exposer_t Window_exposer = Window_exposer_t( "Window", bp::no_init );
        bp::scope Window_scope( Window_exposer );
        bp::enum_< osgWidget::Window::HorizontalAnchor>("HorizontalAnchor")
            .value("HA_NONE", osgWidget::Window::HA_NONE)
            .value("HA_CENTER", osgWidget::Window::HA_CENTER)
            .value("HA_LEFT", osgWidget::Window::HA_LEFT)
            .value("HA_RIGHT", osgWidget::Window::HA_RIGHT)
            .export_values()
            ;
        bp::enum_< osgWidget::Window::Strata>("Strata")
            .value("STRATA_NONE", osgWidget::Window::STRATA_NONE)
            .value("STRATA_BACKGROUND", osgWidget::Window::STRATA_BACKGROUND)
            .value("STRATA_FOREGROUND", osgWidget::Window::STRATA_FOREGROUND)
            .export_values()
            ;
        bp::enum_< osgWidget::Window::VerticalAnchor>("VerticalAnchor")
            .value("VA_NONE", osgWidget::Window::VA_NONE)
            .value("VA_CENTER", osgWidget::Window::VA_CENTER)
            .value("VA_TOP", osgWidget::Window::VA_TOP)
            .value("VA_BOTTOM", osgWidget::Window::VA_BOTTOM)
            .export_values()
            ;
        bp::enum_< osgWidget::Window::VisibilityMode>("VisibilityMode")
            .value("VM_FULL", osgWidget::Window::VM_FULL)
            .value("VM_PARTIAL", osgWidget::Window::VM_PARTIAL)
            .value("VM_ENTIRE", osgWidget::Window::VM_ENTIRE)
            .export_values()
            ;
        bp::class_< Window_wrapper::EmbeddedWindow_wrapper, bp::bases< osgWidget::Widget >, osg::ref_ptr< ::osgWidget::Window::EmbeddedWindow >, boost::noncopyable >( "EmbeddedWindow", bp::no_init )    
            .def( 
                "className"
                , (char const * ( ::osgWidget::Window::EmbeddedWindow::* )(  ) const)(&::osgWidget::Window::EmbeddedWindow::className)
                , (char const * ( Window_wrapper::EmbeddedWindow_wrapper::* )(  ) const)(&Window_wrapper::EmbeddedWindow_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osgWidget::Window::EmbeddedWindow::* )( ::osg::CopyOp const & ) const)(&::osgWidget::Window::EmbeddedWindow::clone)
                , (::osg::Object * ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osg::CopyOp const & ) const)(&Window_wrapper::EmbeddedWindow_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osgWidget::Window::EmbeddedWindow::* )(  ) const)(&::osgWidget::Window::EmbeddedWindow::cloneType)
                , (::osg::Object * ( Window_wrapper::EmbeddedWindow_wrapper::* )(  ) const)(&Window_wrapper::EmbeddedWindow_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "getWindow"
                , (::osgWidget::Window * ( ::osgWidget::Window::EmbeddedWindow::* )(  ) )( &::osgWidget::Window::EmbeddedWindow::getWindow )
                , bp::return_internal_reference< >() )    
            .def( 
                "getWindow"
                , (::osgWidget::Window const * ( ::osgWidget::Window::EmbeddedWindow::* )(  ) const)( &::osgWidget::Window::EmbeddedWindow::getWindow )
                , bp::return_internal_reference< >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osgWidget::Window::EmbeddedWindow::* )( ::osg::Object const * ) const)(&::osgWidget::Window::EmbeddedWindow::isSameKindAs)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osg::Object const * ) const)(&Window_wrapper::EmbeddedWindow_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osgWidget::Window::EmbeddedWindow::* )(  ) const)(&::osgWidget::Window::EmbeddedWindow::libraryName)
                , (char const * ( Window_wrapper::EmbeddedWindow_wrapper::* )(  ) const)(&Window_wrapper::EmbeddedWindow_wrapper::default_libraryName) )    
            .def( 
                "managed"
                , (void ( ::osgWidget::Window::EmbeddedWindow::* )( ::osgWidget::WindowManager * ) )(&::osgWidget::Window::EmbeddedWindow::managed)
                , (void ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osgWidget::WindowManager * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_managed)
                , ( bp::arg("arg0") ) )    
            .def( 
                "parented"
                , (void ( ::osgWidget::Window::EmbeddedWindow::* )( ::osgWidget::Window * ) )(&::osgWidget::Window::EmbeddedWindow::parented)
                , (void ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osgWidget::Window * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_parented)
                , ( bp::arg("arg0") ) )    
            .def( 
                "positioned"
                , (void ( ::osgWidget::Window::EmbeddedWindow::* )(  ) )(&::osgWidget::Window::EmbeddedWindow::positioned)
                , (void ( Window_wrapper::EmbeddedWindow_wrapper::* )(  ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_positioned) )    
            .def( 
                "setWindow"
                , (bool ( ::osgWidget::Window::EmbeddedWindow::* )( ::osgWidget::Window * ) )( &::osgWidget::Window::EmbeddedWindow::setWindow )
                , ( bp::arg("arg0") ) )    
            .def( 
                "unmanaged"
                , (void ( ::osgWidget::Window::EmbeddedWindow::* )( ::osgWidget::WindowManager * ) )(&::osgWidget::Window::EmbeddedWindow::unmanaged)
                , (void ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osgWidget::WindowManager * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_unmanaged)
                , ( bp::arg("arg0") ) )    
            .def( 
                "unparented"
                , (void ( ::osgWidget::Window::EmbeddedWindow::* )( ::osgWidget::Window * ) )(&::osgWidget::Window::EmbeddedWindow::unparented)
                , (void ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osgWidget::Window * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_unparented)
                , ( bp::arg("arg0") ) )    
            .def( 
                "updateSizeFromWindow"
                , (void ( ::osgWidget::Window::EmbeddedWindow::* )(  ) )( &::osgWidget::Window::EmbeddedWindow::updateSizeFromWindow ) )    
            .def( 
                "focus"
                , (bool ( ::osgWidget::EventInterface::* )( ::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::focus)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_focus)
                , ( bp::arg("arg0") ) )    
            .def( 
                "keyDown"
                , (bool ( ::osgWidget::EventInterface::* )( int,int,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::keyDown)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( int,int,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_keyDown)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "keyUp"
                , (bool ( ::osgWidget::EventInterface::* )( int,int,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::keyUp)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( int,int,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_keyUp)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "mouseDrag"
                , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseDrag)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_mouseDrag)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "mouseEnter"
                , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseEnter)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_mouseEnter)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "mouseLeave"
                , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseLeave)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_mouseLeave)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "mouseOver"
                , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseOver)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_mouseOver)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "mousePush"
                , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mousePush)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_mousePush)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "mouseRelease"
                , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseRelease)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_mouseRelease)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "mouseScroll"
                , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseScroll)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_mouseScroll)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "unfocus"
                , (bool ( ::osgWidget::EventInterface::* )( ::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::unfocus)
                , (bool ( Window_wrapper::EmbeddedWindow_wrapper::* )( ::osgWidget::WindowManager const * ) )(&Window_wrapper::EmbeddedWindow_wrapper::default_unfocus)
                , ( bp::arg("arg0") ) );
        bp::class_< osgWidget::Window::Sizes >( "Sizes", bp::no_init )    
            .def_readwrite( "current", &osgWidget::Window::Sizes::current )    
            .def_readwrite( "minimum", &osgWidget::Window::Sizes::minimum );
        { //::osgWidget::Window::addChildAndGetIndex
        
            typedef unsigned int ( ::osgWidget::Window::*addChildAndGetIndex_function_type )( ::osg::Node * ) ;
            
            Window_exposer.def( 
                "addChildAndGetIndex"
                , addChildAndGetIndex_function_type( &::osgWidget::Window::addChildAndGetIndex )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::addDrawableAndGetIndex
        
            typedef unsigned int ( ::osgWidget::Window::*addDrawableAndGetIndex_function_type )( ::osg::Drawable * ) ;
            
            Window_exposer.def( 
                "addDrawableAndGetIndex"
                , addDrawableAndGetIndex_function_type( &::osgWidget::Window::addDrawableAndGetIndex )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::addOrigin
        
            typedef void ( ::osgWidget::Window::*addOrigin_function_type )( ::osgWidget::matrix_type,::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "addOrigin"
                , addOrigin_function_type( &::osgWidget::Window::addOrigin )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::Window::addRotate
        
            typedef void ( ::osgWidget::Window::*addRotate_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "addRotate"
                , addRotate_function_type( &::osgWidget::Window::addRotate )
                , ( bp::arg("r") ) );
        
        }
        { //::osgWidget::Window::addScale
        
            typedef void ( ::osgWidget::Window::*addScale_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "addScale"
                , addScale_function_type( &::osgWidget::Window::addScale )
                , ( bp::arg("s") ) );
        
        }
        { //::osgWidget::Window::addVisibleArea
        
            typedef void ( ::osgWidget::Window::*addVisibleArea_function_type )( int,int,int,int ) ;
            
            Window_exposer.def( 
                "addVisibleArea"
                , addVisibleArea_function_type( &::osgWidget::Window::addVisibleArea )
                , ( bp::arg("arg0")=(int)(0), bp::arg("arg1")=(int)(0), bp::arg("arg2")=(int)(0), bp::arg("arg3")=(int)(0) ) );
        
        }
        { //::osgWidget::Window::addWidget
        
            typedef bool ( ::osgWidget::Window::*addWidget_function_type )( ::osgWidget::Widget * ) ;
            typedef bool ( Window_wrapper::*default_addWidget_function_type )( ::osgWidget::Widget * ) ;
            
            Window_exposer.def( 
                "addWidget"
                , addWidget_function_type(&::osgWidget::Window::addWidget)
                , default_addWidget_function_type(&Window_wrapper::default_addWidget)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::addX
        
            typedef void ( ::osgWidget::Window::*addX_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "addX"
                , addX_function_type( &::osgWidget::Window::addX )
                , ( bp::arg("x") ) );
        
        }
        { //::osgWidget::Window::addY
        
            typedef void ( ::osgWidget::Window::*addY_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "addY"
                , addY_function_type( &::osgWidget::Window::addY )
                , ( bp::arg("y") ) );
        
        }
        { //::osgWidget::Window::addZ
        
            typedef void ( ::osgWidget::Window::*addZ_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "addZ"
                , addZ_function_type( &::osgWidget::Window::addZ )
                , ( bp::arg("z") ) );
        
        }
        { //::osgWidget::Window::attachMoveCallback
        
            typedef void ( ::osgWidget::Window::*attachMoveCallback_function_type )(  ) ;
            
            Window_exposer.def( 
                "attachMoveCallback"
                , attachMoveCallback_function_type( &::osgWidget::Window::attachMoveCallback ) );
        
        }
        { //::osgWidget::Window::attachRotateCallback
        
            typedef void ( ::osgWidget::Window::*attachRotateCallback_function_type )(  ) ;
            
            Window_exposer.def( 
                "attachRotateCallback"
                , attachRotateCallback_function_type( &::osgWidget::Window::attachRotateCallback ) );
        
        }
        { //::osgWidget::Window::attachScaleCallback
        
            typedef void ( ::osgWidget::Window::*attachScaleCallback_function_type )(  ) ;
            
            Window_exposer.def( 
                "attachScaleCallback"
                , attachScaleCallback_function_type( &::osgWidget::Window::attachScaleCallback ) );
        
        }
        { //::osgWidget::Window::attachTabFocusCallback
        
            typedef void ( ::osgWidget::Window::*attachTabFocusCallback_function_type )(  ) ;
            
            Window_exposer.def( 
                "attachTabFocusCallback"
                , attachTabFocusCallback_function_type( &::osgWidget::Window::attachTabFocusCallback ) );
        
        }
        { //::osgWidget::Window::embed
        
            typedef ::osgWidget::Window::EmbeddedWindow * ( ::osgWidget::Window::*embed_function_type )( ::std::string const &,::osgWidget::Widget::Layer,unsigned int ) ;
            
            Window_exposer.def( 
                "embed"
                , embed_function_type( &::osgWidget::Window::embed )
                , ( bp::arg("arg0")="", bp::arg("arg1")=::osgWidget::Widget::LAYER_MIDDLE, bp::arg("arg2")=(unsigned int)(0) )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getAbsoluteOrigin
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Window::*getAbsoluteOrigin_function_type )(  ) const;
            
            Window_exposer.def( 
                "getAbsoluteOrigin"
                , getAbsoluteOrigin_function_type( &::osgWidget::Window::getAbsoluteOrigin ) );
        
        }
        { //::osgWidget::Window::getAnchorHorizontal
        
            typedef ::osgWidget::Window::HorizontalAnchor ( ::osgWidget::Window::*getAnchorHorizontal_function_type )(  ) const;
            
            Window_exposer.def( 
                "getAnchorHorizontal"
                , getAnchorHorizontal_function_type( &::osgWidget::Window::getAnchorHorizontal ) );
        
        }
        { //::osgWidget::Window::getAnchorVertical
        
            typedef ::osgWidget::Window::VerticalAnchor ( ::osgWidget::Window::*getAnchorVertical_function_type )(  ) const;
            
            Window_exposer.def( 
                "getAnchorVertical"
                , getAnchorVertical_function_type( &::osgWidget::Window::getAnchorVertical ) );
        
        }
        { //::osgWidget::Window::getBackground
        
            typedef ::osgWidget::Widget * ( ::osgWidget::Window::*getBackground_function_type )(  ) ;
            
            Window_exposer.def( 
                "getBackground"
                , getBackground_function_type( &::osgWidget::Window::getBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getBackground
        
            typedef ::osgWidget::Widget const * ( ::osgWidget::Window::*getBackground_function_type )(  ) const;
            
            Window_exposer.def( 
                "getBackground"
                , getBackground_function_type( &::osgWidget::Window::getBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getEmbeddedList
        
            typedef bool ( ::osgWidget::Window::*getEmbeddedList_function_type )( ::std::list< osg::observer_ptr<osgWidget::Window> > & ) const;
            
            Window_exposer.def( 
                "getEmbeddedList"
                , getEmbeddedList_function_type( &::osgWidget::Window::getEmbeddedList )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::getFocusList
        
            typedef bool ( ::osgWidget::Window::*getFocusList_function_type )( ::osgWidget::WidgetList & ) const;
            
            Window_exposer.def( 
                "getFocusList"
                , getFocusList_function_type( &::osgWidget::Window::getFocusList )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::getFocused
        
            typedef ::osgWidget::Widget * ( ::osgWidget::Window::*getFocused_function_type )(  ) ;
            
            Window_exposer.def( 
                "getFocused"
                , getFocused_function_type( &::osgWidget::Window::getFocused )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getFocused
        
            typedef ::osgWidget::Widget const * ( ::osgWidget::Window::*getFocused_function_type )(  ) const;
            
            Window_exposer.def( 
                "getFocused"
                , getFocused_function_type( &::osgWidget::Window::getFocused )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getGeode
        
            typedef ::osg::Geode * ( ::osgWidget::Window::*getGeode_function_type )(  ) ;
            
            Window_exposer.def( 
                "getGeode"
                , getGeode_function_type( &::osgWidget::Window::getGeode )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getGeode
        
            typedef ::osg::Geode const * ( ::osgWidget::Window::*getGeode_function_type )(  ) const;
            
            Window_exposer.def( 
                "getGeode"
                , getGeode_function_type( &::osgWidget::Window::getGeode )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getHeight
        
            typedef ::osgWidget::point_type ( ::osgWidget::Window::*getHeight_function_type )(  ) const;
            
            Window_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::osgWidget::Window::getHeight ) );
        
        }
        { //::osgWidget::Window::getIndex
        
            typedef unsigned int ( ::osgWidget::Window::*getIndex_function_type )(  ) const;
            
            Window_exposer.def( 
                "getIndex"
                , getIndex_function_type( &::osgWidget::Window::getIndex ) );
        
        }
        { //::osgWidget::Window::getMinHeight
        
            typedef ::osgWidget::point_type ( ::osgWidget::Window::*getMinHeight_function_type )(  ) const;
            
            Window_exposer.def( 
                "getMinHeight"
                , getMinHeight_function_type( &::osgWidget::Window::getMinHeight ) );
        
        }
        { //::osgWidget::Window::getMinSize
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Window::*getMinSize_function_type )(  ) const;
            
            Window_exposer.def( 
                "getMinSize"
                , getMinSize_function_type( &::osgWidget::Window::getMinSize ) );
        
        }
        { //::osgWidget::Window::getMinWidth
        
            typedef ::osgWidget::point_type ( ::osgWidget::Window::*getMinWidth_function_type )(  ) const;
            
            Window_exposer.def( 
                "getMinWidth"
                , getMinWidth_function_type( &::osgWidget::Window::getMinWidth ) );
        
        }
        { //::osgWidget::Window::getOrigin
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Window::*getOrigin_function_type )(  ) const;
            
            Window_exposer.def( 
                "getOrigin"
                , getOrigin_function_type( &::osgWidget::Window::getOrigin ) );
        
        }
        { //::osgWidget::Window::getParent
        
            typedef ::osgWidget::Window * ( ::osgWidget::Window::*getParent_function_type )(  ) ;
            
            Window_exposer.def( 
                "getParent"
                , getParent_function_type( &::osgWidget::Window::getParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getParent
        
            typedef ::osgWidget::Window const * ( ::osgWidget::Window::*getParent_function_type )(  ) const;
            
            Window_exposer.def( 
                "getParent"
                , getParent_function_type( &::osgWidget::Window::getParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getParentList
        
            typedef void ( ::osgWidget::Window::*getParentList_function_type )( ::std::list< osg::observer_ptr<osgWidget::Window> > & ) const;
            
            Window_exposer.def( 
                "getParentList"
                , getParentList_function_type( &::osgWidget::Window::getParentList )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::getPosition
        
            typedef ::osgWidget::Point ( ::osgWidget::Window::*getPosition_function_type )(  ) const;
            
            Window_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::osgWidget::Window::getPosition ) );
        
        }
        { //::osgWidget::Window::getRotate
        
            typedef ::osgWidget::matrix_type ( ::osgWidget::Window::*getRotate_function_type )(  ) const;
            
            Window_exposer.def( 
                "getRotate"
                , getRotate_function_type( &::osgWidget::Window::getRotate ) );
        
        }
        { //::osgWidget::Window::getScale
        
            typedef ::osgWidget::matrix_type ( ::osgWidget::Window::*getScale_function_type )(  ) const;
            
            Window_exposer.def( 
                "getScale"
                , getScale_function_type( &::osgWidget::Window::getScale ) );
        
        }
        { //::osgWidget::Window::getScaleDenominator
        
            typedef ::osgWidget::matrix_type ( ::osgWidget::Window::*getScaleDenominator_function_type )(  ) const;
            
            Window_exposer.def( 
                "getScaleDenominator"
                , getScaleDenominator_function_type( &::osgWidget::Window::getScaleDenominator ) );
        
        }
        { //::osgWidget::Window::getSize
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Window::*getSize_function_type )(  ) const;
            
            Window_exposer.def( 
                "getSize"
                , getSize_function_type( &::osgWidget::Window::getSize ) );
        
        }
        { //::osgWidget::Window::getStrata
        
            typedef ::osgWidget::Window::Strata ( ::osgWidget::Window::*getStrata_function_type )(  ) const;
            
            Window_exposer.def( 
                "getStrata"
                , getStrata_function_type( &::osgWidget::Window::getStrata ) );
        
        }
        { //::osgWidget::Window::getTopmostParent
        
            typedef ::osgWidget::Window * ( ::osgWidget::Window::*getTopmostParent_function_type )(  ) ;
            
            Window_exposer.def( 
                "getTopmostParent"
                , getTopmostParent_function_type( &::osgWidget::Window::getTopmostParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getTopmostParent
        
            typedef ::osgWidget::Window const * ( ::osgWidget::Window::*getTopmostParent_function_type )(  ) const;
            
            Window_exposer.def( 
                "getTopmostParent"
                , getTopmostParent_function_type( &::osgWidget::Window::getTopmostParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getVisibilityMode
        
            typedef ::osgWidget::Window::VisibilityMode ( ::osgWidget::Window::*getVisibilityMode_function_type )(  ) const;
            
            Window_exposer.def( 
                "getVisibilityMode"
                , getVisibilityMode_function_type( &::osgWidget::Window::getVisibilityMode ) );
        
        }
        { //::osgWidget::Window::getVisibleArea
        
            typedef ::osgWidget::Quad const & ( ::osgWidget::Window::*getVisibleArea_function_type )(  ) const;
            
            Window_exposer.def( 
                "getVisibleArea"
                , getVisibleArea_function_type( &::osgWidget::Window::getVisibleArea )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getWidth
        
            typedef ::osgWidget::point_type ( ::osgWidget::Window::*getWidth_function_type )(  ) const;
            
            Window_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::osgWidget::Window::getWidth ) );
        
        }
        { //::osgWidget::Window::getWindowManager
        
            typedef ::osgWidget::WindowManager * ( ::osgWidget::Window::*getWindowManager_function_type )(  ) ;
            
            Window_exposer.def( 
                "getWindowManager"
                , getWindowManager_function_type( &::osgWidget::Window::getWindowManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getWindowManager
        
            typedef ::osgWidget::WindowManager const * ( ::osgWidget::Window::*getWindowManager_function_type )(  ) const;
            
            Window_exposer.def( 
                "getWindowManager"
                , getWindowManager_function_type( &::osgWidget::Window::getWindowManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Window::getX
        
            typedef ::osgWidget::matrix_type ( ::osgWidget::Window::*getX_function_type )(  ) const;
            
            Window_exposer.def( 
                "getX"
                , getX_function_type( &::osgWidget::Window::getX ) );
        
        }
        { //::osgWidget::Window::getY
        
            typedef ::osgWidget::matrix_type ( ::osgWidget::Window::*getY_function_type )(  ) const;
            
            Window_exposer.def( 
                "getY"
                , getY_function_type( &::osgWidget::Window::getY ) );
        
        }
        { //::osgWidget::Window::getZ
        
            typedef ::osgWidget::matrix_type ( ::osgWidget::Window::*getZ_function_type )(  ) const;
            
            Window_exposer.def( 
                "getZ"
                , getZ_function_type( &::osgWidget::Window::getZ ) );
        
        }
        { //::osgWidget::Window::getZRange
        
            typedef ::osgWidget::matrix_type ( ::osgWidget::Window::*getZRange_function_type )(  ) const;
            
            Window_exposer.def( 
                "getZRange"
                , getZRange_function_type( &::osgWidget::Window::getZRange ) );
        
        }
        { //::osgWidget::Window::grabFocus
        
            typedef bool ( ::osgWidget::Window::*grabFocus_function_type )(  ) ;
            
            Window_exposer.def( 
                "grabFocus"
                , grabFocus_function_type( &::osgWidget::Window::grabFocus ) );
        
        }
        { //::osgWidget::Window::hide
        
            typedef bool ( ::osgWidget::Window::*hide_function_type )(  ) ;
            
            Window_exposer.def( 
                "hide"
                , hide_function_type( &::osgWidget::Window::hide ) );
        
        }
        { //::osgWidget::Window::insertWidget
        
            typedef bool ( ::osgWidget::Window::*insertWidget_function_type )( ::osgWidget::Widget *,unsigned int ) ;
            typedef bool ( Window_wrapper::*default_insertWidget_function_type )( ::osgWidget::Widget *,unsigned int ) ;
            
            Window_exposer.def( 
                "insertWidget"
                , insertWidget_function_type(&::osgWidget::Window::insertWidget)
                , default_insertWidget_function_type(&Window_wrapper::default_insertWidget)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Window::isPointerXYWithinVisible
        
            typedef bool ( ::osgWidget::Window::*isPointerXYWithinVisible_function_type )( float,float ) const;
            
            Window_exposer.def( 
                "isPointerXYWithinVisible"
                , isPointerXYWithinVisible_function_type( &::osgWidget::Window::isPointerXYWithinVisible )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::Window::isVisible
        
            typedef bool ( ::osgWidget::Window::*isVisible_function_type )(  ) const;
            
            Window_exposer.def( 
                "isVisible"
                , isVisible_function_type( &::osgWidget::Window::isVisible ) );
        
        }
        { //::osgWidget::Window::isXYWithinVisible
        
            typedef bool ( ::osgWidget::Window::*isXYWithinVisible_function_type )( float,float ) const;
            
            Window_exposer.def( 
                "isXYWithinVisible"
                , isXYWithinVisible_function_type( &::osgWidget::Window::isXYWithinVisible )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Window::localXY
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Window::*localXY_function_type )( double,double ) const;
            
            Window_exposer.def( 
                "localXY"
                , localXY_function_type( &::osgWidget::Window::localXY )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Window::managed
        
            typedef void ( ::osgWidget::Window::*managed_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Window_wrapper::*default_managed_function_type )( ::osgWidget::WindowManager * ) ;
            
            Window_exposer.def( 
                "managed"
                , managed_function_type(&::osgWidget::Window::managed)
                , default_managed_function_type(&Window_wrapper::default_managed)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::removeWidget
        
            typedef bool ( ::osgWidget::Window::*removeWidget_function_type )( ::osgWidget::Widget * ) ;
            typedef bool ( Window_wrapper::*default_removeWidget_function_type )( ::osgWidget::Widget * ) ;
            
            Window_exposer.def( 
                "removeWidget"
                , removeWidget_function_type(&::osgWidget::Window::removeWidget)
                , default_removeWidget_function_type(&Window_wrapper::default_removeWidget)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::replaceWidget
        
            typedef bool ( ::osgWidget::Window::*replaceWidget_function_type )( ::osgWidget::Widget *,::osgWidget::Widget * ) ;
            typedef bool ( Window_wrapper::*default_replaceWidget_function_type )( ::osgWidget::Widget *,::osgWidget::Widget * ) ;
            
            Window_exposer.def( 
                "replaceWidget"
                , replaceWidget_function_type(&::osgWidget::Window::replaceWidget)
                , default_replaceWidget_function_type(&Window_wrapper::default_replaceWidget)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Window::resize
        
            typedef bool ( ::osgWidget::Window::*resize_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Window_exposer.def( 
                "resize"
                , resize_function_type( &::osgWidget::Window::resize )
                , ( bp::arg("arg0")=0.0f, bp::arg("arg1")=0.0f ) );
        
        }
        { //::osgWidget::Window::resizeAdd
        
            typedef bool ( ::osgWidget::Window::*resizeAdd_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Window_exposer.def( 
                "resizeAdd"
                , resizeAdd_function_type( &::osgWidget::Window::resizeAdd )
                , ( bp::arg("arg0")=0.0f, bp::arg("arg1")=0.0f ) );
        
        }
        { //::osgWidget::Window::resizePercent
        
            typedef bool ( ::osgWidget::Window::*resizePercent_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Window_exposer.def( 
                "resizePercent"
                , resizePercent_function_type( &::osgWidget::Window::resizePercent )
                , ( bp::arg("arg0")=0.0f, bp::arg("arg1")=0.0f ) );
        
        }
        { //::osgWidget::Window::setAnchorHorizontal
        
            typedef void ( ::osgWidget::Window::*setAnchorHorizontal_function_type )( ::osgWidget::Window::HorizontalAnchor ) ;
            
            Window_exposer.def( 
                "setAnchorHorizontal"
                , setAnchorHorizontal_function_type( &::osgWidget::Window::setAnchorHorizontal )
                , ( bp::arg("ha") ) );
        
        }
        { //::osgWidget::Window::setAnchorVertical
        
            typedef void ( ::osgWidget::Window::*setAnchorVertical_function_type )( ::osgWidget::Window::VerticalAnchor ) ;
            
            Window_exposer.def( 
                "setAnchorVertical"
                , setAnchorVertical_function_type( &::osgWidget::Window::setAnchorVertical )
                , ( bp::arg("va") ) );
        
        }
        { //::osgWidget::Window::setFirstFocusable
        
            typedef bool ( ::osgWidget::Window::*setFirstFocusable_function_type )(  ) ;
            
            Window_exposer.def( 
                "setFirstFocusable"
                , setFirstFocusable_function_type( &::osgWidget::Window::setFirstFocusable ) );
        
        }
        { //::osgWidget::Window::setFocused
        
            typedef bool ( ::osgWidget::Window::*setFocused_function_type )( ::osgWidget::Widget const * ) ;
            
            Window_exposer.def( 
                "setFocused"
                , setFocused_function_type( &::osgWidget::Window::setFocused )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::setFocused
        
            typedef bool ( ::osgWidget::Window::*setFocused_function_type )( ::std::string const & ) ;
            
            Window_exposer.def( 
                "setFocused"
                , setFocused_function_type( &::osgWidget::Window::setFocused )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::setNextFocusable
        
            typedef bool ( ::osgWidget::Window::*setNextFocusable_function_type )(  ) ;
            
            Window_exposer.def( 
                "setNextFocusable"
                , setNextFocusable_function_type( &::osgWidget::Window::setNextFocusable ) );
        
        }
        { //::osgWidget::Window::setOrigin
        
            typedef void ( ::osgWidget::Window::*setOrigin_function_type )( ::osgWidget::matrix_type,::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setOrigin"
                , setOrigin_function_type( &::osgWidget::Window::setOrigin )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::Window::setOrigin
        
            typedef void ( ::osgWidget::Window::*setOrigin_function_type )( ::osgWidget::XYCoord const & ) ;
            
            Window_exposer.def( 
                "setOrigin"
                , setOrigin_function_type( &::osgWidget::Window::setOrigin )
                , ( bp::arg("xy") ) );
        
        }
        { //::osgWidget::Window::setPosition
        
            typedef void ( ::osgWidget::Window::*setPosition_function_type )( ::osgWidget::matrix_type,::osgWidget::matrix_type,::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::osgWidget::Window::setPosition )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::osgWidget::Window::setPosition
        
            typedef void ( ::osgWidget::Window::*setPosition_function_type )( ::osgWidget::Point const & ) ;
            
            Window_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::osgWidget::Window::setPosition )
                , ( bp::arg("p") ) );
        
        }
        { //::osgWidget::Window::setRotate
        
            typedef void ( ::osgWidget::Window::*setRotate_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setRotate"
                , setRotate_function_type( &::osgWidget::Window::setRotate )
                , ( bp::arg("r") ) );
        
        }
        { //::osgWidget::Window::setScale
        
            typedef void ( ::osgWidget::Window::*setScale_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setScale"
                , setScale_function_type( &::osgWidget::Window::setScale )
                , ( bp::arg("s") ) );
        
        }
        { //::osgWidget::Window::setScaleDenominator
        
            typedef void ( ::osgWidget::Window::*setScaleDenominator_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setScaleDenominator"
                , setScaleDenominator_function_type( &::osgWidget::Window::setScaleDenominator )
                , ( bp::arg("sd") ) );
        
        }
        { //::osgWidget::Window::setStrata
        
            typedef void ( ::osgWidget::Window::*setStrata_function_type )( ::osgWidget::Window::Strata ) ;
            
            Window_exposer.def( 
                "setStrata"
                , setStrata_function_type( &::osgWidget::Window::setStrata )
                , ( bp::arg("s") ) );
        
        }
        { //::osgWidget::Window::setVisibilityMode
        
            typedef void ( ::osgWidget::Window::*setVisibilityMode_function_type )( ::osgWidget::Window::VisibilityMode ) ;
            
            Window_exposer.def( 
                "setVisibilityMode"
                , setVisibilityMode_function_type( &::osgWidget::Window::setVisibilityMode )
                , ( bp::arg("v") ) );
        
        }
        { //::osgWidget::Window::setVisibleArea
        
            typedef void ( ::osgWidget::Window::*setVisibleArea_function_type )( int,int,int,int ) ;
            
            Window_exposer.def( 
                "setVisibleArea"
                , setVisibleArea_function_type( &::osgWidget::Window::setVisibleArea )
                , ( bp::arg("arg0")=(int)(0), bp::arg("arg1")=(int)(0), bp::arg("arg2")=(int)(0), bp::arg("arg3")=(int)(0) ) );
        
        }
        { //::osgWidget::Window::setX
        
            typedef void ( ::osgWidget::Window::*setX_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setX"
                , setX_function_type( &::osgWidget::Window::setX )
                , ( bp::arg("x") ) );
        
        }
        { //::osgWidget::Window::setY
        
            typedef void ( ::osgWidget::Window::*setY_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setY"
                , setY_function_type( &::osgWidget::Window::setY )
                , ( bp::arg("y") ) );
        
        }
        { //::osgWidget::Window::setZ
        
            typedef void ( ::osgWidget::Window::*setZ_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setZ"
                , setZ_function_type( &::osgWidget::Window::setZ )
                , ( bp::arg("z") ) );
        
        }
        { //::osgWidget::Window::setZRange
        
            typedef void ( ::osgWidget::Window::*setZRange_function_type )( ::osgWidget::matrix_type ) ;
            
            Window_exposer.def( 
                "setZRange"
                , setZRange_function_type( &::osgWidget::Window::setZRange )
                , ( bp::arg("zRange") ) );
        
        }
        { //::osgWidget::Window::show
        
            typedef bool ( ::osgWidget::Window::*show_function_type )(  ) ;
            
            Window_exposer.def( 
                "show"
                , show_function_type( &::osgWidget::Window::show ) );
        
        }
        { //::osgWidget::Window::unmanaged
        
            typedef void ( ::osgWidget::Window::*unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Window_wrapper::*default_unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            
            Window_exposer.def( 
                "unmanaged"
                , unmanaged_function_type(&::osgWidget::Window::unmanaged)
                , default_unmanaged_function_type(&Window_wrapper::default_unmanaged)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::update
        
            typedef void ( ::osgWidget::Window::*update_function_type )(  ) ;
            typedef void ( Window_wrapper::*default_update_function_type )(  ) ;
            
            Window_exposer.def( 
                "update"
                , update_function_type(&::osgWidget::Window::update)
                , default_update_function_type(&Window_wrapper::default_update) );
        
        }
        { //::osgWidget::EventInterface::focus
        
            typedef bool ( ::osgWidget::EventInterface::*focus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_focus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "focus"
                , focus_function_type(&::osgWidget::EventInterface::focus)
                , default_focus_function_type(&Window_wrapper::default_focus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::EventInterface::keyDown
        
            typedef bool ( ::osgWidget::EventInterface::*keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "keyDown"
                , keyDown_function_type(&::osgWidget::EventInterface::keyDown)
                , default_keyDown_function_type(&Window_wrapper::default_keyDown)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::keyUp
        
            typedef bool ( ::osgWidget::EventInterface::*keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "keyUp"
                , keyUp_function_type(&::osgWidget::EventInterface::keyUp)
                , default_keyUp_function_type(&Window_wrapper::default_keyUp)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseDrag
        
            typedef bool ( ::osgWidget::EventInterface::*mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "mouseDrag"
                , mouseDrag_function_type(&::osgWidget::EventInterface::mouseDrag)
                , default_mouseDrag_function_type(&Window_wrapper::default_mouseDrag)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseEnter
        
            typedef bool ( ::osgWidget::EventInterface::*mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "mouseEnter"
                , mouseEnter_function_type(&::osgWidget::EventInterface::mouseEnter)
                , default_mouseEnter_function_type(&Window_wrapper::default_mouseEnter)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseLeave
        
            typedef bool ( ::osgWidget::EventInterface::*mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "mouseLeave"
                , mouseLeave_function_type(&::osgWidget::EventInterface::mouseLeave)
                , default_mouseLeave_function_type(&Window_wrapper::default_mouseLeave)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseOver
        
            typedef bool ( ::osgWidget::EventInterface::*mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "mouseOver"
                , mouseOver_function_type(&::osgWidget::EventInterface::mouseOver)
                , default_mouseOver_function_type(&Window_wrapper::default_mouseOver)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mousePush
        
            typedef bool ( ::osgWidget::EventInterface::*mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "mousePush"
                , mousePush_function_type(&::osgWidget::EventInterface::mousePush)
                , default_mousePush_function_type(&Window_wrapper::default_mousePush)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseRelease
        
            typedef bool ( ::osgWidget::EventInterface::*mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "mouseRelease"
                , mouseRelease_function_type(&::osgWidget::EventInterface::mouseRelease)
                , default_mouseRelease_function_type(&Window_wrapper::default_mouseRelease)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseScroll
        
            typedef bool ( ::osgWidget::EventInterface::*mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "mouseScroll"
                , mouseScroll_function_type(&::osgWidget::EventInterface::mouseScroll)
                , default_mouseScroll_function_type(&Window_wrapper::default_mouseScroll)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::unfocus
        
            typedef bool ( ::osgWidget::EventInterface::*unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Window_wrapper::*default_unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Window_exposer.def( 
                "unfocus"
                , unfocus_function_type(&::osgWidget::EventInterface::unfocus)
                , default_unfocus_function_type(&Window_wrapper::default_unfocus)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
