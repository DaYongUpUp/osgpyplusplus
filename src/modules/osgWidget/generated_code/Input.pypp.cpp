// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgwidget.h"
#include "wrap_referenced.h"
#include "input.pypp.hpp"

namespace bp = boost::python;

struct Input_wrapper : osgWidget::Input, bp::wrapper< osgWidget::Input > {

    Input_wrapper(::std::string const & arg0="", ::std::string const & arg1="", unsigned int arg2=20 )
    : osgWidget::Input( arg0, arg1, arg2 )
      , bp::wrapper< osgWidget::Input >(){
        // constructor
    
    }

    virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_focus = this->get_override( "focus" ) )
            return func_focus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Input::focus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::Input::focus( boost::python::ptr(arg0) );
    }

    virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyDown = this->get_override( "keyDown" ) )
            return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::Input::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::Input::keyDown( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyUp = this->get_override( "keyUp" ) )
            return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::Input::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::Input::keyUp( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
            return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::Input::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::Input::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mousePush( double x, double y, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mousePush = this->get_override( "mousePush" ) )
            return func_mousePush( x, y, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::Input::mousePush( x, y, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mousePush( double x, double y, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::Input::mousePush( x, y, boost::python::ptr(arg2) );
    }

    virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
            return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::Input::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::Input::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void parented( ::osgWidget::Window * arg0 ) {
        if( bp::override func_parented = this->get_override( "parented" ) )
            func_parented( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Input::parented( boost::python::ptr(arg0) );
        }
    }
    
    void default_parented( ::osgWidget::Window * arg0 ) {
        osgWidget::Input::parented( boost::python::ptr(arg0) );
    }

    virtual void positioned(  ) {
        if( bp::override func_positioned = this->get_override( "positioned" ) )
            func_positioned(  );
        else{
            this->osgWidget::Input::positioned(  );
        }
    }
    
    void default_positioned(  ) {
        osgWidget::Input::positioned( );
    }

    virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_unfocus = this->get_override( "unfocus" ) )
            return func_unfocus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Input::unfocus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::Input::unfocus( boost::python::ptr(arg0) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgWidget::Label::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgWidget::Label::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgWidget::Label::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgWidget::Label::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgWidget::Label::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgWidget::Label::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgWidget::Label::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgWidget::Label::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgWidget::Label::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgWidget::Label::libraryName( );
    }

    virtual void managed( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_managed = this->get_override( "managed" ) )
            func_managed( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Widget::managed( boost::python::ptr(arg0) );
        }
    }
    
    void default_managed( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Widget::managed( boost::python::ptr(arg0) );
    }

    virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
            return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
            return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
            return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
            return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
            func_unmanaged( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
        }
    }
    
    void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
    }

    virtual void unparented( ::osgWidget::Window * arg0 ) {
        if( bp::override func_unparented = this->get_override( "unparented" ) )
            func_unparented( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Label::unparented( boost::python::ptr(arg0) );
        }
    }
    
    void default_unparented( ::osgWidget::Window * arg0 ) {
        osgWidget::Label::unparented( boost::python::ptr(arg0) );
    }

};

void register_Input_class(){

    { //::osgWidget::Input
        typedef bp::class_< Input_wrapper, bp::bases< osgWidget::Label >, osg::ref_ptr< ::osgWidget::Input >, boost::noncopyable > Input_exposer_t;
        Input_exposer_t Input_exposer = Input_exposer_t( "Input", bp::init< bp::optional< std::string const &, std::string const &, unsigned int > >(( bp::arg("arg0")="", bp::arg("arg1")="", bp::arg("arg2")=(unsigned int)(20) )) );
        bp::scope Input_scope( Input_exposer );
        bp::implicitly_convertible< std::string const &, osgWidget::Input >();
        { //::osgWidget::Input::calculateBestYOffset
        
            typedef unsigned int ( ::osgWidget::Input::*calculateBestYOffset_function_type )( ::std::string const & ) ;
            
            Input_exposer.def( 
                "calculateBestYOffset"
                , calculateBestYOffset_function_type( &::osgWidget::Input::calculateBestYOffset )
                , ( bp::arg("arg0")="qgl" ) );
        
        }
        { //::osgWidget::Input::clear
        
            typedef void ( ::osgWidget::Input::*clear_function_type )(  ) ;
            
            Input_exposer.def( 
                "clear"
                , clear_function_type( &::osgWidget::Input::clear ) );
        
        }
        { //::osgWidget::Input::focus
        
            typedef bool ( ::osgWidget::Input::*focus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_focus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "focus"
                , focus_function_type(&::osgWidget::Input::focus)
                , default_focus_function_type(&Input_wrapper::default_focus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Input::getCursor
        
            typedef ::osg::Drawable * ( ::osgWidget::Input::*getCursor_function_type )(  ) ;
            
            Input_exposer.def( 
                "getCursor"
                , getCursor_function_type( &::osgWidget::Input::getCursor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Input::getCursor
        
            typedef ::osg::Drawable const * ( ::osgWidget::Input::*getCursor_function_type )(  ) const;
            
            Input_exposer.def( 
                "getCursor"
                , getCursor_function_type( &::osgWidget::Input::getCursor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Input::getXOffset
        
            typedef ::osgWidget::point_type ( ::osgWidget::Input::*getXOffset_function_type )(  ) const;
            
            Input_exposer.def( 
                "getXOffset"
                , getXOffset_function_type( &::osgWidget::Input::getXOffset ) );
        
        }
        { //::osgWidget::Input::getXYOffset
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Input::*getXYOffset_function_type )(  ) const;
            
            Input_exposer.def( 
                "getXYOffset"
                , getXYOffset_function_type( &::osgWidget::Input::getXYOffset ) );
        
        }
        { //::osgWidget::Input::getYOffset
        
            typedef ::osgWidget::point_type ( ::osgWidget::Input::*getYOffset_function_type )(  ) const;
            
            Input_exposer.def( 
                "getYOffset"
                , getYOffset_function_type( &::osgWidget::Input::getYOffset ) );
        
        }
        { //::osgWidget::Input::keyDown
        
            typedef bool ( ::osgWidget::Input::*keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "keyDown"
                , keyDown_function_type(&::osgWidget::Input::keyDown)
                , default_keyDown_function_type(&Input_wrapper::default_keyDown)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Input::keyUp
        
            typedef bool ( ::osgWidget::Input::*keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "keyUp"
                , keyUp_function_type(&::osgWidget::Input::keyUp)
                , default_keyUp_function_type(&Input_wrapper::default_keyUp)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Input::mouseDrag
        
            typedef bool ( ::osgWidget::Input::*mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "mouseDrag"
                , mouseDrag_function_type(&::osgWidget::Input::mouseDrag)
                , default_mouseDrag_function_type(&Input_wrapper::default_mouseDrag)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Input::mousePush
        
            typedef bool ( ::osgWidget::Input::*mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "mousePush"
                , mousePush_function_type(&::osgWidget::Input::mousePush)
                , default_mousePush_function_type(&Input_wrapper::default_mousePush)
                , ( bp::arg("x"), bp::arg("y"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Input::mouseRelease
        
            typedef bool ( ::osgWidget::Input::*mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "mouseRelease"
                , mouseRelease_function_type(&::osgWidget::Input::mouseRelease)
                , default_mouseRelease_function_type(&Input_wrapper::default_mouseRelease)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Input::parented
        
            typedef void ( ::osgWidget::Input::*parented_function_type )( ::osgWidget::Window * ) ;
            typedef void ( Input_wrapper::*default_parented_function_type )( ::osgWidget::Window * ) ;
            
            Input_exposer.def( 
                "parented"
                , parented_function_type(&::osgWidget::Input::parented)
                , default_parented_function_type(&Input_wrapper::default_parented)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Input::positioned
        
            typedef void ( ::osgWidget::Input::*positioned_function_type )(  ) ;
            typedef void ( Input_wrapper::*default_positioned_function_type )(  ) ;
            
            Input_exposer.def( 
                "positioned"
                , positioned_function_type(&::osgWidget::Input::positioned)
                , default_positioned_function_type(&Input_wrapper::default_positioned) );
        
        }
        { //::osgWidget::Input::setCursor
        
            typedef void ( ::osgWidget::Input::*setCursor_function_type )( ::osgWidget::Widget * ) ;
            
            Input_exposer.def( 
                "setCursor"
                , setCursor_function_type( &::osgWidget::Input::setCursor )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Input::setXOffset
        
            typedef void ( ::osgWidget::Input::*setXOffset_function_type )( ::osgWidget::point_type ) ;
            
            Input_exposer.def( 
                "setXOffset"
                , setXOffset_function_type( &::osgWidget::Input::setXOffset )
                , ( bp::arg("xo") ) );
        
        }
        { //::osgWidget::Input::setXYOffset
        
            typedef void ( ::osgWidget::Input::*setXYOffset_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Input_exposer.def( 
                "setXYOffset"
                , setXYOffset_function_type( &::osgWidget::Input::setXYOffset )
                , ( bp::arg("xo"), bp::arg("yo") ) );
        
        }
        { //::osgWidget::Input::setYOffset
        
            typedef void ( ::osgWidget::Input::*setYOffset_function_type )( ::osgWidget::point_type ) ;
            
            Input_exposer.def( 
                "setYOffset"
                , setYOffset_function_type( &::osgWidget::Input::setYOffset )
                , ( bp::arg("yo") ) );
        
        }
        { //::osgWidget::Input::unfocus
        
            typedef bool ( ::osgWidget::Input::*unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "unfocus"
                , unfocus_function_type(&::osgWidget::Input::unfocus)
                , default_unfocus_function_type(&Input_wrapper::default_unfocus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Label::className
        
            typedef char const * ( ::osgWidget::Label::*className_function_type )(  ) const;
            typedef char const * ( Input_wrapper::*default_className_function_type )(  ) const;
            
            Input_exposer.def( 
                "className"
                , className_function_type(&::osgWidget::Label::className)
                , default_className_function_type(&Input_wrapper::default_className) );
        
        }
        { //::osgWidget::Label::clone
        
            typedef ::osg::Object * ( ::osgWidget::Label::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Input_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Input_exposer.def( 
                "clone"
                , clone_function_type(&::osgWidget::Label::clone)
                , default_clone_function_type(&Input_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Label::cloneType
        
            typedef ::osg::Object * ( ::osgWidget::Label::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Input_wrapper::*default_cloneType_function_type )(  ) const;
            
            Input_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgWidget::Label::cloneType)
                , default_cloneType_function_type(&Input_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Label::isSameKindAs
        
            typedef bool ( ::osgWidget::Label::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Input_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Input_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgWidget::Label::isSameKindAs)
                , default_isSameKindAs_function_type(&Input_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgWidget::Label::libraryName
        
            typedef char const * ( ::osgWidget::Label::*libraryName_function_type )(  ) const;
            typedef char const * ( Input_wrapper::*default_libraryName_function_type )(  ) const;
            
            Input_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgWidget::Label::libraryName)
                , default_libraryName_function_type(&Input_wrapper::default_libraryName) );
        
        }
        { //::osgWidget::Widget::managed
        
            typedef void ( ::osgWidget::Widget::*managed_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Input_wrapper::*default_managed_function_type )( ::osgWidget::WindowManager * ) ;
            
            Input_exposer.def( 
                "managed"
                , managed_function_type(&::osgWidget::Widget::managed)
                , default_managed_function_type(&Input_wrapper::default_managed)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::EventInterface::mouseEnter
        
            typedef bool ( ::osgWidget::EventInterface::*mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "mouseEnter"
                , mouseEnter_function_type(&::osgWidget::EventInterface::mouseEnter)
                , default_mouseEnter_function_type(&Input_wrapper::default_mouseEnter)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseLeave
        
            typedef bool ( ::osgWidget::EventInterface::*mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "mouseLeave"
                , mouseLeave_function_type(&::osgWidget::EventInterface::mouseLeave)
                , default_mouseLeave_function_type(&Input_wrapper::default_mouseLeave)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseOver
        
            typedef bool ( ::osgWidget::EventInterface::*mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "mouseOver"
                , mouseOver_function_type(&::osgWidget::EventInterface::mouseOver)
                , default_mouseOver_function_type(&Input_wrapper::default_mouseOver)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseScroll
        
            typedef bool ( ::osgWidget::EventInterface::*mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Input_wrapper::*default_mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Input_exposer.def( 
                "mouseScroll"
                , mouseScroll_function_type(&::osgWidget::EventInterface::mouseScroll)
                , default_mouseScroll_function_type(&Input_wrapper::default_mouseScroll)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Widget::unmanaged
        
            typedef void ( ::osgWidget::Widget::*unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Input_wrapper::*default_unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            
            Input_exposer.def( 
                "unmanaged"
                , unmanaged_function_type(&::osgWidget::Widget::unmanaged)
                , default_unmanaged_function_type(&Input_wrapper::default_unmanaged)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Label::unparented
        
            typedef void ( ::osgWidget::Label::*unparented_function_type )( ::osgWidget::Window * ) ;
            typedef void ( Input_wrapper::*default_unparented_function_type )( ::osgWidget::Window * ) ;
            
            Input_exposer.def( 
                "unparented"
                , unparented_function_type(&::osgWidget::Label::unparented)
                , default_unparented_function_type(&Input_wrapper::default_unparented)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
