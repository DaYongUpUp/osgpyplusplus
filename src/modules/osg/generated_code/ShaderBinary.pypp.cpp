// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "shaderbinary.pypp.hpp"

namespace bp = boost::python;

struct ShaderBinary_wrapper : osg::ShaderBinary, bp::wrapper< osg::ShaderBinary > {

    ShaderBinary_wrapper( )
    : osg::ShaderBinary( )
      , bp::wrapper< osg::ShaderBinary >(){
        // null constructor
    
    }

    ShaderBinary_wrapper(::osg::ShaderBinary const & rhs, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::ShaderBinary( boost::ref(rhs), boost::ref(copyop) )
      , bp::wrapper< osg::ShaderBinary >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::ShaderBinary::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::ShaderBinary::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::ShaderBinary::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::ShaderBinary::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::ShaderBinary::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::ShaderBinary::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::ShaderBinary::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::ShaderBinary::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::ShaderBinary::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::ShaderBinary::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ShaderBinary_class(){

    { //::osg::ShaderBinary
        typedef bp::class_< ShaderBinary_wrapper, bp::bases< osg::Object >, boost::noncopyable > ShaderBinary_exposer_t;
        ShaderBinary_exposer_t ShaderBinary_exposer = ShaderBinary_exposer_t( "ShaderBinary", bp::init< >() );
        bp::scope ShaderBinary_scope( ShaderBinary_exposer );
        ShaderBinary_exposer.def( bp::init< osg::ShaderBinary const &, bp::optional< osg::CopyOp const & > >(( bp::arg("rhs"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::ShaderBinary const &, osg::ShaderBinary >();
        { //::osg::ShaderBinary::allocate
        
            typedef void ( ::osg::ShaderBinary::*allocate_function_type)( unsigned int ) ;
            
            ShaderBinary_exposer.def( 
                "allocate"
                , allocate_function_type( &::osg::ShaderBinary::allocate )
                , ( bp::arg("size") ) );
        
        }
        { //::osg::ShaderBinary::assign
        
            typedef void ( ::osg::ShaderBinary::*assign_function_type)( unsigned int,unsigned char const * ) ;
            
            ShaderBinary_exposer.def( 
                "assign"
                , assign_function_type( &::osg::ShaderBinary::assign )
                , ( bp::arg("size"), bp::arg("data") ) );
        
        }
        { //::osg::ShaderBinary::className
        
            typedef char const * ( ::osg::ShaderBinary::*className_function_type)(  ) const;
            typedef char const * ( ShaderBinary_wrapper::*default_className_function_type)(  ) const;
            
            ShaderBinary_exposer.def( 
                "className"
                , className_function_type(&::osg::ShaderBinary::className)
                , default_className_function_type(&ShaderBinary_wrapper::default_className) );
        
        }
        { //::osg::ShaderBinary::clone
        
            typedef ::osg::Object * ( ::osg::ShaderBinary::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ShaderBinary_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            ShaderBinary_exposer.def( 
                "clone"
                , clone_function_type(&::osg::ShaderBinary::clone)
                , default_clone_function_type(&ShaderBinary_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ShaderBinary::cloneType
        
            typedef ::osg::Object * ( ::osg::ShaderBinary::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( ShaderBinary_wrapper::*default_cloneType_function_type)(  ) const;
            
            ShaderBinary_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::ShaderBinary::cloneType)
                , default_cloneType_function_type(&ShaderBinary_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ShaderBinary::getData
        
            typedef unsigned char * ( ::osg::ShaderBinary::*getData_function_type)(  ) ;
            
            ShaderBinary_exposer.def( 
                "getData"
                , getData_function_type( &::osg::ShaderBinary::getData )
                    /* undefined call policies */ );
        
        }
        { //::osg::ShaderBinary::getData
        
            typedef unsigned char const * ( ::osg::ShaderBinary::*getData_function_type)(  ) const;
            
            ShaderBinary_exposer.def( 
                "getData"
                , getData_function_type( &::osg::ShaderBinary::getData )
                    /* undefined call policies */ );
        
        }
        { //::osg::ShaderBinary::getSize
        
            typedef unsigned int ( ::osg::ShaderBinary::*getSize_function_type)(  ) const;
            
            ShaderBinary_exposer.def( 
                "getSize"
                , getSize_function_type( &::osg::ShaderBinary::getSize ) );
        
        }
        { //::osg::ShaderBinary::isSameKindAs
        
            typedef bool ( ::osg::ShaderBinary::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( ShaderBinary_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            ShaderBinary_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::ShaderBinary::isSameKindAs)
                , default_isSameKindAs_function_type(&ShaderBinary_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::ShaderBinary::libraryName
        
            typedef char const * ( ::osg::ShaderBinary::*libraryName_function_type)(  ) const;
            typedef char const * ( ShaderBinary_wrapper::*default_libraryName_function_type)(  ) const;
            
            ShaderBinary_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::ShaderBinary::libraryName)
                , default_libraryName_function_type(&ShaderBinary_wrapper::default_libraryName) );
        
        }
        { //::osg::ShaderBinary::readShaderBinaryFile
        
            typedef ::osg::ShaderBinary * ( *readShaderBinaryFile_function_type )( ::std::string const & );
            
            ShaderBinary_exposer.def( 
                "readShaderBinaryFile"
                , readShaderBinaryFile_function_type( &::osg::ShaderBinary::readShaderBinaryFile )
                , ( bp::arg("fileName") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( ShaderBinary_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            ShaderBinary_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&ShaderBinary_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( ShaderBinary_wrapper::*default_getUserData_function_type)(  ) ;
            
            ShaderBinary_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&ShaderBinary_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( ShaderBinary_wrapper::*default_getUserData_function_type)(  ) const;
            
            ShaderBinary_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&ShaderBinary_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::resizeGLObjectBuffers
        
            typedef void ( ::osg::Object::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( ShaderBinary_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            ShaderBinary_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Object::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&ShaderBinary_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( ShaderBinary_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            ShaderBinary_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&ShaderBinary_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            ShaderBinary_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( ShaderBinary_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            ShaderBinary_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&ShaderBinary_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( ShaderBinary_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            ShaderBinary_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&ShaderBinary_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
        ShaderBinary_exposer.staticmethod( "readShaderBinaryFile" );
    }

}
