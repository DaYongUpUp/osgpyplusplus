// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec3f.pypp.hpp"

namespace bp = boost::python;

void register_Vec3f_class(){

    { //::osg::Vec3f
        typedef bp::class_< osg::Vec3f > Vec3f_exposer_t;
        Vec3f_exposer_t Vec3f_exposer = Vec3f_exposer_t( "Vec3f", bp::init< >() );
        bp::scope Vec3f_scope( Vec3f_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec3f::num_components;
        Vec3f_exposer.def( bp::init< float, float, float >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) );
        Vec3f_exposer.def( bp::init< osg::Vec2f const &, float >(( bp::arg("v2"), bp::arg("zz") )) );
        { //::osg::Vec3f::isNaN
        
            typedef bool ( ::osg::Vec3f::*isNaN_function_type)(  ) const;
            
            Vec3f_exposer.def( 
                "isNaN"
                , isNaN_function_type( &::osg::Vec3f::isNaN ) );
        
        }
        { //::osg::Vec3f::length
        
            typedef float ( ::osg::Vec3f::*length_function_type)(  ) const;
            
            Vec3f_exposer.def( 
                "length"
                , length_function_type( &::osg::Vec3f::length ) );
        
        }
        { //::osg::Vec3f::length2
        
            typedef float ( ::osg::Vec3f::*length2_function_type)(  ) const;
            
            Vec3f_exposer.def( 
                "length2"
                , length2_function_type( &::osg::Vec3f::length2 ) );
        
        }
        { //::osg::Vec3f::normalize
        
            typedef float ( ::osg::Vec3f::*normalize_function_type)(  ) ;
            
            Vec3f_exposer.def( 
                "normalize"
                , normalize_function_type( &::osg::Vec3f::normalize ) );
        
        }
        Vec3f_exposer.def( bp::self != bp::self );
        Vec3f_exposer.def( bp::self * bp::self );
        Vec3f_exposer.def( bp::self * bp::other< float >() );
        Vec3f_exposer.def( bp::self *= bp::other< float >() );
        Vec3f_exposer.def( bp::self + bp::self );
        Vec3f_exposer.def( bp::self += bp::self );
        Vec3f_exposer.def( bp::self - bp::self );
        Vec3f_exposer.def( -bp::self );
        Vec3f_exposer.def( bp::self -= bp::self );
        Vec3f_exposer.def( bp::self / bp::other< float >() );
        Vec3f_exposer.def( bp::self /= bp::other< float >() );
        Vec3f_exposer.def( bp::self < bp::self );
        Vec3f_exposer.def( bp::self == bp::self );
        { //::osg::Vec3f::operator[]
        
            typedef float & ( ::osg::Vec3f::*__getitem___function_type)( int ) ;
            
            Vec3f_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec3f::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3f::operator[]
        
            typedef float ( ::osg::Vec3f::*__getitem___function_type)( int ) const;
            
            Vec3f_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec3f::operator[] )
                , ( bp::arg("i") ) );
        
        }
        Vec3f_exposer.def( bp::self ^ bp::self );
        { //::osg::Vec3f::set
        
            typedef void ( ::osg::Vec3f::*set_function_type)( float,float,float ) ;
            
            Vec3f_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec3f::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::osg::Vec3f::set
        
            typedef void ( ::osg::Vec3f::*set_function_type)( ::osg::Vec3f const & ) ;
            
            Vec3f_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec3f::set )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Vec3f::valid
        
            typedef bool ( ::osg::Vec3f::*valid_function_type)(  ) const;
            
            Vec3f_exposer.def( 
                "valid"
                , valid_function_type( &::osg::Vec3f::valid ) );
        
        }
        { //::osg::Vec3f::x
        
            typedef float & ( ::osg::Vec3f::*x_function_type)(  ) ;
            
            Vec3f_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec3f::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3f::x
        
            typedef float ( ::osg::Vec3f::*x_function_type)(  ) const;
            
            Vec3f_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec3f::x ) );
        
        }
        { //::osg::Vec3f::y
        
            typedef float & ( ::osg::Vec3f::*y_function_type)(  ) ;
            
            Vec3f_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec3f::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3f::y
        
            typedef float ( ::osg::Vec3f::*y_function_type)(  ) const;
            
            Vec3f_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec3f::y ) );
        
        }
        { //::osg::Vec3f::z
        
            typedef float & ( ::osg::Vec3f::*z_function_type)(  ) ;
            
            Vec3f_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec3f::z )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3f::z
        
            typedef float ( ::osg::Vec3f::*z_function_type)(  ) const;
            
            Vec3f_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec3f::z ) );
        
        }
        Vec3f_exposer.def( bp::self * bp::other< osg::Matrixf >() );
        Vec3f_exposer.def( bp::self * bp::other< osg::Matrixd >() );
        Vec3f_exposer.def( bp::self * bp::other< osg::Vec4d >() );
        Vec3f_exposer.def( bp::self * bp::other< osg::Vec4f >() );
    }

}
