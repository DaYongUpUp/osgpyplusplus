// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "osg_free_functions.pypp.hpp"

namespace bp = boost::python;

void register_free_functions(){

    { //::osg::DegreesToRadians
    
        typedef double ( *DegreesToRadians_function_type )( double );
        
        bp::def( 
            "DegreesToRadians"
            , DegreesToRadians_function_type( &::osg::DegreesToRadians )
            , ( bp::arg("angle") ) );
    
    }

    { //::osg::DegreesToRadians
    
        typedef float ( *DegreesToRadians_function_type )( float );
        
        bp::def( 
            "DegreesToRadians"
            , DegreesToRadians_function_type( &::osg::DegreesToRadians )
            , ( bp::arg("angle") ) );
    
    }

    { //::osg::RadiansToDegrees
    
        typedef double ( *RadiansToDegrees_function_type )( double );
        
        bp::def( 
            "RadiansToDegrees"
            , RadiansToDegrees_function_type( &::osg::RadiansToDegrees )
            , ( bp::arg("angle") ) );
    
    }

    { //::osg::RadiansToDegrees
    
        typedef float ( *RadiansToDegrees_function_type )( float );
        
        bp::def( 
            "RadiansToDegrees"
            , RadiansToDegrees_function_type( &::osg::RadiansToDegrees )
            , ( bp::arg("angle") ) );
    
    }

    { //::osg::asciiToDouble
    
        typedef double ( *asciiToDouble_function_type )( char const * );
        
        bp::def( 
            "asciiToDouble"
            , asciiToDouble_function_type( &::osg::asciiToDouble )
            , ( bp::arg("str") ) );
    
    }

    { //::osg::asciiToFloat
    
        typedef float ( *asciiToFloat_function_type )( char const * );
        
        bp::def( 
            "asciiToFloat"
            , asciiToFloat_function_type( &::osg::asciiToFloat )
            , ( bp::arg("str") ) );
    
    }

    { //::osg::clampTo
    
        typedef double ( *clampTo_function_type )( double,double,double );
        
        bp::def( 
            "clampTo"
            , clampTo_function_type( &::osg::clampTo )
            , ( bp::arg("v"), bp::arg("minimum"), bp::arg("maximum") ) );
    
    }

    { //::osg::clampTo
    
        typedef float ( *clampTo_function_type )( float,float,float );
        
        bp::def( 
            "clampTo"
            , clampTo_function_type( &::osg::clampTo )
            , ( bp::arg("v"), bp::arg("minimum"), bp::arg("maximum") ) );
    
    }

    { //::osg::componentDivide
    
        typedef ::osg::Vec4d ( *componentDivide_function_type )( ::osg::Vec4d const &,::osg::Vec4d const & );
        
        bp::def( 
            "componentDivide"
            , componentDivide_function_type( &::osg::componentDivide )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentDivide
    
        typedef ::osg::Vec3d ( *componentDivide_function_type )( ::osg::Vec3d const &,::osg::Vec3d const & );
        
        bp::def( 
            "componentDivide"
            , componentDivide_function_type( &::osg::componentDivide )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentDivide
    
        typedef ::osg::Vec2d ( *componentDivide_function_type )( ::osg::Vec2d const &,::osg::Vec2d const & );
        
        bp::def( 
            "componentDivide"
            , componentDivide_function_type( &::osg::componentDivide )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentDivide
    
        typedef ::osg::Vec4f ( *componentDivide_function_type )( ::osg::Vec4f const &,::osg::Vec4f const & );
        
        bp::def( 
            "componentDivide"
            , componentDivide_function_type( &::osg::componentDivide )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentDivide
    
        typedef ::osg::Vec3f ( *componentDivide_function_type )( ::osg::Vec3f const &,::osg::Vec3f const & );
        
        bp::def( 
            "componentDivide"
            , componentDivide_function_type( &::osg::componentDivide )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentDivide
    
        typedef ::osg::Vec2f ( *componentDivide_function_type )( ::osg::Vec2f const &,::osg::Vec2f const & );
        
        bp::def( 
            "componentDivide"
            , componentDivide_function_type( &::osg::componentDivide )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentMultiply
    
        typedef ::osg::Vec4d ( *componentMultiply_function_type )( ::osg::Vec4d const &,::osg::Vec4d const & );
        
        bp::def( 
            "componentMultiply"
            , componentMultiply_function_type( &::osg::componentMultiply )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentMultiply
    
        typedef ::osg::Vec3d ( *componentMultiply_function_type )( ::osg::Vec3d const &,::osg::Vec3d const & );
        
        bp::def( 
            "componentMultiply"
            , componentMultiply_function_type( &::osg::componentMultiply )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentMultiply
    
        typedef ::osg::Vec2d ( *componentMultiply_function_type )( ::osg::Vec2d const &,::osg::Vec2d const & );
        
        bp::def( 
            "componentMultiply"
            , componentMultiply_function_type( &::osg::componentMultiply )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentMultiply
    
        typedef ::osg::Vec4f ( *componentMultiply_function_type )( ::osg::Vec4f const &,::osg::Vec4f const & );
        
        bp::def( 
            "componentMultiply"
            , componentMultiply_function_type( &::osg::componentMultiply )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentMultiply
    
        typedef ::osg::Vec3f ( *componentMultiply_function_type )( ::osg::Vec3f const &,::osg::Vec3f const & );
        
        bp::def( 
            "componentMultiply"
            , componentMultiply_function_type( &::osg::componentMultiply )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::componentMultiply
    
        typedef ::osg::Vec2f ( *componentMultiply_function_type )( ::osg::Vec2f const &,::osg::Vec2f const & );
        
        bp::def( 
            "componentMultiply"
            , componentMultiply_function_type( &::osg::componentMultiply )
            , ( bp::arg("lhs"), bp::arg("rhs") ) );
    
    }

    { //::osg::equivalent
    
        typedef bool ( *equivalent_function_type )( double,double,double );
        
        bp::def( 
            "equivalent"
            , equivalent_function_type( &::osg::equivalent )
            , ( bp::arg("lhs"), bp::arg("rhs"), bp::arg("epsilon")=9.99999999999999954748111825886258685613938723691e-7 ) );
    
    }

    { //::osg::equivalent
    
        typedef bool ( *equivalent_function_type )( float,float,float );
        
        bp::def( 
            "equivalent"
            , equivalent_function_type( &::osg::equivalent )
            , ( bp::arg("lhs"), bp::arg("rhs"), bp::arg("epsilon")=9.99999999999999954748111825886258685613938723691e-7 ) );
    
    }

    { //::osg::findAsciiToDouble
    
        typedef double ( *findAsciiToDouble_function_type )( char const * );
        
        bp::def( 
            "findAsciiToDouble"
            , findAsciiToDouble_function_type( &::osg::findAsciiToDouble )
            , ( bp::arg("str") ) );
    
    }

    { //::osg::findAsciiToFloat
    
        typedef float ( *findAsciiToFloat_function_type )( char const * );
        
        bp::def( 
            "findAsciiToFloat"
            , findAsciiToFloat_function_type( &::osg::findAsciiToFloat )
            , ( bp::arg("str") ) );
    
    }

    { //::osg::inDegrees
    
        typedef double ( *inDegrees_function_type )( double );
        
        bp::def( 
            "inDegrees"
            , inDegrees_function_type( &::osg::inDegrees )
            , ( bp::arg("angle") ) );
    
    }

    { //::osg::inDegrees
    
        typedef float ( *inDegrees_function_type )( float );
        
        bp::def( 
            "inDegrees"
            , inDegrees_function_type( &::osg::inDegrees )
            , ( bp::arg("angle") ) );
    
    }

    { //::osg::isNaN
    
        typedef bool ( *isNaN_function_type )( double );
        
        bp::def( 
            "isNaN"
            , isNaN_function_type( &::osg::isNaN )
            , ( bp::arg("v") ) );
    
    }

    { //::osg::round
    
        typedef double ( *round_function_type )( double );
        
        bp::def( 
            "round"
            , round_function_type( &::osg::round )
            , ( bp::arg("v") ) );
    
    }

    { //::osg::round
    
        typedef float ( *round_function_type )( float );
        
        bp::def( 
            "round"
            , round_function_type( &::osg::round )
            , ( bp::arg("v") ) );
    
    }

}
