// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "node.pypp.hpp"

namespace bp = boost::python;

struct Node_wrapper : osg::Node, bp::wrapper< osg::Node > {

    struct ComputeBoundingSphereCallback_wrapper : osg::Node::ComputeBoundingSphereCallback, bp::wrapper< osg::Node::ComputeBoundingSphereCallback > {
    
        ComputeBoundingSphereCallback_wrapper( )
        : osg::Node::ComputeBoundingSphereCallback( )
          , bp::wrapper< osg::Node::ComputeBoundingSphereCallback >(){
            // null constructor
        
        }
    
        ComputeBoundingSphereCallback_wrapper(::osg::Node::ComputeBoundingSphereCallback const & arg0, ::osg::CopyOp const & arg1 )
        : osg::Node::ComputeBoundingSphereCallback( boost::ref(arg0), boost::ref(arg1) )
          , bp::wrapper< osg::Node::ComputeBoundingSphereCallback >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::Node::ComputeBoundingSphereCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::Node::ComputeBoundingSphereCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::Node::ComputeBoundingSphereCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::Node::ComputeBoundingSphereCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::Node::ComputeBoundingSphereCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::Node::ComputeBoundingSphereCallback::cloneType( );
        }
    
        virtual ::osg::BoundingSphere computeBound( ::osg::Node const & arg0 ) const  {
            if( bp::override func_computeBound = this->get_override( "computeBound" ) )
                return func_computeBound( boost::ref(arg0) );
            else{
                return this->osg::Node::ComputeBoundingSphereCallback::computeBound( boost::ref(arg0) );
            }
        }
        
        ::osg::BoundingSphere default_computeBound( ::osg::Node const & arg0 ) const  {
            return osg::Node::ComputeBoundingSphereCallback::computeBound( boost::ref(arg0) );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::Node::ComputeBoundingSphereCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::Node::ComputeBoundingSphereCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::Node::ComputeBoundingSphereCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::Node::ComputeBoundingSphereCallback::libraryName( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    Node_wrapper( )
    : osg::Node( )
      , bp::wrapper< osg::Node >(){
        // null constructor
    
    }

    Node_wrapper(::osg::Node const & arg0, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::Node( boost::ref(arg0), boost::ref(copyop) )
      , bp::wrapper< osg::Node >(){
        // constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::Node::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::Node::accept( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osgTerrain::Terrain * asTerrain(  ) {
        if( bp::override func_asTerrain = this->get_override( "asTerrain" ) )
            return func_asTerrain(  );
        else{
            return this->osg::Node::asTerrain(  );
        }
    }
    
    ::osgTerrain::Terrain * default_asTerrain(  ) {
        return osg::Node::asTerrain( );
    }

    virtual ::osgTerrain::Terrain const * asTerrain(  ) const  {
        if( bp::override func_asTerrain = this->get_override( "asTerrain" ) )
            return func_asTerrain(  );
        else{
            return this->osg::Node::asTerrain(  );
        }
    }
    
    ::osgTerrain::Terrain const * default_asTerrain(  ) const  {
        return osg::Node::asTerrain( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Node::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Node::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Node::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Node::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Node::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Node::cloneType( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Node::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Node::computeBound( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Node::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Node::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Node::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Node::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * arg0=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(arg0) );
        else{
            this->osg::Node::releaseGLObjects( boost::python::ptr(arg0) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * arg0=0 ) const  {
        osg::Node::releaseGLObjects( boost::python::ptr(arg0) );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Node::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Node::resizeGLObjectBuffers( arg0 );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Node::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Node::setThreadSafeRefUnref( threadSafe );
    }

    virtual void traverse( ::osg::NodeVisitor & arg0 ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(arg0) );
        else{
            this->osg::Node::traverse( boost::ref(arg0) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & arg0 ) {
        osg::Node::traverse( boost::ref(arg0) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Node_class(){

    { //::osg::Node
        typedef bp::class_< Node_wrapper, bp::bases< osg::Object >, boost::noncopyable > Node_exposer_t;
        Node_exposer_t Node_exposer = Node_exposer_t( "Node", bp::no_init );
        bp::scope Node_scope( Node_exposer );
        bp::class_< Node_wrapper::ComputeBoundingSphereCallback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "ComputeBoundingSphereCallback", bp::init< >() )    
            .def( bp::init< osg::Node::ComputeBoundingSphereCallback const &, osg::CopyOp const & >(( bp::arg("arg0"), bp::arg("arg1") )) )    
            .def( 
                "className"
                , (char const * ( ::osg::Node::ComputeBoundingSphereCallback::* )(  )const)(&::osg::Node::ComputeBoundingSphereCallback::className)
                , (char const * ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )(  )const)(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::Node::ComputeBoundingSphereCallback::* )( ::osg::CopyOp const & )const)(&::osg::Node::ComputeBoundingSphereCallback::clone)
                , (::osg::Object * ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )( ::osg::CopyOp const & )const)(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::Node::ComputeBoundingSphereCallback::* )(  )const)(&::osg::Node::ComputeBoundingSphereCallback::cloneType)
                , (::osg::Object * ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )(  )const)(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "computeBound"
                , (::osg::BoundingSphere ( ::osg::Node::ComputeBoundingSphereCallback::* )( ::osg::Node const & )const)(&::osg::Node::ComputeBoundingSphereCallback::computeBound)
                , (::osg::BoundingSphere ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )( ::osg::Node const & )const)(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_computeBound)
                , ( bp::arg("arg0") ) )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::Node::ComputeBoundingSphereCallback::* )( ::osg::Object const * )const)(&::osg::Node::ComputeBoundingSphereCallback::isSameKindAs)
                , (bool ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )( ::osg::Object const * )const)(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::Node::ComputeBoundingSphereCallback::* )(  )const)(&::osg::Node::ComputeBoundingSphereCallback::libraryName)
                , (char const * ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )(  )const)(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_libraryName) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )(  ))(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )(  ))(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )(  )const)(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )( unsigned int ))(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )( ::std::string const & ))(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )( bool ))(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( Node_wrapper::ComputeBoundingSphereCallback_wrapper::* )( ::osg::Referenced * ))(&Node_wrapper::ComputeBoundingSphereCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        Node_exposer.def( bp::init< >() );
        Node_exposer.def( bp::init< osg::Node const &, bp::optional< osg::CopyOp const & > >(( bp::arg("arg0"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::Node const &, osg::Node >();
        { //::osg::Node::accept
        
            typedef void ( ::osg::Node::*accept_function_type)( ::osg::NodeVisitor & ) ;
            typedef void ( Node_wrapper::*default_accept_function_type)( ::osg::NodeVisitor & ) ;
            
            Node_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Node::accept)
                , default_accept_function_type(&Node_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Node::addCullCallback
        
            typedef void ( ::osg::Node::*addCullCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "addCullCallback"
                , addCullCallback_function_type( &::osg::Node::addCullCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::addDescription
        
            typedef void ( ::osg::Node::*addDescription_function_type)( ::std::string const & ) ;
            
            Node_exposer.def( 
                "addDescription"
                , addDescription_function_type( &::osg::Node::addDescription )
                , ( bp::arg("desc") ) );
        
        }
        { //::osg::Node::addEventCallback
        
            typedef void ( ::osg::Node::*addEventCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "addEventCallback"
                , addEventCallback_function_type( &::osg::Node::addEventCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::addUpdateCallback
        
            typedef void ( ::osg::Node::*addUpdateCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "addUpdateCallback"
                , addUpdateCallback_function_type( &::osg::Node::addUpdateCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera * ( ::osg::Node::*asCamera_function_type)(  ) ;
            typedef ::osg::Camera * ( Node_wrapper::*default_asCamera_function_type)(  ) ;
            
            Node_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&Node_wrapper::default_asCamera)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera const * ( ::osg::Node::*asCamera_function_type)(  ) const;
            typedef ::osg::Camera const * ( Node_wrapper::*default_asCamera_function_type)(  ) const;
            
            Node_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&Node_wrapper::default_asCamera)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode * ( ::osg::Node::*asGeode_function_type)(  ) ;
            typedef ::osg::Geode * ( Node_wrapper::*default_asGeode_function_type)(  ) ;
            
            Node_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&Node_wrapper::default_asGeode)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode const * ( ::osg::Node::*asGeode_function_type)(  ) const;
            typedef ::osg::Geode const * ( Node_wrapper::*default_asGeode_function_type)(  ) const;
            
            Node_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&Node_wrapper::default_asGeode)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asGroup
        
            typedef ::osg::Group * ( ::osg::Node::*asGroup_function_type)(  ) ;
            typedef ::osg::Group * ( Node_wrapper::*default_asGroup_function_type)(  ) ;
            
            Node_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Node::asGroup)
                , default_asGroup_function_type(&Node_wrapper::default_asGroup)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asGroup
        
            typedef ::osg::Group const * ( ::osg::Node::*asGroup_function_type)(  ) const;
            typedef ::osg::Group const * ( Node_wrapper::*default_asGroup_function_type)(  ) const;
            
            Node_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Node::asGroup)
                , default_asGroup_function_type(&Node_wrapper::default_asGroup)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch * ( ::osg::Node::*asSwitch_function_type)(  ) ;
            typedef ::osg::Switch * ( Node_wrapper::*default_asSwitch_function_type)(  ) ;
            
            Node_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&Node_wrapper::default_asSwitch)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch const * ( ::osg::Node::*asSwitch_function_type)(  ) const;
            typedef ::osg::Switch const * ( Node_wrapper::*default_asSwitch_function_type)(  ) const;
            
            Node_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&Node_wrapper::default_asSwitch)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTerrain
        
            typedef ::osgTerrain::Terrain * ( ::osg::Node::*asTerrain_function_type)(  ) ;
            typedef ::osgTerrain::Terrain * ( Node_wrapper::*default_asTerrain_function_type)(  ) ;
            
            Node_exposer.def( 
                "asTerrain"
                , asTerrain_function_type(&::osg::Node::asTerrain)
                , default_asTerrain_function_type(&Node_wrapper::default_asTerrain)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTerrain
        
            typedef ::osgTerrain::Terrain const * ( ::osg::Node::*asTerrain_function_type)(  ) const;
            typedef ::osgTerrain::Terrain const * ( Node_wrapper::*default_asTerrain_function_type)(  ) const;
            
            Node_exposer.def( 
                "asTerrain"
                , asTerrain_function_type(&::osg::Node::asTerrain)
                , default_asTerrain_function_type(&Node_wrapper::default_asTerrain)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform * ( ::osg::Node::*asTransform_function_type)(  ) ;
            typedef ::osg::Transform * ( Node_wrapper::*default_asTransform_function_type)(  ) ;
            
            Node_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&Node_wrapper::default_asTransform)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform const * ( ::osg::Node::*asTransform_function_type)(  ) const;
            typedef ::osg::Transform const * ( Node_wrapper::*default_asTransform_function_type)(  ) const;
            
            Node_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&Node_wrapper::default_asTransform)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::ascend
        
            typedef void ( ::osg::Node::*ascend_function_type)( ::osg::NodeVisitor & ) ;
            typedef void ( Node_wrapper::*default_ascend_function_type)( ::osg::NodeVisitor & ) ;
            
            Node_exposer.def( 
                "ascend"
                , ascend_function_type(&::osg::Node::ascend)
                , default_ascend_function_type(&Node_wrapper::default_ascend)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Node::className
        
            typedef char const * ( ::osg::Node::*className_function_type)(  ) const;
            typedef char const * ( Node_wrapper::*default_className_function_type)(  ) const;
            
            Node_exposer.def( 
                "className"
                , className_function_type(&::osg::Node::className)
                , default_className_function_type(&Node_wrapper::default_className) );
        
        }
        { //::osg::Node::clone
        
            typedef ::osg::Object * ( ::osg::Node::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Node_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            Node_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Node::clone)
                , default_clone_function_type(&Node_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Node::cloneType
        
            typedef ::osg::Object * ( ::osg::Node::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( Node_wrapper::*default_cloneType_function_type)(  ) const;
            
            Node_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Node::cloneType)
                , default_cloneType_function_type(&Node_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Node::computeBound
        
            typedef ::osg::BoundingSphere ( ::osg::Node::*computeBound_function_type)(  ) const;
            typedef ::osg::BoundingSphere ( Node_wrapper::*default_computeBound_function_type)(  ) const;
            
            Node_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::Node::computeBound)
                , default_computeBound_function_type(&Node_wrapper::default_computeBound) );
        
        }
        { //::osg::Node::containsOccluderNodes
        
            typedef bool ( ::osg::Node::*containsOccluderNodes_function_type)(  ) const;
            
            Node_exposer.def( 
                "containsOccluderNodes"
                , containsOccluderNodes_function_type( &::osg::Node::containsOccluderNodes ) );
        
        }
        { //::osg::Node::dirtyBound
        
            typedef void ( ::osg::Node::*dirtyBound_function_type)(  ) ;
            
            Node_exposer.def( 
                "dirtyBound"
                , dirtyBound_function_type( &::osg::Node::dirtyBound ) );
        
        }
        { //::osg::Node::getBound
        
            typedef ::osg::BoundingSphere const & ( ::osg::Node::*getBound_function_type)(  ) const;
            
            Node_exposer.def( 
                "getBound"
                , getBound_function_type( &::osg::Node::getBound )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::getComputeBoundingSphereCallback
        
            typedef ::osg::Node::ComputeBoundingSphereCallback * ( ::osg::Node::*getComputeBoundingSphereCallback_function_type)(  ) ;
            
            Node_exposer.def( 
                "getComputeBoundingSphereCallback"
                , getComputeBoundingSphereCallback_function_type( &::osg::Node::getComputeBoundingSphereCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getComputeBoundingSphereCallback
        
            typedef ::osg::Node::ComputeBoundingSphereCallback const * ( ::osg::Node::*getComputeBoundingSphereCallback_function_type)(  ) const;
            
            Node_exposer.def( 
                "getComputeBoundingSphereCallback"
                , getComputeBoundingSphereCallback_function_type( &::osg::Node::getComputeBoundingSphereCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getCullCallback
        
            typedef ::osg::NodeCallback * ( ::osg::Node::*getCullCallback_function_type)(  ) ;
            
            Node_exposer.def( 
                "getCullCallback"
                , getCullCallback_function_type( &::osg::Node::getCullCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getCullCallback
        
            typedef ::osg::NodeCallback const * ( ::osg::Node::*getCullCallback_function_type)(  ) const;
            
            Node_exposer.def( 
                "getCullCallback"
                , getCullCallback_function_type( &::osg::Node::getCullCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getCullingActive
        
            typedef bool ( ::osg::Node::*getCullingActive_function_type)(  ) const;
            
            Node_exposer.def( 
                "getCullingActive"
                , getCullingActive_function_type( &::osg::Node::getCullingActive ) );
        
        }
        { //::osg::Node::getDescription
        
            typedef ::std::string const & ( ::osg::Node::*getDescription_function_type)( unsigned int ) const;
            
            Node_exposer.def( 
                "getDescription"
                , getDescription_function_type( &::osg::Node::getDescription )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::getDescription
        
            typedef ::std::string & ( ::osg::Node::*getDescription_function_type)( unsigned int ) ;
            
            Node_exposer.def( 
                "getDescription"
                , getDescription_function_type( &::osg::Node::getDescription )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::getDescriptions
        
            typedef ::std::vector< std::string > & ( ::osg::Node::*getDescriptions_function_type)(  ) ;
            
            Node_exposer.def( 
                "getDescriptions"
                , getDescriptions_function_type( &::osg::Node::getDescriptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::getDescriptions
        
            typedef ::std::vector< std::string > const & ( ::osg::Node::*getDescriptions_function_type)(  ) const;
            
            Node_exposer.def( 
                "getDescriptions"
                , getDescriptions_function_type( &::osg::Node::getDescriptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::getEventCallback
        
            typedef ::osg::NodeCallback * ( ::osg::Node::*getEventCallback_function_type)(  ) ;
            
            Node_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::Node::getEventCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getEventCallback
        
            typedef ::osg::NodeCallback const * ( ::osg::Node::*getEventCallback_function_type)(  ) const;
            
            Node_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::Node::getEventCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getInitialBound
        
            typedef ::osg::BoundingSphere const & ( ::osg::Node::*getInitialBound_function_type)(  ) const;
            
            Node_exposer.def( 
                "getInitialBound"
                , getInitialBound_function_type( &::osg::Node::getInitialBound )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::getNodeMask
        
            typedef unsigned int ( ::osg::Node::*getNodeMask_function_type)(  ) const;
            
            Node_exposer.def( 
                "getNodeMask"
                , getNodeMask_function_type( &::osg::Node::getNodeMask ) );
        
        }
        { //::osg::Node::getNumChildrenRequiringEventTraversal
        
            typedef unsigned int ( ::osg::Node::*getNumChildrenRequiringEventTraversal_function_type)(  ) const;
            
            Node_exposer.def( 
                "getNumChildrenRequiringEventTraversal"
                , getNumChildrenRequiringEventTraversal_function_type( &::osg::Node::getNumChildrenRequiringEventTraversal ) );
        
        }
        { //::osg::Node::getNumChildrenRequiringUpdateTraversal
        
            typedef unsigned int ( ::osg::Node::*getNumChildrenRequiringUpdateTraversal_function_type)(  ) const;
            
            Node_exposer.def( 
                "getNumChildrenRequiringUpdateTraversal"
                , getNumChildrenRequiringUpdateTraversal_function_type( &::osg::Node::getNumChildrenRequiringUpdateTraversal ) );
        
        }
        { //::osg::Node::getNumChildrenWithCullingDisabled
        
            typedef unsigned int ( ::osg::Node::*getNumChildrenWithCullingDisabled_function_type)(  ) const;
            
            Node_exposer.def( 
                "getNumChildrenWithCullingDisabled"
                , getNumChildrenWithCullingDisabled_function_type( &::osg::Node::getNumChildrenWithCullingDisabled ) );
        
        }
        { //::osg::Node::getNumChildrenWithOccluderNodes
        
            typedef unsigned int ( ::osg::Node::*getNumChildrenWithOccluderNodes_function_type)(  ) const;
            
            Node_exposer.def( 
                "getNumChildrenWithOccluderNodes"
                , getNumChildrenWithOccluderNodes_function_type( &::osg::Node::getNumChildrenWithOccluderNodes ) );
        
        }
        { //::osg::Node::getNumDescriptions
        
            typedef unsigned int ( ::osg::Node::*getNumDescriptions_function_type)(  ) const;
            
            Node_exposer.def( 
                "getNumDescriptions"
                , getNumDescriptions_function_type( &::osg::Node::getNumDescriptions ) );
        
        }
        { //::osg::Node::getNumParents
        
            typedef unsigned int ( ::osg::Node::*getNumParents_function_type)(  ) const;
            
            Node_exposer.def( 
                "getNumParents"
                , getNumParents_function_type( &::osg::Node::getNumParents ) );
        
        }
        { //::osg::Node::getOrCreateStateSet
        
            typedef ::osg::StateSet * ( ::osg::Node::*getOrCreateStateSet_function_type)(  ) ;
            
            Node_exposer.def( 
                "getOrCreateStateSet"
                , getOrCreateStateSet_function_type( &::osg::Node::getOrCreateStateSet )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getParent
        
            typedef ::osg::Group * ( ::osg::Node::*getParent_function_type)( unsigned int ) ;
            
            Node_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::Node::getParent )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getParent
        
            typedef ::osg::Group const * ( ::osg::Node::*getParent_function_type)( unsigned int ) const;
            
            Node_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::Node::getParent )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getParentalNodePaths
        
            typedef ::osg::NodePathList ( ::osg::Node::*getParentalNodePaths_function_type)( ::osg::Node * ) const;
            
            Node_exposer.def( 
                "getParentalNodePaths"
                , getParentalNodePaths_function_type( &::osg::Node::getParentalNodePaths )
                , ( bp::arg("haltTraversalAtNode")=bp::object() ) );
        
        }
        { //::osg::Node::getParents
        
            typedef ::std::vector< osg::Group* > const & ( ::osg::Node::*getParents_function_type)(  ) const;
            
            Node_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::Node::getParents )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::getParents
        
            typedef ::std::vector< osg::Group* > ( ::osg::Node::*getParents_function_type)(  ) ;
            
            Node_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::Node::getParents ) );
        
        }
        { //::osg::Node::getStateSet
        
            typedef ::osg::StateSet * ( ::osg::Node::*getStateSet_function_type)(  ) ;
            
            Node_exposer.def( 
                "getStateSet"
                , getStateSet_function_type( &::osg::Node::getStateSet )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getStateSet
        
            typedef ::osg::StateSet const * ( ::osg::Node::*getStateSet_function_type)(  ) const;
            
            Node_exposer.def( 
                "getStateSet"
                , getStateSet_function_type( &::osg::Node::getStateSet )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getUpdateCallback
        
            typedef ::osg::NodeCallback * ( ::osg::Node::*getUpdateCallback_function_type)(  ) ;
            
            Node_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::Node::getUpdateCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getUpdateCallback
        
            typedef ::osg::NodeCallback const * ( ::osg::Node::*getUpdateCallback_function_type)(  ) const;
            
            Node_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::Node::getUpdateCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::getWorldMatrices
        
            typedef ::osg::MatrixList ( ::osg::Node::*getWorldMatrices_function_type)( ::osg::Node const * ) const;
            
            Node_exposer.def( 
                "getWorldMatrices"
                , getWorldMatrices_function_type( &::osg::Node::getWorldMatrices )
                , ( bp::arg("haltTraversalAtNode")=bp::object() ) );
        
        }
        { //::osg::Node::isCullingActive
        
            typedef bool ( ::osg::Node::*isCullingActive_function_type)(  ) const;
            
            Node_exposer.def( 
                "isCullingActive"
                , isCullingActive_function_type( &::osg::Node::isCullingActive ) );
        
        }
        { //::osg::Node::isSameKindAs
        
            typedef bool ( ::osg::Node::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Node_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Node_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Node::isSameKindAs)
                , default_isSameKindAs_function_type(&Node_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Node::libraryName
        
            typedef char const * ( ::osg::Node::*libraryName_function_type)(  ) const;
            typedef char const * ( Node_wrapper::*default_libraryName_function_type)(  ) const;
            
            Node_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Node::libraryName)
                , default_libraryName_function_type(&Node_wrapper::default_libraryName) );
        
        }
        { //::osg::Node::releaseGLObjects
        
            typedef void ( ::osg::Node::*releaseGLObjects_function_type)( ::osg::State * ) const;
            typedef void ( Node_wrapper::*default_releaseGLObjects_function_type)( ::osg::State * ) const;
            
            Node_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osg::Node::releaseGLObjects)
                , default_releaseGLObjects_function_type(&Node_wrapper::default_releaseGLObjects)
                , ( bp::arg("arg0")=bp::object() ) );
        
        }
        { //::osg::Node::removeCullCallback
        
            typedef void ( ::osg::Node::*removeCullCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "removeCullCallback"
                , removeCullCallback_function_type( &::osg::Node::removeCullCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::removeEventCallback
        
            typedef void ( ::osg::Node::*removeEventCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "removeEventCallback"
                , removeEventCallback_function_type( &::osg::Node::removeEventCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::removeUpdateCallback
        
            typedef void ( ::osg::Node::*removeUpdateCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "removeUpdateCallback"
                , removeUpdateCallback_function_type( &::osg::Node::removeUpdateCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::resizeGLObjectBuffers
        
            typedef void ( ::osg::Node::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Node_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Node_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Node::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Node_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Node::setComputeBoundingSphereCallback
        
            typedef void ( ::osg::Node::*setComputeBoundingSphereCallback_function_type)( ::osg::Node::ComputeBoundingSphereCallback * ) ;
            
            Node_exposer.def( 
                "setComputeBoundingSphereCallback"
                , setComputeBoundingSphereCallback_function_type( &::osg::Node::setComputeBoundingSphereCallback )
                , ( bp::arg("callback") ) );
        
        }
        { //::osg::Node::setCullCallback
        
            typedef void ( ::osg::Node::*setCullCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "setCullCallback"
                , setCullCallback_function_type( &::osg::Node::setCullCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::setCullingActive
        
            typedef void ( ::osg::Node::*setCullingActive_function_type)( bool ) ;
            
            Node_exposer.def( 
                "setCullingActive"
                , setCullingActive_function_type( &::osg::Node::setCullingActive )
                , ( bp::arg("active") ) );
        
        }
        { //::osg::Node::setDescriptions
        
            typedef void ( ::osg::Node::*setDescriptions_function_type)( ::std::vector< std::string > const & ) ;
            
            Node_exposer.def( 
                "setDescriptions"
                , setDescriptions_function_type( &::osg::Node::setDescriptions )
                , ( bp::arg("descriptions") ) );
        
        }
        { //::osg::Node::setEventCallback
        
            typedef void ( ::osg::Node::*setEventCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "setEventCallback"
                , setEventCallback_function_type( &::osg::Node::setEventCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::setInitialBound
        
            typedef void ( ::osg::Node::*setInitialBound_function_type)( ::osg::BoundingSphere const & ) ;
            
            Node_exposer.def( 
                "setInitialBound"
                , setInitialBound_function_type( &::osg::Node::setInitialBound )
                , ( bp::arg("bsphere") ) );
        
        }
        { //::osg::Node::setNodeMask
        
            typedef void ( ::osg::Node::*setNodeMask_function_type)( unsigned int ) ;
            
            Node_exposer.def( 
                "setNodeMask"
                , setNodeMask_function_type( &::osg::Node::setNodeMask )
                , ( bp::arg("nm") ) );
        
        }
        { //::osg::Node::setStateSet
        
            typedef void ( ::osg::Node::*setStateSet_function_type)( ::osg::StateSet * ) ;
            
            Node_exposer.def( 
                "setStateSet"
                , setStateSet_function_type( &::osg::Node::setStateSet )
                , ( bp::arg("stateset") ) );
        
        }
        { //::osg::Node::setThreadSafeRefUnref
        
            typedef void ( ::osg::Node::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Node_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Node_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Node::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Node_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Node::setUpdateCallback
        
            typedef void ( ::osg::Node::*setUpdateCallback_function_type)( ::osg::NodeCallback * ) ;
            
            Node_exposer.def( 
                "setUpdateCallback"
                , setUpdateCallback_function_type( &::osg::Node::setUpdateCallback )
                , ( bp::arg("nc") ) );
        
        }
        { //::osg::Node::traverse
        
            typedef void ( ::osg::Node::*traverse_function_type)( ::osg::NodeVisitor & ) ;
            typedef void ( Node_wrapper::*default_traverse_function_type)( ::osg::NodeVisitor & ) ;
            
            Node_exposer.def( 
                "traverse"
                , traverse_function_type(&::osg::Node::traverse)
                , default_traverse_function_type(&Node_wrapper::default_traverse)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Node_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Node_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Node_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Node_wrapper::*default_getUserData_function_type)(  ) ;
            
            Node_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Node_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Node_wrapper::*default_getUserData_function_type)(  ) const;
            
            Node_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Node_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Node_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Node_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Node_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Node_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Node_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Node_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Node_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
