// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "referenced.pypp.hpp"

namespace bp = boost::python;

struct Referenced_wrapper : osg::Referenced, bp::wrapper< osg::Referenced > {

    Referenced_wrapper( )
    : osg::Referenced( )
      , bp::wrapper< osg::Referenced >(){
        // null constructor
    
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

// Tell boost::python that osg::ref_ptr is a smart pointer class
            namespace boost { namespace python {
              template <class T> struct pointee< osg::ref_ptr<T> >
              { typedef T type; };
            } } // namespace boost::python

void register_Referenced_class(){

    { //::osg::Referenced
        typedef bp::class_< Referenced_wrapper, osg::ref_ptr< Referenced_wrapper >, boost::noncopyable > Referenced_exposer_t;
        Referenced_exposer_t Referenced_exposer = Referenced_exposer_t( "Referenced", bp::no_init );
        bp::scope Referenced_scope( Referenced_exposer );
        Referenced_exposer.def( bp::init< >() );
        { //::osg::Referenced::addObserver
        
            typedef void ( ::osg::Referenced::*addObserver_function_type)( ::osg::Observer * ) const;
            
            Referenced_exposer.def( 
                "addObserver"
                , addObserver_function_type( &::osg::Referenced::addObserver )
                , ( bp::arg("observer") ) );
        
        }
        { //::osg::Referenced::getDeleteHandler
        
            typedef ::osg::DeleteHandler * ( *getDeleteHandler_function_type )(  );
            
            Referenced_exposer.def( 
                "getDeleteHandler"
                , getDeleteHandler_function_type( &::osg::Referenced::getDeleteHandler )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Referenced::getGlobalReferencedMutex
        
            typedef ::OpenThreads::Mutex * ( *getGlobalReferencedMutex_function_type )(  );
            
            Referenced_exposer.def( 
                "getGlobalReferencedMutex"
                , getGlobalReferencedMutex_function_type( &::osg::Referenced::getGlobalReferencedMutex )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Referenced::getObserverSet
        
            typedef ::osg::ObserverSet * ( ::osg::Referenced::*getObserverSet_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "getObserverSet"
                , getObserverSet_function_type( &::osg::Referenced::getObserverSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Referenced::getOrCreateObserverSet
        
            typedef ::osg::ObserverSet * ( ::osg::Referenced::*getOrCreateObserverSet_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "getOrCreateObserverSet"
                , getOrCreateObserverSet_function_type( &::osg::Referenced::getOrCreateObserverSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Referenced::getRefMutex
        
            typedef ::OpenThreads::Mutex * ( ::osg::Referenced::*getRefMutex_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "getRefMutex"
                , getRefMutex_function_type( &::osg::Referenced::getRefMutex )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Referenced::getThreadSafeRefUnref
        
            typedef bool ( ::osg::Referenced::*getThreadSafeRefUnref_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "getThreadSafeRefUnref"
                , getThreadSafeRefUnref_function_type( &::osg::Referenced::getThreadSafeRefUnref ) );
        
        }
        { //::osg::Referenced::getThreadSafeReferenceCounting
        
            typedef bool ( *getThreadSafeReferenceCounting_function_type )(  );
            
            Referenced_exposer.def( 
                "getThreadSafeReferenceCounting"
                , getThreadSafeReferenceCounting_function_type( &::osg::Referenced::getThreadSafeReferenceCounting ) );
        
        }
        { //::osg::Referenced::ref
        
            typedef int ( ::osg::Referenced::*ref_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "ref"
                , ref_function_type( &::osg::Referenced::ref ) );
        
        }
        { //::osg::Referenced::referenceCount
        
            typedef int ( ::osg::Referenced::*referenceCount_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "referenceCount"
                , referenceCount_function_type( &::osg::Referenced::referenceCount ) );
        
        }
        { //::osg::Referenced::removeObserver
        
            typedef void ( ::osg::Referenced::*removeObserver_function_type)( ::osg::Observer * ) const;
            
            Referenced_exposer.def( 
                "removeObserver"
                , removeObserver_function_type( &::osg::Referenced::removeObserver )
                , ( bp::arg("observer") ) );
        
        }
        { //::osg::Referenced::setDeleteHandler
        
            typedef void ( *setDeleteHandler_function_type )( ::osg::DeleteHandler * );
            
            Referenced_exposer.def( 
                "setDeleteHandler"
                , setDeleteHandler_function_type( &::osg::Referenced::setDeleteHandler )
                , ( bp::arg("handler") ) );
        
        }
        { //::osg::Referenced::setThreadSafeRefUnref
        
            typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Referenced_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Referenced_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Referenced_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Referenced::setThreadSafeReferenceCounting
        
            typedef void ( *setThreadSafeReferenceCounting_function_type )( bool );
            
            Referenced_exposer.def( 
                "setThreadSafeReferenceCounting"
                , setThreadSafeReferenceCounting_function_type( &::osg::Referenced::setThreadSafeReferenceCounting )
                , ( bp::arg("enableThreadSafeReferenceCounting") ) );
        
        }
        { //::osg::Referenced::unref
        
            typedef int ( ::osg::Referenced::*unref_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "unref"
                , unref_function_type( &::osg::Referenced::unref ) );
        
        }
        { //::osg::Referenced::unref_nodelete
        
            typedef int ( ::osg::Referenced::*unref_nodelete_function_type)(  ) const;
            
            Referenced_exposer.def( 
                "unref_nodelete"
                , unref_nodelete_function_type( &::osg::Referenced::unref_nodelete ) );
        
        }
        Referenced_exposer.staticmethod( "getDeleteHandler" );
        Referenced_exposer.staticmethod( "getGlobalReferencedMutex" );
        Referenced_exposer.staticmethod( "getThreadSafeReferenceCounting" );
        Referenced_exposer.staticmethod( "setDeleteHandler" );
        Referenced_exposer.staticmethod( "setThreadSafeReferenceCounting" );
    }

}
