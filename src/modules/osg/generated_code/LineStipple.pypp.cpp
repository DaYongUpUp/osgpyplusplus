// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "linestipple.pypp.hpp"

namespace bp = boost::python;

struct LineStipple_wrapper : osg::LineStipple, bp::wrapper< osg::LineStipple > {

    LineStipple_wrapper( )
    : osg::LineStipple( )
      , bp::wrapper< osg::LineStipple >(){
        // null constructor
    
    }

    LineStipple_wrapper(::GLint factor, ::GLushort pattern )
    : osg::LineStipple( factor, pattern )
      , bp::wrapper< osg::LineStipple >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::LineStipple::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::LineStipple::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::LineStipple::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::LineStipple::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::LineStipple::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::LineStipple::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::LineStipple::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::LineStipple::cloneType( );
    }

    virtual int compare( ::osg::StateAttribute const & sa ) const  {
        if( bp::override func_compare = this->get_override( "compare" ) )
            return func_compare( boost::ref(sa) );
        else{
            return this->osg::LineStipple::compare( boost::ref(sa) );
        }
    }
    
    int default_compare( ::osg::StateAttribute const & sa ) const  {
        return osg::LineStipple::compare( boost::ref(sa) );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(usage) );
        else{
            return this->osg::LineStipple::getModeUsage( boost::ref(usage) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        return osg::LineStipple::getModeUsage( boost::ref(usage) );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::LineStipple::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::LineStipple::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::LineStipple::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::LineStipple::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::LineStipple::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::LineStipple::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & arg0 ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(arg0) );
        else{
            this->osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & arg0 ) const  {
        osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::StateAttribute::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::StateAttribute::isTextureAttribute( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_LineStipple_class(){

    bp::class_< LineStipple_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< ::osg::LineStipple >, boost::noncopyable >( "LineStipple", bp::no_init )    
        .def( bp::init< >() )    
        .def( bp::init< GLint, GLushort >(( bp::arg("factor"), bp::arg("pattern") )) )    
        .def( 
            "apply"
            , (void ( ::osg::LineStipple::* )( ::osg::State & )const)(&::osg::LineStipple::apply)
            , (void ( LineStipple_wrapper::* )( ::osg::State & )const)(&LineStipple_wrapper::default_apply)
            , ( bp::arg("state") ) )    
        .def( 
            "className"
            , (char const * ( ::osg::LineStipple::* )(  )const)(&::osg::LineStipple::className)
            , (char const * ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::LineStipple::* )( ::osg::CopyOp const & )const)(&::osg::LineStipple::clone)
            , (::osg::Object * ( LineStipple_wrapper::* )( ::osg::CopyOp const & )const)(&LineStipple_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::LineStipple::* )(  )const)(&::osg::LineStipple::cloneType)
            , (::osg::Object * ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "compare"
            , (int ( ::osg::LineStipple::* )( ::osg::StateAttribute const & )const)(&::osg::LineStipple::compare)
            , (int ( LineStipple_wrapper::* )( ::osg::StateAttribute const & )const)(&LineStipple_wrapper::default_compare)
            , ( bp::arg("sa") ) )    
        .def( 
            "getFactor"
            , (::GLint ( ::osg::LineStipple::* )(  )const)( &::osg::LineStipple::getFactor ) )    
        .def( 
            "getModeUsage"
            , (bool ( ::osg::LineStipple::* )( ::osg::StateAttribute::ModeUsage & )const)(&::osg::LineStipple::getModeUsage)
            , (bool ( LineStipple_wrapper::* )( ::osg::StateAttribute::ModeUsage & )const)(&LineStipple_wrapper::default_getModeUsage)
            , ( bp::arg("usage") ) )    
        .def( 
            "getPattern"
            , (::GLushort ( ::osg::LineStipple::* )(  )const)( &::osg::LineStipple::getPattern ) )    
        .def( 
            "getType"
            , (::osg::StateAttribute::Type ( ::osg::LineStipple::* )(  )const)(&::osg::LineStipple::getType)
            , (::osg::StateAttribute::Type ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_getType) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::LineStipple::* )( ::osg::Object const * )const)(&::osg::LineStipple::isSameKindAs)
            , (bool ( LineStipple_wrapper::* )( ::osg::Object const * )const)(&LineStipple_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::LineStipple::* )(  )const)(&::osg::LineStipple::libraryName)
            , (char const * ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_libraryName) )    
        .def( 
            "setFactor"
            , (void ( ::osg::LineStipple::* )( ::GLint ))( &::osg::LineStipple::setFactor )
            , ( bp::arg("factor") ) )    
        .def( 
            "setPattern"
            , (void ( ::osg::LineStipple::* )( ::GLushort ))( &::osg::LineStipple::setPattern )
            , ( bp::arg("pattern") ) )    
        .def( 
            "asTexture"
            , (::osg::Texture * ( ::osg::StateAttribute::* )(  ))(&::osg::StateAttribute::asTexture)
            , (::osg::Texture * ( LineStipple_wrapper::* )(  ))(&LineStipple_wrapper::default_asTexture)
            , bp::return_internal_reference< >() )    
        .def( 
            "asTexture"
            , (::osg::Texture const * ( ::osg::StateAttribute::* )(  )const)(&::osg::StateAttribute::asTexture)
            , (::osg::Texture const * ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_asTexture)
            , bp::return_internal_reference< >() )    
        .def( 
            "checkValidityOfAssociatedModes"
            , (bool ( ::osg::StateAttribute::* )( ::osg::State & )const)(&::osg::StateAttribute::checkValidityOfAssociatedModes)
            , (bool ( LineStipple_wrapper::* )( ::osg::State & )const)(&LineStipple_wrapper::default_checkValidityOfAssociatedModes)
            , ( bp::arg("arg0") ) )    
        .def( 
            "compileGLObjects"
            , (void ( ::osg::StateAttribute::* )( ::osg::State & )const)(&::osg::StateAttribute::compileGLObjects)
            , (void ( LineStipple_wrapper::* )( ::osg::State & )const)(&LineStipple_wrapper::default_compileGLObjects)
            , ( bp::arg("arg0") ) )    
        .def( 
            "computeDataVariance"
            , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
            , (void ( LineStipple_wrapper::* )(  ))(&LineStipple_wrapper::default_computeDataVariance) )    
        .def( 
            "getMember"
            , (unsigned int ( ::osg::StateAttribute::* )(  )const)(&::osg::StateAttribute::getMember)
            , (unsigned int ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_getMember) )    
        .def( 
            "getUserData"
            , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
            , (::osg::Referenced * ( LineStipple_wrapper::* )(  ))(&LineStipple_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "getUserData"
            , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
            , (::osg::Referenced const * ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "isTextureAttribute"
            , (bool ( ::osg::StateAttribute::* )(  )const)(&::osg::StateAttribute::isTextureAttribute)
            , (bool ( LineStipple_wrapper::* )(  )const)(&LineStipple_wrapper::default_isTextureAttribute) )    
        .def( 
            "resizeGLObjectBuffers"
            , (void ( ::osg::StateAttribute::* )( unsigned int ))(&::osg::StateAttribute::resizeGLObjectBuffers)
            , (void ( LineStipple_wrapper::* )( unsigned int ))(&LineStipple_wrapper::default_resizeGLObjectBuffers)
            , ( bp::arg("arg0") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
            , (void ( LineStipple_wrapper::* )( ::std::string const & ))(&LineStipple_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
            , ( bp::arg("name") )
            , " Set the name of object using a C style string." )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
            , (void ( LineStipple_wrapper::* )( bool ))(&LineStipple_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) )    
        .def( 
            "setUserData"
            , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
            , (void ( LineStipple_wrapper::* )( ::osg::Referenced * ))(&LineStipple_wrapper::default_setUserData)
            , ( bp::arg("obj") ) );

}
