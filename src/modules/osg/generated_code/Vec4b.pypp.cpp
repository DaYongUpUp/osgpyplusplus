// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec4b.pypp.hpp"

namespace bp = boost::python;

void register_Vec4b_class(){

    { //::osg::Vec4b
        typedef bp::class_< osg::Vec4b > Vec4b_exposer_t;
        Vec4b_exposer_t Vec4b_exposer = Vec4b_exposer_t( "Vec4b", bp::init< >() );
        bp::scope Vec4b_scope( Vec4b_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec4b::num_components;
        Vec4b_exposer.def( bp::init< signed char, signed char, signed char, signed char >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") )) );
        { //::osg::Vec4b::a
        
            typedef signed char & ( ::osg::Vec4b::*a_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "a"
                , a_function_type( &::osg::Vec4b::a )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::a
        
            typedef signed char ( ::osg::Vec4b::*a_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "a"
                , a_function_type( &::osg::Vec4b::a ) );
        
        }
        { //::osg::Vec4b::b
        
            typedef signed char & ( ::osg::Vec4b::*b_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec4b::b )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::b
        
            typedef signed char ( ::osg::Vec4b::*b_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec4b::b ) );
        
        }
        { //::osg::Vec4b::g
        
            typedef signed char & ( ::osg::Vec4b::*g_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec4b::g )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::g
        
            typedef signed char ( ::osg::Vec4b::*g_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec4b::g ) );
        
        }
        Vec4b_exposer.def( bp::self != bp::self );
        Vec4b_exposer.def( bp::self * bp::other< float >() );
        Vec4b_exposer.def( bp::self *= bp::other< float >() );
        Vec4b_exposer.def( bp::self + bp::self );
        Vec4b_exposer.def( bp::self += bp::self );
        Vec4b_exposer.def( bp::self - bp::self );
        Vec4b_exposer.def( bp::self -= bp::self );
        Vec4b_exposer.def( bp::self / bp::other< float >() );
        Vec4b_exposer.def( bp::self /= bp::other< float >() );
        Vec4b_exposer.def( bp::self < bp::self );
        Vec4b_exposer.def( bp::self == bp::self );
        { //::osg::Vec4b::operator[]
        
            typedef signed char & ( ::osg::Vec4b::*__getitem___function_type)( unsigned int ) ;
            
            Vec4b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec4b::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::operator[]
        
            typedef signed char ( ::osg::Vec4b::*__getitem___function_type)( unsigned int ) const;
            
            Vec4b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec4b::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec4b::r
        
            typedef signed char & ( ::osg::Vec4b::*r_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec4b::r )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::r
        
            typedef signed char ( ::osg::Vec4b::*r_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec4b::r ) );
        
        }
        { //::osg::Vec4b::set
        
            typedef void ( ::osg::Vec4b::*set_function_type)( signed char,signed char,signed char,signed char ) ;
            
            Vec4b_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec4b::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") ) );
        
        }
        { //::osg::Vec4b::w
        
            typedef signed char & ( ::osg::Vec4b::*w_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "w"
                , w_function_type( &::osg::Vec4b::w )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::w
        
            typedef signed char ( ::osg::Vec4b::*w_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "w"
                , w_function_type( &::osg::Vec4b::w ) );
        
        }
        { //::osg::Vec4b::x
        
            typedef signed char & ( ::osg::Vec4b::*x_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec4b::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::x
        
            typedef signed char ( ::osg::Vec4b::*x_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec4b::x ) );
        
        }
        { //::osg::Vec4b::y
        
            typedef signed char & ( ::osg::Vec4b::*y_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec4b::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::y
        
            typedef signed char ( ::osg::Vec4b::*y_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec4b::y ) );
        
        }
        { //::osg::Vec4b::z
        
            typedef signed char & ( ::osg::Vec4b::*z_function_type)(  ) ;
            
            Vec4b_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec4b::z )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4b::z
        
            typedef signed char ( ::osg::Vec4b::*z_function_type)(  ) const;
            
            Vec4b_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec4b::z ) );
        
        }
    }

}
