// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "bufferdata.pypp.hpp"

namespace bp = boost::python;

struct BufferData_wrapper : osg::BufferData, bp::wrapper< osg::BufferData > {

    struct ModifiedCallback_wrapper : osg::BufferData::ModifiedCallback, bp::wrapper< osg::BufferData::ModifiedCallback > {
    
        ModifiedCallback_wrapper( )
        : osg::BufferData::ModifiedCallback( )
          , bp::wrapper< osg::BufferData::ModifiedCallback >(){
            // null constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::BufferData::ModifiedCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::BufferData::ModifiedCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::BufferData::ModifiedCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::BufferData::ModifiedCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::BufferData::ModifiedCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::BufferData::ModifiedCallback::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::BufferData::ModifiedCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::BufferData::ModifiedCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::BufferData::ModifiedCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::BufferData::ModifiedCallback::libraryName( );
        }
    
        virtual void modified( ::osg::BufferData * arg0 ) const  {
            if( bp::override func_modified = this->get_override( "modified" ) )
                func_modified( boost::python::ptr(arg0) );
            else{
                this->osg::BufferData::ModifiedCallback::modified( boost::python::ptr(arg0) );
            }
        }
        
        void default_modified( ::osg::BufferData * arg0 ) const  {
            osg::BufferData::ModifiedCallback::modified( boost::python::ptr(arg0) );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    BufferData_wrapper( )
    : osg::BufferData( )
      , bp::wrapper< osg::BufferData >(){
        // null constructor
    
    }

    virtual ::osg::Array * asArray(  ) {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array * default_asArray(  ) {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::Array const * asArray(  ) const  {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array const * default_asArray(  ) const  {
        return osg::BufferData::asArray( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::BufferData::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::BufferData::className( );
    }

    virtual ::GLvoid const * getDataPointer(  ) const {
        bp::override func_getDataPointer = this->get_override( "getDataPointer" );
        return func_getDataPointer(  );
    }

    virtual unsigned int getTotalDataSize(  ) const {
        bp::override func_getTotalDataSize = this->get_override( "getTotalDataSize" );
        return func_getTotalDataSize(  );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::BufferData::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::BufferData::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::BufferData::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::BufferData::libraryName( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferData::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferData::resizeGLObjectBuffers( maxSize );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_BufferData_class(){

    { //::osg::BufferData
        typedef bp::class_< BufferData_wrapper, bp::bases< osg::Object >, boost::noncopyable > BufferData_exposer_t;
        BufferData_exposer_t BufferData_exposer = BufferData_exposer_t( "BufferData", bp::no_init );
        bp::scope BufferData_scope( BufferData_exposer );
        bp::class_< BufferData_wrapper::ModifiedCallback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "ModifiedCallback", bp::init< >() )    
            .def( 
                "className"
                , (char const * ( ::osg::BufferData::ModifiedCallback::* )(  )const)(&::osg::BufferData::ModifiedCallback::className)
                , (char const * ( BufferData_wrapper::ModifiedCallback_wrapper::* )(  )const)(&BufferData_wrapper::ModifiedCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::BufferData::ModifiedCallback::* )( ::osg::CopyOp const & )const)(&::osg::BufferData::ModifiedCallback::clone)
                , (::osg::Object * ( BufferData_wrapper::ModifiedCallback_wrapper::* )( ::osg::CopyOp const & )const)(&BufferData_wrapper::ModifiedCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::BufferData::ModifiedCallback::* )(  )const)(&::osg::BufferData::ModifiedCallback::cloneType)
                , (::osg::Object * ( BufferData_wrapper::ModifiedCallback_wrapper::* )(  )const)(&BufferData_wrapper::ModifiedCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::BufferData::ModifiedCallback::* )( ::osg::Object const * )const)(&::osg::BufferData::ModifiedCallback::isSameKindAs)
                , (bool ( BufferData_wrapper::ModifiedCallback_wrapper::* )( ::osg::Object const * )const)(&BufferData_wrapper::ModifiedCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::BufferData::ModifiedCallback::* )(  )const)(&::osg::BufferData::ModifiedCallback::libraryName)
                , (char const * ( BufferData_wrapper::ModifiedCallback_wrapper::* )(  )const)(&BufferData_wrapper::ModifiedCallback_wrapper::default_libraryName) )    
            .def( 
                "modified"
                , (void ( ::osg::BufferData::ModifiedCallback::* )( ::osg::BufferData * )const)(&::osg::BufferData::ModifiedCallback::modified)
                , (void ( BufferData_wrapper::ModifiedCallback_wrapper::* )( ::osg::BufferData * )const)(&BufferData_wrapper::ModifiedCallback_wrapper::default_modified)
                , ( bp::arg("arg0") ) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( BufferData_wrapper::ModifiedCallback_wrapper::* )(  ))(&BufferData_wrapper::ModifiedCallback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( BufferData_wrapper::ModifiedCallback_wrapper::* )(  ))(&BufferData_wrapper::ModifiedCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( BufferData_wrapper::ModifiedCallback_wrapper::* )(  )const)(&BufferData_wrapper::ModifiedCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( BufferData_wrapper::ModifiedCallback_wrapper::* )( unsigned int ))(&BufferData_wrapper::ModifiedCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( BufferData_wrapper::ModifiedCallback_wrapper::* )( ::std::string const & ))(&BufferData_wrapper::ModifiedCallback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( BufferData_wrapper::ModifiedCallback_wrapper::* )( bool ))(&BufferData_wrapper::ModifiedCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( BufferData_wrapper::ModifiedCallback_wrapper::* )( ::osg::Referenced * ))(&BufferData_wrapper::ModifiedCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        BufferData_exposer.def( bp::init< >() );
        { //::osg::BufferData::addClient
        
            typedef void ( ::osg::BufferData::*addClient_function_type)( ::osg::Object * ) ;
            
            BufferData_exposer.def( 
                "addClient"
                , addClient_function_type( &::osg::BufferData::addClient )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::BufferData::asArray
        
            typedef ::osg::Array * ( ::osg::BufferData::*asArray_function_type)(  ) ;
            typedef ::osg::Array * ( BufferData_wrapper::*default_asArray_function_type)(  ) ;
            
            BufferData_exposer.def( 
                "asArray"
                , asArray_function_type(&::osg::BufferData::asArray)
                , default_asArray_function_type(&BufferData_wrapper::default_asArray)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::asArray
        
            typedef ::osg::Array const * ( ::osg::BufferData::*asArray_function_type)(  ) const;
            typedef ::osg::Array const * ( BufferData_wrapper::*default_asArray_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "asArray"
                , asArray_function_type(&::osg::BufferData::asArray)
                , default_asArray_function_type(&BufferData_wrapper::default_asArray)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::className
        
            typedef char const * ( ::osg::BufferData::*className_function_type)(  ) const;
            typedef char const * ( BufferData_wrapper::*default_className_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "className"
                , className_function_type(&::osg::BufferData::className)
                , default_className_function_type(&BufferData_wrapper::default_className) );
        
        }
        { //::osg::BufferData::dirty
        
            typedef void ( ::osg::BufferData::*dirty_function_type)(  ) ;
            
            BufferData_exposer.def( 
                "dirty"
                , dirty_function_type( &::osg::BufferData::dirty ) );
        
        }
        { //::osg::BufferData::getBufferIndex
        
            typedef unsigned int ( ::osg::BufferData::*getBufferIndex_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getBufferIndex"
                , getBufferIndex_function_type( &::osg::BufferData::getBufferIndex ) );
        
        }
        { //::osg::BufferData::getBufferObject
        
            typedef ::osg::BufferObject * ( ::osg::BufferData::*getBufferObject_function_type)(  ) ;
            
            BufferData_exposer.def( 
                "getBufferObject"
                , getBufferObject_function_type( &::osg::BufferData::getBufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::getBufferObject
        
            typedef ::osg::BufferObject const * ( ::osg::BufferData::*getBufferObject_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getBufferObject"
                , getBufferObject_function_type( &::osg::BufferData::getBufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::getDataPointer
        
            typedef ::GLvoid const * ( ::osg::BufferData::*getDataPointer_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getDataPointer"
                , bp::pure_virtual( getDataPointer_function_type(&::osg::BufferData::getDataPointer) )
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::osg::BufferData::getGLBufferObject
        
            typedef ::osg::GLBufferObject * ( ::osg::BufferData::*getGLBufferObject_function_type)( unsigned int ) const;
            
            BufferData_exposer.def( 
                "getGLBufferObject"
                , getGLBufferObject_function_type( &::osg::BufferData::getGLBufferObject )
                , ( bp::arg("contextID") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::getModifiedCallback
        
            typedef ::osg::BufferData::ModifiedCallback * ( ::osg::BufferData::*getModifiedCallback_function_type)(  ) ;
            
            BufferData_exposer.def( 
                "getModifiedCallback"
                , getModifiedCallback_function_type( &::osg::BufferData::getModifiedCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::getModifiedCallback
        
            typedef ::osg::BufferData::ModifiedCallback const * ( ::osg::BufferData::*getModifiedCallback_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getModifiedCallback"
                , getModifiedCallback_function_type( &::osg::BufferData::getModifiedCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::getModifiedCount
        
            typedef unsigned int ( ::osg::BufferData::*getModifiedCount_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getModifiedCount"
                , getModifiedCount_function_type( &::osg::BufferData::getModifiedCount ) );
        
        }
        { //::osg::BufferData::getNumClients
        
            typedef unsigned int ( ::osg::BufferData::*getNumClients_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getNumClients"
                , getNumClients_function_type( &::osg::BufferData::getNumClients ) );
        
        }
        { //::osg::BufferData::getOrCreateGLBufferObject
        
            typedef ::osg::GLBufferObject * ( ::osg::BufferData::*getOrCreateGLBufferObject_function_type)( unsigned int ) const;
            
            BufferData_exposer.def( 
                "getOrCreateGLBufferObject"
                , getOrCreateGLBufferObject_function_type( &::osg::BufferData::getOrCreateGLBufferObject )
                , ( bp::arg("contextID") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::getTotalDataSize
        
            typedef unsigned int ( ::osg::BufferData::*getTotalDataSize_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getTotalDataSize"
                , bp::pure_virtual( getTotalDataSize_function_type(&::osg::BufferData::getTotalDataSize) ) );
        
        }
        { //::osg::BufferData::isSameKindAs
        
            typedef bool ( ::osg::BufferData::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( BufferData_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            BufferData_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::BufferData::isSameKindAs)
                , default_isSameKindAs_function_type(&BufferData_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::BufferData::libraryName
        
            typedef char const * ( ::osg::BufferData::*libraryName_function_type)(  ) const;
            typedef char const * ( BufferData_wrapper::*default_libraryName_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::BufferData::libraryName)
                , default_libraryName_function_type(&BufferData_wrapper::default_libraryName) );
        
        }
        { //::osg::BufferData::removeClient
        
            typedef void ( ::osg::BufferData::*removeClient_function_type)( ::osg::Object * ) ;
            
            BufferData_exposer.def( 
                "removeClient"
                , removeClient_function_type( &::osg::BufferData::removeClient )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::BufferData::resizeGLObjectBuffers
        
            typedef void ( ::osg::BufferData::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( BufferData_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            BufferData_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::BufferData::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&BufferData_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::BufferData::setBufferIndex
        
            typedef void ( ::osg::BufferData::*setBufferIndex_function_type)( unsigned int ) ;
            
            BufferData_exposer.def( 
                "setBufferIndex"
                , setBufferIndex_function_type( &::osg::BufferData::setBufferIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::osg::BufferData::setBufferObject
        
            typedef void ( ::osg::BufferData::*setBufferObject_function_type)( ::osg::BufferObject * ) ;
            
            BufferData_exposer.def( 
                "setBufferObject"
                , setBufferObject_function_type( &::osg::BufferData::setBufferObject )
                , ( bp::arg("bufferObject") ) );
        
        }
        { //::osg::BufferData::setModifiedCallback
        
            typedef void ( ::osg::BufferData::*setModifiedCallback_function_type)( ::osg::BufferData::ModifiedCallback * ) ;
            
            BufferData_exposer.def( 
                "setModifiedCallback"
                , setModifiedCallback_function_type( &::osg::BufferData::setModifiedCallback )
                , ( bp::arg("md") ) );
        
        }
        { //::osg::BufferData::setModifiedCount
        
            typedef void ( ::osg::BufferData::*setModifiedCount_function_type)( unsigned int ) ;
            
            BufferData_exposer.def( 
                "setModifiedCount"
                , setModifiedCount_function_type( &::osg::BufferData::setModifiedCount )
                , ( bp::arg("value") ) );
        
        }
        { //::osg::Object::clone
        
            typedef ::osg::Object * ( ::osg::Object::*clone_function_type)( ::osg::CopyOp const & ) const;
            
            BufferData_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::osg::Object::clone) )
                , ( bp::arg("arg0") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Object::cloneType
        
            typedef ::osg::Object * ( ::osg::Object::*cloneType_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "cloneType"
                , bp::pure_virtual( cloneType_function_type(&::osg::Object::cloneType) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( BufferData_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            BufferData_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&BufferData_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( BufferData_wrapper::*default_getUserData_function_type)(  ) ;
            
            BufferData_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&BufferData_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( BufferData_wrapper::*default_getUserData_function_type)(  ) const;
            
            BufferData_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&BufferData_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( BufferData_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            BufferData_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&BufferData_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            BufferData_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( BufferData_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            BufferData_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&BufferData_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( BufferData_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            BufferData_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&BufferData_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
