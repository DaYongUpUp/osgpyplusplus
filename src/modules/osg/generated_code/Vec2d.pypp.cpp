// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec2d.pypp.hpp"

namespace bp = boost::python;

void register_Vec2d_class(){

    { //::osg::Vec2d
        typedef bp::class_< osg::Vec2d > Vec2d_exposer_t;
        Vec2d_exposer_t Vec2d_exposer = Vec2d_exposer_t( "Vec2d", bp::init< >() );
        bp::scope Vec2d_scope( Vec2d_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec2d::num_components;
        Vec2d_exposer.def( bp::init< double, double >(( bp::arg("x"), bp::arg("y") )) );
        Vec2d_exposer.def( bp::init< osg::Vec2f const & >(( bp::arg("vec") )) );
        bp::implicitly_convertible< osg::Vec2f const &, osg::Vec2d >();
        { //::osg::Vec2d::isNaN
        
            typedef bool ( ::osg::Vec2d::*isNaN_function_type)(  ) const;
            
            Vec2d_exposer.def( 
                "isNaN"
                , isNaN_function_type( &::osg::Vec2d::isNaN ) );
        
        }
        { //::osg::Vec2d::length
        
            typedef double ( ::osg::Vec2d::*length_function_type)(  ) const;
            
            Vec2d_exposer.def( 
                "length"
                , length_function_type( &::osg::Vec2d::length ) );
        
        }
        { //::osg::Vec2d::length2
        
            typedef double ( ::osg::Vec2d::*length2_function_type)(  ) const;
            
            Vec2d_exposer.def( 
                "length2"
                , length2_function_type( &::osg::Vec2d::length2 ) );
        
        }
        { //::osg::Vec2d::normalize
        
            typedef double ( ::osg::Vec2d::*normalize_function_type)(  ) ;
            
            Vec2d_exposer.def( 
                "normalize"
                , normalize_function_type( &::osg::Vec2d::normalize ) );
        
        }
        Vec2d_exposer.def( "as__scope_osg_scope_Vec2f", &osg::Vec2d::operator ::osg::Vec2f  );
        Vec2d_exposer.def( bp::self != bp::self );
        Vec2d_exposer.def( bp::self * bp::self );
        Vec2d_exposer.def( bp::self * bp::other< double >() );
        Vec2d_exposer.def( bp::self *= bp::other< double >() );
        Vec2d_exposer.def( bp::self + bp::self );
        Vec2d_exposer.def( bp::self += bp::self );
        Vec2d_exposer.def( bp::self - bp::self );
        Vec2d_exposer.def( -bp::self );
        Vec2d_exposer.def( bp::self -= bp::self );
        Vec2d_exposer.def( bp::self / bp::other< double >() );
        Vec2d_exposer.def( bp::self /= bp::other< double >() );
        Vec2d_exposer.def( bp::self < bp::self );
        Vec2d_exposer.def( bp::self == bp::self );
        { //::osg::Vec2d::operator[]
        
            typedef double & ( ::osg::Vec2d::*__getitem___function_type)( int ) ;
            
            Vec2d_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec2d::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2d::operator[]
        
            typedef double ( ::osg::Vec2d::*__getitem___function_type)( int ) const;
            
            Vec2d_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec2d::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec2d::set
        
            typedef void ( ::osg::Vec2d::*set_function_type)( double,double ) ;
            
            Vec2d_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec2d::set )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osg::Vec2d::valid
        
            typedef bool ( ::osg::Vec2d::*valid_function_type)(  ) const;
            
            Vec2d_exposer.def( 
                "valid"
                , valid_function_type( &::osg::Vec2d::valid ) );
        
        }
        { //::osg::Vec2d::x
        
            typedef double & ( ::osg::Vec2d::*x_function_type)(  ) ;
            
            Vec2d_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec2d::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2d::x
        
            typedef double ( ::osg::Vec2d::*x_function_type)(  ) const;
            
            Vec2d_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec2d::x ) );
        
        }
        { //::osg::Vec2d::y
        
            typedef double & ( ::osg::Vec2d::*y_function_type)(  ) ;
            
            Vec2d_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec2d::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2d::y
        
            typedef double ( ::osg::Vec2d::*y_function_type)(  ) const;
            
            Vec2d_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec2d::y ) );
        
        }
    }

}
