// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "ellipsoidmodel.pypp.hpp"

namespace bp = boost::python;

struct EllipsoidModel_wrapper : osg::EllipsoidModel, bp::wrapper< osg::EllipsoidModel > {

    EllipsoidModel_wrapper(double radiusEquator=osg::WGS_84_RADIUS_EQUATOR, double radiusPolar=osg::WGS_84_RADIUS_POLAR )
    : osg::EllipsoidModel( radiusEquator, radiusPolar )
      , bp::wrapper< osg::EllipsoidModel >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::EllipsoidModel::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::EllipsoidModel::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::EllipsoidModel::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::EllipsoidModel::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::EllipsoidModel::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::EllipsoidModel::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::EllipsoidModel::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::EllipsoidModel::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::EllipsoidModel::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::EllipsoidModel::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_EllipsoidModel_class(){

    { //::osg::EllipsoidModel
        typedef bp::class_< EllipsoidModel_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::EllipsoidModel >, boost::noncopyable > EllipsoidModel_exposer_t;
        EllipsoidModel_exposer_t EllipsoidModel_exposer = EllipsoidModel_exposer_t( "EllipsoidModel", "\n EllipsoidModel encapsulates the ellipsoid used to model astronomical bodies,\n such as sun, planets, moon etc.\n All distance quantities (i.e. heights + radius) are in meters,\n and latitude and longitude are in radians.\n", bp::init< bp::optional< double, double > >(( bp::arg("radiusEquator")=osg::WGS_84_RADIUS_EQUATOR, bp::arg("radiusPolar")=osg::WGS_84_RADIUS_POLAR ), "\n WGS_84 is a common representation of the earths spheroid\n") );
        bp::scope EllipsoidModel_scope( EllipsoidModel_exposer );
        bp::implicitly_convertible< double, osg::EllipsoidModel >();
        { //::osg::EllipsoidModel::className
        
            typedef char const * ( ::osg::EllipsoidModel::*className_function_type)(  ) const;
            typedef char const * ( EllipsoidModel_wrapper::*default_className_function_type)(  ) const;
            
            EllipsoidModel_exposer.def( 
                "className"
                , className_function_type(&::osg::EllipsoidModel::className)
                , default_className_function_type(&EllipsoidModel_wrapper::default_className) );
        
        }
        { //::osg::EllipsoidModel::clone
        
            typedef ::osg::Object * ( ::osg::EllipsoidModel::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( EllipsoidModel_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            EllipsoidModel_exposer.def( 
                "clone"
                , clone_function_type(&::osg::EllipsoidModel::clone)
                , default_clone_function_type(&EllipsoidModel_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::EllipsoidModel::cloneType
        
            typedef ::osg::Object * ( ::osg::EllipsoidModel::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( EllipsoidModel_wrapper::*default_cloneType_function_type)(  ) const;
            
            EllipsoidModel_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::EllipsoidModel::cloneType)
                , default_cloneType_function_type(&EllipsoidModel_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::EllipsoidModel::computeCoordinateFrame
        
            typedef void ( ::osg::EllipsoidModel::*computeCoordinateFrame_function_type)( double,double,::osg::Matrixd & ) const;
            
            EllipsoidModel_exposer.def( 
                "computeCoordinateFrame"
                , computeCoordinateFrame_function_type( &::osg::EllipsoidModel::computeCoordinateFrame )
                , ( bp::arg("latitude"), bp::arg("longitude"), bp::arg("localToWorld") ) );
        
        }
        { //::osg::EllipsoidModel::computeLocalToWorldTransformFromLatLongHeight
        
            typedef void ( ::osg::EllipsoidModel::*computeLocalToWorldTransformFromLatLongHeight_function_type)( double,double,double,::osg::Matrixd & ) const;
            
            EllipsoidModel_exposer.def( 
                "computeLocalToWorldTransformFromLatLongHeight"
                , computeLocalToWorldTransformFromLatLongHeight_function_type( &::osg::EllipsoidModel::computeLocalToWorldTransformFromLatLongHeight )
                , ( bp::arg("latitude"), bp::arg("longitude"), bp::arg("height"), bp::arg("localToWorld") ) );
        
        }
        { //::osg::EllipsoidModel::computeLocalToWorldTransformFromXYZ
        
            typedef void ( ::osg::EllipsoidModel::*computeLocalToWorldTransformFromXYZ_function_type)( double,double,double,::osg::Matrixd & ) const;
            
            EllipsoidModel_exposer.def( 
                "computeLocalToWorldTransformFromXYZ"
                , computeLocalToWorldTransformFromXYZ_function_type( &::osg::EllipsoidModel::computeLocalToWorldTransformFromXYZ )
                , ( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("localToWorld") ) );
        
        }
        { //::osg::EllipsoidModel::computeLocalUpVector
        
            typedef ::osg::Vec3d ( ::osg::EllipsoidModel::*computeLocalUpVector_function_type)( double,double,double ) const;
            
            EllipsoidModel_exposer.def( 
                "computeLocalUpVector"
                , computeLocalUpVector_function_type( &::osg::EllipsoidModel::computeLocalUpVector )
                , ( bp::arg("X"), bp::arg("Y"), bp::arg("Z") ) );
        
        }
        { //::osg::EllipsoidModel::convertLatLongHeightToXYZ
        
            typedef void ( ::osg::EllipsoidModel::*convertLatLongHeightToXYZ_function_type)( double,double,double,double &,double &,double & ) const;
            
            EllipsoidModel_exposer.def( 
                "convertLatLongHeightToXYZ"
                , convertLatLongHeightToXYZ_function_type( &::osg::EllipsoidModel::convertLatLongHeightToXYZ )
                , ( bp::arg("latitude"), bp::arg("longitude"), bp::arg("height"), bp::arg("X"), bp::arg("Y"), bp::arg("Z") )
                , "" );
        
        }
        { //::osg::EllipsoidModel::convertXYZToLatLongHeight
        
            typedef void ( ::osg::EllipsoidModel::*convertXYZToLatLongHeight_function_type)( double,double,double,double &,double &,double & ) const;
            
            EllipsoidModel_exposer.def( 
                "convertXYZToLatLongHeight"
                , convertXYZToLatLongHeight_function_type( &::osg::EllipsoidModel::convertXYZToLatLongHeight )
                , ( bp::arg("X"), bp::arg("Y"), bp::arg("Z"), bp::arg("latitude"), bp::arg("longitude"), bp::arg("height") ) );
        
        }
        { //::osg::EllipsoidModel::getRadiusEquator
        
            typedef double ( ::osg::EllipsoidModel::*getRadiusEquator_function_type)(  ) const;
            
            EllipsoidModel_exposer.def( 
                "getRadiusEquator"
                , getRadiusEquator_function_type( &::osg::EllipsoidModel::getRadiusEquator ) );
        
        }
        { //::osg::EllipsoidModel::getRadiusPolar
        
            typedef double ( ::osg::EllipsoidModel::*getRadiusPolar_function_type)(  ) const;
            
            EllipsoidModel_exposer.def( 
                "getRadiusPolar"
                , getRadiusPolar_function_type( &::osg::EllipsoidModel::getRadiusPolar ) );
        
        }
        { //::osg::EllipsoidModel::isSameKindAs
        
            typedef bool ( ::osg::EllipsoidModel::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( EllipsoidModel_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            EllipsoidModel_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::EllipsoidModel::isSameKindAs)
                , default_isSameKindAs_function_type(&EllipsoidModel_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::EllipsoidModel::isWGS84
        
            typedef bool ( ::osg::EllipsoidModel::*isWGS84_function_type)(  ) const;
            
            EllipsoidModel_exposer.def( 
                "isWGS84"
                , isWGS84_function_type( &::osg::EllipsoidModel::isWGS84 ) );
        
        }
        { //::osg::EllipsoidModel::libraryName
        
            typedef char const * ( ::osg::EllipsoidModel::*libraryName_function_type)(  ) const;
            typedef char const * ( EllipsoidModel_wrapper::*default_libraryName_function_type)(  ) const;
            
            EllipsoidModel_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::EllipsoidModel::libraryName)
                , default_libraryName_function_type(&EllipsoidModel_wrapper::default_libraryName) );
        
        }
        { //::osg::EllipsoidModel::setRadiusEquator
        
            typedef void ( ::osg::EllipsoidModel::*setRadiusEquator_function_type)( double ) ;
            
            EllipsoidModel_exposer.def( 
                "setRadiusEquator"
                , setRadiusEquator_function_type( &::osg::EllipsoidModel::setRadiusEquator )
                , ( bp::arg("radius") ) );
        
        }
        { //::osg::EllipsoidModel::setRadiusPolar
        
            typedef void ( ::osg::EllipsoidModel::*setRadiusPolar_function_type)( double ) ;
            
            EllipsoidModel_exposer.def( 
                "setRadiusPolar"
                , setRadiusPolar_function_type( &::osg::EllipsoidModel::setRadiusPolar )
                , ( bp::arg("radius") ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( EllipsoidModel_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            EllipsoidModel_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&EllipsoidModel_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( EllipsoidModel_wrapper::*default_getUserData_function_type)(  ) ;
            
            EllipsoidModel_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&EllipsoidModel_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( EllipsoidModel_wrapper::*default_getUserData_function_type)(  ) const;
            
            EllipsoidModel_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&EllipsoidModel_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::resizeGLObjectBuffers
        
            typedef void ( ::osg::Object::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( EllipsoidModel_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            EllipsoidModel_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Object::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&EllipsoidModel_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( EllipsoidModel_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            EllipsoidModel_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&EllipsoidModel_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            EllipsoidModel_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") )
                , " Set the name of object using a C style string." );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( EllipsoidModel_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            EllipsoidModel_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&EllipsoidModel_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( EllipsoidModel_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            EllipsoidModel_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&EllipsoidModel_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
        EllipsoidModel_exposer.def( bp::self == bp::self );
    }

}
