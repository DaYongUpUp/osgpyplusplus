// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "matrixtransform.pypp.hpp"

namespace bp = boost::python;

struct MatrixTransform_wrapper : osg::MatrixTransform, bp::wrapper< osg::MatrixTransform > {

    MatrixTransform_wrapper( )
    : osg::MatrixTransform( )
      , bp::wrapper< osg::MatrixTransform >(){
        // null constructor
    
    }

    MatrixTransform_wrapper(::osg::Matrix const & matix )
    : osg::MatrixTransform( boost::ref(matix) )
      , bp::wrapper< osg::MatrixTransform >(){
        // constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::MatrixTransform::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::MatrixTransform::accept( boost::ref(nv) );
    }

    virtual ::osg::MatrixTransform * asMatrixTransform(  ) {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform * default_asMatrixTransform(  ) {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::MatrixTransform const * asMatrixTransform(  ) const  {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform const * default_asMatrixTransform(  ) const  {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::MatrixTransform::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::MatrixTransform::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::MatrixTransform::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::MatrixTransform::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::MatrixTransform::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::MatrixTransform::cloneType( );
    }

    virtual bool computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeLocalToWorldMatrix = this->get_override( "computeLocalToWorldMatrix" ) )
            return func_computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeWorldToLocalMatrix = this->get_override( "computeWorldToLocalMatrix" ) )
            return func_computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::MatrixTransform::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::MatrixTransform::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::MatrixTransform::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::MatrixTransform::libraryName( );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::Group::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::Group::traverse( boost::ref(nv) );
    }

};

void register_MatrixTransform_class(){

    bp::class_< MatrixTransform_wrapper, osg::ref_ptr< ::osg::MatrixTransform >, boost::noncopyable >( "MatrixTransform", bp::no_init )    
        .def( bp::init< >() )    
        .def( bp::init< osg::Matrix const & >(( bp::arg("matix") )) )    
        .def( 
            "accept"
            , (void ( ::osg::MatrixTransform::* )( ::osg::NodeVisitor & ))(&::osg::MatrixTransform::accept)
            , (void ( MatrixTransform_wrapper::* )( ::osg::NodeVisitor & ))(&MatrixTransform_wrapper::default_accept)
            , ( bp::arg("nv") ) )    
        .def( 
            "asMatrixTransform"
            , (::osg::MatrixTransform * ( ::osg::MatrixTransform::* )(  ))(&::osg::MatrixTransform::asMatrixTransform)
            , (::osg::MatrixTransform * ( MatrixTransform_wrapper::* )(  ))(&MatrixTransform_wrapper::default_asMatrixTransform)
            , bp::return_internal_reference< >() )    
        .def( 
            "asMatrixTransform"
            , (::osg::MatrixTransform const * ( ::osg::MatrixTransform::* )(  )const)(&::osg::MatrixTransform::asMatrixTransform)
            , (::osg::MatrixTransform const * ( MatrixTransform_wrapper::* )(  )const)(&MatrixTransform_wrapper::default_asMatrixTransform)
            , bp::return_internal_reference< >() )    
        .def( 
            "className"
            , (char const * ( ::osg::MatrixTransform::* )(  )const)(&::osg::MatrixTransform::className)
            , (char const * ( MatrixTransform_wrapper::* )(  )const)(&MatrixTransform_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::MatrixTransform::* )( ::osg::CopyOp const & )const)(&::osg::MatrixTransform::clone)
            , (::osg::Object * ( MatrixTransform_wrapper::* )( ::osg::CopyOp const & )const)(&MatrixTransform_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::MatrixTransform::* )(  )const)(&::osg::MatrixTransform::cloneType)
            , (::osg::Object * ( MatrixTransform_wrapper::* )(  )const)(&MatrixTransform_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "computeLocalToWorldMatrix"
            , (bool ( ::osg::MatrixTransform::* )( ::osg::Matrix &,::osg::NodeVisitor * )const)(&::osg::MatrixTransform::computeLocalToWorldMatrix)
            , (bool ( MatrixTransform_wrapper::* )( ::osg::Matrix &,::osg::NodeVisitor * )const)(&MatrixTransform_wrapper::default_computeLocalToWorldMatrix)
            , ( bp::arg("matrix"), bp::arg("arg1") ) )    
        .def( 
            "computeWorldToLocalMatrix"
            , (bool ( ::osg::MatrixTransform::* )( ::osg::Matrix &,::osg::NodeVisitor * )const)(&::osg::MatrixTransform::computeWorldToLocalMatrix)
            , (bool ( MatrixTransform_wrapper::* )( ::osg::Matrix &,::osg::NodeVisitor * )const)(&MatrixTransform_wrapper::default_computeWorldToLocalMatrix)
            , ( bp::arg("matrix"), bp::arg("arg1") ) )    
        .def( 
            "getInverseMatrix"
            , (::osg::Matrix const & ( ::osg::MatrixTransform::* )(  )const)( &::osg::MatrixTransform::getInverseMatrix )
            , bp::return_internal_reference< >() )    
        .def( 
            "getMatrix"
            , (::osg::Matrix const & ( ::osg::MatrixTransform::* )(  )const)( &::osg::MatrixTransform::getMatrix )
            , bp::return_internal_reference< >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::MatrixTransform::* )( ::osg::Object const * )const)(&::osg::MatrixTransform::isSameKindAs)
            , (bool ( MatrixTransform_wrapper::* )( ::osg::Object const * )const)(&MatrixTransform_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::MatrixTransform::* )(  )const)(&::osg::MatrixTransform::libraryName)
            , (char const * ( MatrixTransform_wrapper::* )(  )const)(&MatrixTransform_wrapper::default_libraryName) )    
        .def( 
            "postMult"
            , (void ( ::osg::MatrixTransform::* )( ::osg::Matrix const & ))( &::osg::MatrixTransform::postMult )
            , ( bp::arg("mat") ) )    
        .def( 
            "preMult"
            , (void ( ::osg::MatrixTransform::* )( ::osg::Matrix const & ))( &::osg::MatrixTransform::preMult )
            , ( bp::arg("mat") ) )    
        .def( 
            "setMatrix"
            , (void ( ::osg::MatrixTransform::* )( ::osg::Matrix const & ))( &::osg::MatrixTransform::setMatrix )
            , ( bp::arg("mat") ) )    
        .def( 
            "addChild"
            , (bool ( ::osg::Group::* )( ::osg::Node * ))(&::osg::Group::addChild)
            , (bool ( MatrixTransform_wrapper::* )( ::osg::Node * ))(&MatrixTransform_wrapper::default_addChild)
            , ( bp::arg("child") ) )    
        .def( 
            "asGroup"
            , (::osg::Group * ( ::osg::Group::* )(  ))(&::osg::Group::asGroup)
            , (::osg::Group * ( MatrixTransform_wrapper::* )(  ))(&MatrixTransform_wrapper::default_asGroup)
            , bp::return_internal_reference< >() )    
        .def( 
            "asGroup"
            , (::osg::Group const * ( ::osg::Group::* )(  )const)(&::osg::Group::asGroup)
            , (::osg::Group const * ( MatrixTransform_wrapper::* )(  )const)(&MatrixTransform_wrapper::default_asGroup)
            , bp::return_internal_reference< >() )    
        .def( 
            "computeDataVariance"
            , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
            , (void ( MatrixTransform_wrapper::* )(  ))(&MatrixTransform_wrapper::default_computeDataVariance) )    
        .def( 
            "getUserData"
            , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
            , (::osg::Referenced * ( MatrixTransform_wrapper::* )(  ))(&MatrixTransform_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "getUserData"
            , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
            , (::osg::Referenced const * ( MatrixTransform_wrapper::* )(  )const)(&MatrixTransform_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "insertChild"
            , (bool ( ::osg::Group::* )( unsigned int,::osg::Node * ))(&::osg::Group::insertChild)
            , (bool ( MatrixTransform_wrapper::* )( unsigned int,::osg::Node * ))(&MatrixTransform_wrapper::default_insertChild)
            , ( bp::arg("index"), bp::arg("child") ) )    
        .def( 
            "removeChildren"
            , (bool ( ::osg::Group::* )( unsigned int,unsigned int ))(&::osg::Group::removeChildren)
            , (bool ( MatrixTransform_wrapper::* )( unsigned int,unsigned int ))(&MatrixTransform_wrapper::default_removeChildren)
            , ( bp::arg("pos"), bp::arg("numChildrenToRemove") ) )    
        .def( 
            "replaceChild"
            , (bool ( ::osg::Group::* )( ::osg::Node *,::osg::Node * ))(&::osg::Group::replaceChild)
            , (bool ( MatrixTransform_wrapper::* )( ::osg::Node *,::osg::Node * ))(&MatrixTransform_wrapper::default_replaceChild)
            , ( bp::arg("origChild"), bp::arg("newChild") ) )    
        .def( 
            "resizeGLObjectBuffers"
            , (void ( ::osg::Group::* )( unsigned int ))(&::osg::Group::resizeGLObjectBuffers)
            , (void ( MatrixTransform_wrapper::* )( unsigned int ))(&MatrixTransform_wrapper::default_resizeGLObjectBuffers)
            , ( bp::arg("maxSize") ) )    
        .def( 
            "setChild"
            , (bool ( ::osg::Group::* )( unsigned int,::osg::Node * ))(&::osg::Group::setChild)
            , (bool ( MatrixTransform_wrapper::* )( unsigned int,::osg::Node * ))(&MatrixTransform_wrapper::default_setChild)
            , ( bp::arg("i"), bp::arg("node") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
            , (void ( MatrixTransform_wrapper::* )( ::std::string const & ))(&MatrixTransform_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
            , ( bp::arg("name") ) )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Group::* )( bool ))(&::osg::Group::setThreadSafeRefUnref)
            , (void ( MatrixTransform_wrapper::* )( bool ))(&MatrixTransform_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) )    
        .def( 
            "setUserData"
            , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
            , (void ( MatrixTransform_wrapper::* )( ::osg::Referenced * ))(&MatrixTransform_wrapper::default_setUserData)
            , ( bp::arg("obj") ) )    
        .def( 
            "traverse"
            , (void ( ::osg::Group::* )( ::osg::NodeVisitor & ))(&::osg::Group::traverse)
            , (void ( MatrixTransform_wrapper::* )( ::osg::NodeVisitor & ))(&MatrixTransform_wrapper::default_traverse)
            , ( bp::arg("nv") ) );

}
