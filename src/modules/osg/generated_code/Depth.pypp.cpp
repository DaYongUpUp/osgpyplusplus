// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "depth.pypp.hpp"

namespace bp = boost::python;

struct Depth_wrapper : osg::Depth, bp::wrapper< osg::Depth > {

    Depth_wrapper(::osg::Depth::Function func=::osg::Depth::LESS, double zNear=0.0, double zFar=1.0e+0, bool writeMask=true )
    : osg::Depth( func, zNear, zFar, writeMask )
      , bp::wrapper< osg::Depth >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::Depth::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::Depth::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Depth::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Depth::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Depth::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Depth::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Depth::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Depth::cloneType( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(usage) );
        else{
            return this->osg::Depth::getModeUsage( boost::ref(usage) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        return osg::Depth::getModeUsage( boost::ref(usage) );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::Depth::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::Depth::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Depth::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Depth::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Depth::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Depth::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & arg0 ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(arg0) );
        else{
            this->osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & arg0 ) const  {
        osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::StateAttribute::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::StateAttribute::isTextureAttribute( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Depth_class(){

    { //::osg::Depth
        typedef bp::class_< Depth_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< Depth_wrapper >, boost::noncopyable > Depth_exposer_t;
        Depth_exposer_t Depth_exposer = Depth_exposer_t( "Depth", "\n Encapsulate OpenGL glDepthFunc/Mask/Range functions.\n", bp::no_init );
        bp::scope Depth_scope( Depth_exposer );
        bp::enum_< osg::Depth::Function>("Function")
            .value("NEVER", osg::Depth::NEVER)
            .value("LESS", osg::Depth::LESS)
            .value("EQUAL", osg::Depth::EQUAL)
            .value("LEQUAL", osg::Depth::LEQUAL)
            .value("GREATER", osg::Depth::GREATER)
            .value("NOTEQUAL", osg::Depth::NOTEQUAL)
            .value("GEQUAL", osg::Depth::GEQUAL)
            .value("ALWAYS", osg::Depth::ALWAYS)
            .export_values()
            ;
        Depth_exposer.def( bp::init< bp::optional< osg::Depth::Function, double, double, bool > >(( bp::arg("func")=(long)(::osg::Depth::LESS), bp::arg("zNear")=0.0, bp::arg("zFar")=1.0e+0, bp::arg("writeMask")=(bool)(true) )) );
        bp::implicitly_convertible< osg::Depth::Function, osg::Depth >();
        { //::osg::Depth::apply
        
            typedef void ( ::osg::Depth::*apply_function_type)( ::osg::State & ) const;
            typedef void ( Depth_wrapper::*default_apply_function_type)( ::osg::State & ) const;
            
            Depth_exposer.def( 
                "apply"
                , apply_function_type(&::osg::Depth::apply)
                , default_apply_function_type(&Depth_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::Depth::className
        
            typedef char const * ( ::osg::Depth::*className_function_type)(  ) const;
            typedef char const * ( Depth_wrapper::*default_className_function_type)(  ) const;
            
            Depth_exposer.def( 
                "className"
                , className_function_type(&::osg::Depth::className)
                , default_className_function_type(&Depth_wrapper::default_className) );
        
        }
        { //::osg::Depth::clone
        
            typedef ::osg::Object * ( ::osg::Depth::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Depth_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            Depth_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Depth::clone)
                , default_clone_function_type(&Depth_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Depth::cloneType
        
            typedef ::osg::Object * ( ::osg::Depth::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( Depth_wrapper::*default_cloneType_function_type)(  ) const;
            
            Depth_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Depth::cloneType)
                , default_cloneType_function_type(&Depth_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Depth::getFunction
        
            typedef ::osg::Depth::Function ( ::osg::Depth::*getFunction_function_type)(  ) const;
            
            Depth_exposer.def( 
                "getFunction"
                , getFunction_function_type( &::osg::Depth::getFunction ) );
        
        }
        { //::osg::Depth::getModeUsage
        
            typedef bool ( ::osg::Depth::*getModeUsage_function_type)( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( Depth_wrapper::*default_getModeUsage_function_type)( ::osg::StateAttribute::ModeUsage & ) const;
            
            Depth_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::Depth::getModeUsage)
                , default_getModeUsage_function_type(&Depth_wrapper::default_getModeUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osg::Depth::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::Depth::*getType_function_type)(  ) const;
            typedef ::osg::StateAttribute::Type ( Depth_wrapper::*default_getType_function_type)(  ) const;
            
            Depth_exposer.def( 
                "getType"
                , getType_function_type(&::osg::Depth::getType)
                , default_getType_function_type(&Depth_wrapper::default_getType) );
        
        }
        { //::osg::Depth::getWriteMask
        
            typedef bool ( ::osg::Depth::*getWriteMask_function_type)(  ) const;
            
            Depth_exposer.def( 
                "getWriteMask"
                , getWriteMask_function_type( &::osg::Depth::getWriteMask ) );
        
        }
        { //::osg::Depth::getZFar
        
            typedef double ( ::osg::Depth::*getZFar_function_type)(  ) const;
            
            Depth_exposer.def( 
                "getZFar"
                , getZFar_function_type( &::osg::Depth::getZFar ) );
        
        }
        { //::osg::Depth::getZNear
        
            typedef double ( ::osg::Depth::*getZNear_function_type)(  ) const;
            
            Depth_exposer.def( 
                "getZNear"
                , getZNear_function_type( &::osg::Depth::getZNear ) );
        
        }
        { //::osg::Depth::isSameKindAs
        
            typedef bool ( ::osg::Depth::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Depth_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Depth_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Depth::isSameKindAs)
                , default_isSameKindAs_function_type(&Depth_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Depth::libraryName
        
            typedef char const * ( ::osg::Depth::*libraryName_function_type)(  ) const;
            typedef char const * ( Depth_wrapper::*default_libraryName_function_type)(  ) const;
            
            Depth_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Depth::libraryName)
                , default_libraryName_function_type(&Depth_wrapper::default_libraryName) );
        
        }
        { //::osg::Depth::setFunction
        
            typedef void ( ::osg::Depth::*setFunction_function_type)( ::osg::Depth::Function ) ;
            
            Depth_exposer.def( 
                "setFunction"
                , setFunction_function_type( &::osg::Depth::setFunction )
                , ( bp::arg("func") ) );
        
        }
        { //::osg::Depth::setRange
        
            typedef void ( ::osg::Depth::*setRange_function_type)( double,double ) ;
            
            Depth_exposer.def( 
                "setRange"
                , setRange_function_type( &::osg::Depth::setRange )
                , ( bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osg::Depth::setWriteMask
        
            typedef void ( ::osg::Depth::*setWriteMask_function_type)( bool ) ;
            
            Depth_exposer.def( 
                "setWriteMask"
                , setWriteMask_function_type( &::osg::Depth::setWriteMask )
                , ( bp::arg("mask") ) );
        
        }
        { //::osg::Depth::setZFar
        
            typedef void ( ::osg::Depth::*setZFar_function_type)( double ) ;
            
            Depth_exposer.def( 
                "setZFar"
                , setZFar_function_type( &::osg::Depth::setZFar )
                , ( bp::arg("zFar") ) );
        
        }
        { //::osg::Depth::setZNear
        
            typedef void ( ::osg::Depth::*setZNear_function_type)( double ) ;
            
            Depth_exposer.def( 
                "setZNear"
                , setZNear_function_type( &::osg::Depth::setZNear )
                , ( bp::arg("zNear") ) );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture * ( ::osg::StateAttribute::*asTexture_function_type)(  ) ;
            typedef ::osg::Texture * ( Depth_wrapper::*default_asTexture_function_type)(  ) ;
            
            Depth_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&Depth_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture const * ( ::osg::StateAttribute::*asTexture_function_type)(  ) const;
            typedef ::osg::Texture const * ( Depth_wrapper::*default_asTexture_function_type)(  ) const;
            
            Depth_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&Depth_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type)( ::osg::State & ) const;
            typedef bool ( Depth_wrapper::*default_checkValidityOfAssociatedModes_function_type)( ::osg::State & ) const;
            
            Depth_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&Depth_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::compileGLObjects
        
            typedef void ( ::osg::StateAttribute::*compileGLObjects_function_type)( ::osg::State & ) const;
            typedef void ( Depth_wrapper::*default_compileGLObjects_function_type)( ::osg::State & ) const;
            
            Depth_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::StateAttribute::compileGLObjects)
                , default_compileGLObjects_function_type(&Depth_wrapper::default_compileGLObjects)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Depth_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Depth_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Depth_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type)(  ) const;
            typedef unsigned int ( Depth_wrapper::*default_getMember_function_type)(  ) const;
            
            Depth_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&Depth_wrapper::default_getMember) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Depth_wrapper::*default_getUserData_function_type)(  ) ;
            
            Depth_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Depth_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Depth_wrapper::*default_getUserData_function_type)(  ) const;
            
            Depth_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Depth_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::isTextureAttribute
        
            typedef bool ( ::osg::StateAttribute::*isTextureAttribute_function_type)(  ) const;
            typedef bool ( Depth_wrapper::*default_isTextureAttribute_function_type)(  ) const;
            
            Depth_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::StateAttribute::isTextureAttribute)
                , default_isTextureAttribute_function_type(&Depth_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::StateAttribute::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateAttribute::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Depth_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Depth_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateAttribute::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Depth_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Depth_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Depth_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Depth_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Depth_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") )
                , " Set the name of object using a C style string." );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Depth_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Depth_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Depth_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Depth_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Depth_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Depth_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
