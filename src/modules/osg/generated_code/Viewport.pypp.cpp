// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "viewport.pypp.hpp"

namespace bp = boost::python;

struct Viewport_wrapper : osg::Viewport, bp::wrapper< osg::Viewport > {

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::Viewport::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::Viewport::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Viewport::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Viewport::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Viewport::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Viewport::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Viewport::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Viewport::cloneType( );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::Viewport::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::Viewport::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Viewport::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Viewport::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Viewport::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Viewport::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Viewport_class(){

    { //::osg::Viewport
        typedef bp::class_< Viewport_wrapper, osg::ref_ptr< ::osg::Viewport >, boost::noncopyable > Viewport_exposer_t;
        Viewport_exposer_t Viewport_exposer = Viewport_exposer_t( "Viewport", bp::no_init );
        bp::scope Viewport_scope( Viewport_exposer );
        { //::osg::Viewport::apply
        
            typedef void ( ::osg::Viewport::*apply_function_type)( ::osg::State & ) const;
            typedef void ( Viewport_wrapper::*default_apply_function_type)( ::osg::State & ) const;
            
            Viewport_exposer.def( 
                "apply"
                , apply_function_type(&::osg::Viewport::apply)
                , default_apply_function_type(&Viewport_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::Viewport::aspectRatio
        
            typedef double ( ::osg::Viewport::*aspectRatio_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "aspectRatio"
                , aspectRatio_function_type( &::osg::Viewport::aspectRatio ) );
        
        }
        { //::osg::Viewport::className
        
            typedef char const * ( ::osg::Viewport::*className_function_type)(  ) const;
            typedef char const * ( Viewport_wrapper::*default_className_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "className"
                , className_function_type(&::osg::Viewport::className)
                , default_className_function_type(&Viewport_wrapper::default_className) );
        
        }
        { //::osg::Viewport::clone
        
            typedef ::osg::Object * ( ::osg::Viewport::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Viewport_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            Viewport_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Viewport::clone)
                , default_clone_function_type(&Viewport_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Viewport::cloneType
        
            typedef ::osg::Object * ( ::osg::Viewport::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( Viewport_wrapper::*default_cloneType_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Viewport::cloneType)
                , default_cloneType_function_type(&Viewport_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Viewport::computeWindowMatrix
        
            typedef ::osg::Matrix const ( ::osg::Viewport::*computeWindowMatrix_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "computeWindowMatrix"
                , computeWindowMatrix_function_type( &::osg::Viewport::computeWindowMatrix ) );
        
        }
        { //::osg::Viewport::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::Viewport::*getType_function_type)(  ) const;
            typedef ::osg::StateAttribute::Type ( Viewport_wrapper::*default_getType_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "getType"
                , getType_function_type(&::osg::Viewport::getType)
                , default_getType_function_type(&Viewport_wrapper::default_getType) );
        
        }
        { //::osg::Viewport::height
        
            typedef double & ( ::osg::Viewport::*height_function_type)(  ) ;
            
            Viewport_exposer.def( 
                "height"
                , height_function_type( &::osg::Viewport::height )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Viewport::height
        
            typedef double ( ::osg::Viewport::*height_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "height"
                , height_function_type( &::osg::Viewport::height ) );
        
        }
        { //::osg::Viewport::isSameKindAs
        
            typedef bool ( ::osg::Viewport::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Viewport_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Viewport_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Viewport::isSameKindAs)
                , default_isSameKindAs_function_type(&Viewport_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Viewport::libraryName
        
            typedef char const * ( ::osg::Viewport::*libraryName_function_type)(  ) const;
            typedef char const * ( Viewport_wrapper::*default_libraryName_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Viewport::libraryName)
                , default_libraryName_function_type(&Viewport_wrapper::default_libraryName) );
        
        }
        { //::osg::Viewport::setViewport
        
            typedef void ( ::osg::Viewport::*setViewport_function_type)( double,double,double,double ) ;
            
            Viewport_exposer.def( 
                "setViewport"
                , setViewport_function_type( &::osg::Viewport::setViewport )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::osg::Viewport::valid
        
            typedef bool ( ::osg::Viewport::*valid_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "valid"
                , valid_function_type( &::osg::Viewport::valid ) );
        
        }
        { //::osg::Viewport::width
        
            typedef double & ( ::osg::Viewport::*width_function_type)(  ) ;
            
            Viewport_exposer.def( 
                "width"
                , width_function_type( &::osg::Viewport::width )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Viewport::width
        
            typedef double ( ::osg::Viewport::*width_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "width"
                , width_function_type( &::osg::Viewport::width ) );
        
        }
        { //::osg::Viewport::x
        
            typedef double & ( ::osg::Viewport::*x_function_type)(  ) ;
            
            Viewport_exposer.def( 
                "x"
                , x_function_type( &::osg::Viewport::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Viewport::x
        
            typedef double ( ::osg::Viewport::*x_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "x"
                , x_function_type( &::osg::Viewport::x ) );
        
        }
        { //::osg::Viewport::y
        
            typedef double & ( ::osg::Viewport::*y_function_type)(  ) ;
            
            Viewport_exposer.def( 
                "y"
                , y_function_type( &::osg::Viewport::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Viewport::y
        
            typedef double ( ::osg::Viewport::*y_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "y"
                , y_function_type( &::osg::Viewport::y ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Viewport_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Viewport_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Viewport_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Viewport_wrapper::*default_getUserData_function_type)(  ) ;
            
            Viewport_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Viewport_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Viewport_wrapper::*default_getUserData_function_type)(  ) const;
            
            Viewport_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Viewport_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Viewport_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Viewport_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Viewport_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Viewport_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Viewport_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Viewport_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Viewport_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Viewport_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Viewport_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Viewport_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
