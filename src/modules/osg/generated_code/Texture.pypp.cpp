// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "texture.pypp.hpp"

namespace bp = boost::python;

struct Texture_wrapper : osg::Texture, bp::wrapper< osg::Texture > {

    struct Extensions_wrapper : osg::Texture::Extensions, bp::wrapper< osg::Texture::Extensions > {
    
        Extensions_wrapper(unsigned int contextID )
        : osg::Texture::Extensions( contextID )
          , bp::wrapper< osg::Texture::Extensions >(){
            // constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct TextureObject_wrapper : osg::Texture::TextureObject, bp::wrapper< osg::Texture::TextureObject > {
    
        TextureObject_wrapper(::osg::Texture * texture, ::GLuint id, ::GLenum target )
        : osg::Texture::TextureObject( boost::python::ptr(texture), id, target )
          , bp::wrapper< osg::Texture::TextureObject >(){
            // constructor
        
        }
    
        TextureObject_wrapper(::osg::Texture * texture, ::GLuint id, ::osg::Texture::TextureProfile const & profile )
        : osg::Texture::TextureObject( boost::python::ptr(texture), id, boost::ref(profile) )
          , bp::wrapper< osg::Texture::TextureObject >(){
            // constructor
        
        }
    
        TextureObject_wrapper(::osg::Texture * texture, ::GLuint id, ::GLenum target, ::GLint numMipmapLevels, ::GLenum internalFormat, ::GLsizei width, ::GLsizei height, ::GLsizei depth, ::GLint border )
        : osg::Texture::TextureObject( boost::python::ptr(texture), id, target, numMipmapLevels, internalFormat, width, height, depth, border )
          , bp::wrapper< osg::Texture::TextureObject >(){
            // constructor
        
        }
    
        static ::osg::Texture::TextureObject * get__next(osg::Texture::TextureObject const & inst ){
            return inst._next;
        }
        
        static void set__next( osg::Texture::TextureObject & inst, ::osg::Texture::TextureObject * new_value ){ 
            inst._next = new_value;
        }
    
        static ::osg::Texture::TextureObject * get__previous(osg::Texture::TextureObject const & inst ){
            return inst._previous;
        }
        
        static void set__previous( osg::Texture::TextureObject & inst, ::osg::Texture::TextureObject * new_value ){ 
            inst._previous = new_value;
        }
    
        static ::osg::Texture::TextureObjectSet * get__set(osg::Texture::TextureObject const & inst ){
            return inst._set;
        }
        
        static void set__set( osg::Texture::TextureObject & inst, ::osg::Texture::TextureObjectSet * new_value ){ 
            inst._set = new_value;
        }
    
        static ::osg::Texture * get__texture(osg::Texture::TextureObject const & inst ){
            return inst._texture;
        }
        
        static void set__texture( osg::Texture::TextureObject & inst, ::osg::Texture * new_value ){ 
            inst._texture = new_value;
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct TextureObjectManager_wrapper : osg::Texture::TextureObjectManager, bp::wrapper< osg::Texture::TextureObjectManager > {
    
        TextureObjectManager_wrapper(unsigned int contextID )
        : osg::Texture::TextureObjectManager( contextID )
          , bp::wrapper< osg::Texture::TextureObjectManager >(){
            // constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct TextureObjectSet_wrapper : osg::Texture::TextureObjectSet, bp::wrapper< osg::Texture::TextureObjectSet > {
    
        TextureObjectSet_wrapper(::osg::Texture::TextureObjectManager * parent, ::osg::Texture::TextureProfile const & profile )
        : osg::Texture::TextureObjectSet( boost::python::ptr(parent), boost::ref(profile) )
          , bp::wrapper< osg::Texture::TextureObjectSet >(){
            // constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    Texture_wrapper( )
    : osg::Texture( )
      , bp::wrapper< osg::Texture >(){
        // null constructor
    
    }

    Texture_wrapper(::osg::Texture const & text, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::Texture( boost::ref(text), boost::ref(copyop) )
      , bp::wrapper< osg::Texture >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const {
        bp::override func_apply = this->get_override( "apply" );
        func_apply( boost::ref(state) );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::Texture::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::Texture::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::Texture::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::Texture::asTexture( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Texture::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Texture::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void compileGLObjects( ::osg::State & state ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(state) );
        else{
            this->osg::Texture::compileGLObjects( boost::ref(state) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & state ) const  {
        osg::Texture::compileGLObjects( boost::ref(state) );
    }

    virtual ::osg::Image * getImage( unsigned int face ){
        bp::override func_getImage = this->get_override( "getImage" );
        return func_getImage( face );
    }

    virtual ::osg::Image const * getImage( unsigned int face ) const {
        bp::override func_getImage = this->get_override( "getImage" );
        return func_getImage( face );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(usage) );
        else{
            return this->osg::Texture::getModeUsage( boost::ref(usage) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        return osg::Texture::getModeUsage( boost::ref(usage) );
    }

    virtual unsigned int getNumImages(  ) const {
        bp::override func_getNumImages = this->get_override( "getNumImages" );
        return func_getNumImages(  );
    }

    virtual int getTextureDepth(  ) const  {
        if( bp::override func_getTextureDepth = this->get_override( "getTextureDepth" ) )
            return func_getTextureDepth(  );
        else{
            return this->osg::Texture::getTextureDepth(  );
        }
    }
    
    int default_getTextureDepth(  ) const  {
        return osg::Texture::getTextureDepth( );
    }

    virtual int getTextureHeight(  ) const  {
        if( bp::override func_getTextureHeight = this->get_override( "getTextureHeight" ) )
            return func_getTextureHeight(  );
        else{
            return this->osg::Texture::getTextureHeight(  );
        }
    }
    
    int default_getTextureHeight(  ) const  {
        return osg::Texture::getTextureHeight( );
    }

    virtual ::GLenum getTextureTarget(  ) const {
        bp::override func_getTextureTarget = this->get_override( "getTextureTarget" );
        return func_getTextureTarget(  );
    }

    virtual int getTextureWidth(  ) const  {
        if( bp::override func_getTextureWidth = this->get_override( "getTextureWidth" ) )
            return func_getTextureWidth(  );
        else{
            return this->osg::Texture::getTextureWidth(  );
        }
    }
    
    int default_getTextureWidth(  ) const  {
        return osg::Texture::getTextureWidth( );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::Texture::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::Texture::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Texture::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Texture::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::Texture::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::Texture::isTextureAttribute( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Texture::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Texture::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osg::Texture::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osg::Texture::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Texture::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Texture::resizeGLObjectBuffers( maxSize );
    }

    virtual void setImage( unsigned int face, ::osg::Image * image ){
        bp::override func_setImage = this->get_override( "setImage" );
        func_setImage( face, boost::python::ptr(image) );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual int compare( ::osg::StateAttribute const & sa ) const {
        bp::override func_compare = this->get_override( "compare" );
        return func_compare( boost::ref(sa) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Texture_class(){

    { //::osg::Texture
        typedef bp::class_< Texture_wrapper, bp::bases< osg::StateAttribute >, boost::noncopyable > Texture_exposer_t;
        Texture_exposer_t Texture_exposer = Texture_exposer_t( "Texture", bp::no_init );
        bp::scope Texture_scope( Texture_exposer );
        bp::enum_< osg::Texture::FilterMode>("FilterMode")
            .value("LINEAR", osg::Texture::LINEAR)
            .value("LINEAR_MIPMAP_LINEAR", osg::Texture::LINEAR_MIPMAP_LINEAR)
            .value("LINEAR_MIPMAP_NEAREST", osg::Texture::LINEAR_MIPMAP_NEAREST)
            .value("NEAREST", osg::Texture::NEAREST)
            .value("NEAREST_MIPMAP_LINEAR", osg::Texture::NEAREST_MIPMAP_LINEAR)
            .value("NEAREST_MIPMAP_NEAREST", osg::Texture::NEAREST_MIPMAP_NEAREST)
            .export_values()
            ;
        bp::enum_< osg::Texture::FilterParameter>("FilterParameter")
            .value("MIN_FILTER", osg::Texture::MIN_FILTER)
            .value("MAG_FILTER", osg::Texture::MAG_FILTER)
            .export_values()
            ;
        bp::enum_< osg::Texture::GenerateMipmapMode>("GenerateMipmapMode")
            .value("GENERATE_MIPMAP_NONE", osg::Texture::GENERATE_MIPMAP_NONE)
            .value("GENERATE_MIPMAP", osg::Texture::GENERATE_MIPMAP)
            .value("GENERATE_MIPMAP_TEX_PARAMETER", osg::Texture::GENERATE_MIPMAP_TEX_PARAMETER)
            .export_values()
            ;
        bp::enum_< osg::Texture::ImageAccess>("ImageAccess")
            .value("NOT_USED", osg::Texture::NOT_USED)
            .value("READ_ONLY", osg::Texture::READ_ONLY)
            .value("WRITE_ONLY", osg::Texture::WRITE_ONLY)
            .value("READ_WRITE", osg::Texture::READ_WRITE)
            .export_values()
            ;
        bp::enum_< osg::Texture::InternalFormatMode>("InternalFormatMode")
            .value("USE_IMAGE_DATA_FORMAT", osg::Texture::USE_IMAGE_DATA_FORMAT)
            .value("USE_USER_DEFINED_FORMAT", osg::Texture::USE_USER_DEFINED_FORMAT)
            .value("USE_ARB_COMPRESSION", osg::Texture::USE_ARB_COMPRESSION)
            .value("USE_S3TC_DXT1_COMPRESSION", osg::Texture::USE_S3TC_DXT1_COMPRESSION)
            .value("USE_S3TC_DXT3_COMPRESSION", osg::Texture::USE_S3TC_DXT3_COMPRESSION)
            .value("USE_S3TC_DXT5_COMPRESSION", osg::Texture::USE_S3TC_DXT5_COMPRESSION)
            .value("USE_PVRTC_2BPP_COMPRESSION", osg::Texture::USE_PVRTC_2BPP_COMPRESSION)
            .value("USE_PVRTC_4BPP_COMPRESSION", osg::Texture::USE_PVRTC_4BPP_COMPRESSION)
            .value("USE_ETC_COMPRESSION", osg::Texture::USE_ETC_COMPRESSION)
            .value("USE_RGTC1_COMPRESSION", osg::Texture::USE_RGTC1_COMPRESSION)
            .value("USE_RGTC2_COMPRESSION", osg::Texture::USE_RGTC2_COMPRESSION)
            .value("USE_S3TC_DXT1c_COMPRESSION", osg::Texture::USE_S3TC_DXT1c_COMPRESSION)
            .value("USE_S3TC_DXT1a_COMPRESSION", osg::Texture::USE_S3TC_DXT1a_COMPRESSION)
            .export_values()
            ;
        bp::enum_< osg::Texture::InternalFormatType>("InternalFormatType")
            .value("NORMALIZED", osg::Texture::NORMALIZED)
            .value("FLOAT", osg::Texture::FLOAT)
            .value("SIGNED_INTEGER", osg::Texture::SIGNED_INTEGER)
            .value("UNSIGNED_INTEGER", osg::Texture::UNSIGNED_INTEGER)
            .export_values()
            ;
        bp::enum_< osg::Texture::ShadowCompareFunc>("ShadowCompareFunc")
            .value("NEVER", osg::Texture::NEVER)
            .value("LESS", osg::Texture::LESS)
            .value("EQUAL", osg::Texture::EQUAL)
            .value("LEQUAL", osg::Texture::LEQUAL)
            .value("GREATER", osg::Texture::GREATER)
            .value("NOTEQUAL", osg::Texture::NOTEQUAL)
            .value("GEQUAL", osg::Texture::GEQUAL)
            .value("ALWAYS", osg::Texture::ALWAYS)
            .export_values()
            ;
        bp::enum_< osg::Texture::ShadowTextureMode>("ShadowTextureMode")
            .value("LUMINANCE", osg::Texture::LUMINANCE)
            .value("INTENSITY", osg::Texture::INTENSITY)
            .value("ALPHA", osg::Texture::ALPHA)
            .export_values()
            ;
        bp::enum_< osg::Texture::WrapMode>("WrapMode")
            .value("CLAMP", osg::Texture::CLAMP)
            .value("CLAMP_TO_EDGE", osg::Texture::CLAMP_TO_EDGE)
            .value("CLAMP_TO_BORDER", osg::Texture::CLAMP_TO_BORDER)
            .value("REPEAT", osg::Texture::REPEAT)
            .value("MIRROR", osg::Texture::MIRROR)
            .export_values()
            ;
        bp::enum_< osg::Texture::WrapParameter>("WrapParameter")
            .value("WRAP_S", osg::Texture::WRAP_S)
            .value("WRAP_T", osg::Texture::WRAP_T)
            .value("WRAP_R", osg::Texture::WRAP_R)
            .export_values()
            ;
        { //::osg::Texture::Extensions
            typedef bp::class_< Texture_wrapper::Extensions_wrapper, bp::bases< osg::Referenced >, boost::noncopyable > Extensions_exposer_t;
            Extensions_exposer_t Extensions_exposer = Extensions_exposer_t( "Extensions", bp::no_init );
            bp::scope Extensions_scope( Extensions_exposer );
            Extensions_exposer.def( bp::init< unsigned int >(( bp::arg("contextID") )) );
            bp::implicitly_convertible< unsigned int, osg::Texture::Extensions >();
            { //::osg::Texture::Extensions::getPreferGenerateMipmapSGISForPowerOfTwo
            
                typedef bool ( ::osg::Texture::Extensions::*getPreferGenerateMipmapSGISForPowerOfTwo_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "getPreferGenerateMipmapSGISForPowerOfTwo"
                    , getPreferGenerateMipmapSGISForPowerOfTwo_function_type( &::osg::Texture::Extensions::getPreferGenerateMipmapSGISForPowerOfTwo ) );
            
            }
            { //::osg::Texture::Extensions::glBindImageTexture
            
                typedef void ( ::osg::Texture::Extensions::*glBindImageTexture_function_type)( ::GLuint,::GLuint,::GLint,::GLboolean,::GLint,::GLenum,::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glBindImageTexture"
                    , glBindImageTexture_function_type( &::osg::Texture::Extensions::glBindImageTexture )
                    , ( bp::arg("unit"), bp::arg("texture"), bp::arg("level"), bp::arg("layered"), bp::arg("layer"), bp::arg("access"), bp::arg("format") ) );
            
            }
            { //::osg::Texture::Extensions::glCompressedTexImage2D
            
                typedef void ( ::osg::Texture::Extensions::*glCompressedTexImage2D_function_type)( ::GLenum,::GLint,::GLenum,::GLsizei,::GLsizei,::GLint,::GLsizei,::GLvoid const * ) const;
                
                Extensions_exposer.def( 
                    "glCompressedTexImage2D"
                    , glCompressedTexImage2D_function_type( &::osg::Texture::Extensions::glCompressedTexImage2D )
                    , ( bp::arg("target"), bp::arg("level"), bp::arg("internalformat"), bp::arg("width"), bp::arg("height"), bp::arg("border"), bp::arg("imageSize"), bp::arg("data") ) );
            
            }
            { //::osg::Texture::Extensions::glCompressedTexSubImage2D
            
                typedef void ( ::osg::Texture::Extensions::*glCompressedTexSubImage2D_function_type)( ::GLenum,::GLint,::GLint,::GLint,::GLsizei,::GLsizei,::GLenum,::GLsizei,::GLvoid const * ) const;
                
                Extensions_exposer.def( 
                    "glCompressedTexSubImage2D"
                    , glCompressedTexSubImage2D_function_type( &::osg::Texture::Extensions::glCompressedTexSubImage2D )
                    , ( bp::arg("target"), bp::arg("level"), bp::arg("xoffset"), bp::arg("yoffset"), bp::arg("width"), bp::arg("height"), bp::arg("format"), bp::arg("imageSize"), bp::arg("data") ) );
            
            }
            { //::osg::Texture::Extensions::glGetCompressedTexImage
            
                typedef void ( ::osg::Texture::Extensions::*glGetCompressedTexImage_function_type)( ::GLenum,::GLint,::GLvoid * ) const;
                
                Extensions_exposer.def( 
                    "glGetCompressedTexImage"
                    , glGetCompressedTexImage_function_type( &::osg::Texture::Extensions::glGetCompressedTexImage )
                    , ( bp::arg("target"), bp::arg("level"), bp::arg("data") ) );
            
            }
            { //::osg::Texture::Extensions::glTexImage2DMultisample
            
                typedef void ( ::osg::Texture::Extensions::*glTexImage2DMultisample_function_type)( ::GLenum,::GLsizei,::GLint,::GLsizei,::GLsizei,::GLboolean ) const;
                
                Extensions_exposer.def( 
                    "glTexImage2DMultisample"
                    , glTexImage2DMultisample_function_type( &::osg::Texture::Extensions::glTexImage2DMultisample )
                    , ( bp::arg("target"), bp::arg("samples"), bp::arg("internalformat"), bp::arg("width"), bp::arg("height"), bp::arg("fixedsamplelocations") ) );
            
            }
            { //::osg::Texture::Extensions::glTexParameterIiv
            
                typedef void ( ::osg::Texture::Extensions::*glTexParameterIiv_function_type)( ::GLenum,::GLenum,::GLint const * ) const;
                
                Extensions_exposer.def( 
                    "glTexParameterIiv"
                    , glTexParameterIiv_function_type( &::osg::Texture::Extensions::glTexParameterIiv )
                    , ( bp::arg("target"), bp::arg("pname"), bp::arg("data") ) );
            
            }
            { //::osg::Texture::Extensions::glTexParameterIuiv
            
                typedef void ( ::osg::Texture::Extensions::*glTexParameterIuiv_function_type)( ::GLenum,::GLenum,::GLuint const * ) const;
                
                Extensions_exposer.def( 
                    "glTexParameterIuiv"
                    , glTexParameterIuiv_function_type( &::osg::Texture::Extensions::glTexParameterIuiv )
                    , ( bp::arg("target"), bp::arg("pname"), bp::arg("data") ) );
            
            }
            { //::osg::Texture::Extensions::isBindImageTextureSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isBindImageTextureSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isBindImageTextureSupported"
                    , isBindImageTextureSupported_function_type( &::osg::Texture::Extensions::isBindImageTextureSupported ) );
            
            }
            { //::osg::Texture::Extensions::isClientStorageSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isClientStorageSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isClientStorageSupported"
                    , isClientStorageSupported_function_type( &::osg::Texture::Extensions::isClientStorageSupported ) );
            
            }
            { //::osg::Texture::Extensions::isCompressedTexImage2DSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isCompressedTexImage2DSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isCompressedTexImage2DSupported"
                    , isCompressedTexImage2DSupported_function_type( &::osg::Texture::Extensions::isCompressedTexImage2DSupported ) );
            
            }
            { //::osg::Texture::Extensions::isCompressedTexSubImage2DSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isCompressedTexSubImage2DSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isCompressedTexSubImage2DSupported"
                    , isCompressedTexSubImage2DSupported_function_type( &::osg::Texture::Extensions::isCompressedTexSubImage2DSupported ) );
            
            }
            { //::osg::Texture::Extensions::isGenerateMipMapSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isGenerateMipMapSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isGenerateMipMapSupported"
                    , isGenerateMipMapSupported_function_type( &::osg::Texture::Extensions::isGenerateMipMapSupported ) );
            
            }
            { //::osg::Texture::Extensions::isMultiTexturingSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isMultiTexturingSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isMultiTexturingSupported"
                    , isMultiTexturingSupported_function_type( &::osg::Texture::Extensions::isMultiTexturingSupported ) );
            
            }
            { //::osg::Texture::Extensions::isNonPowerOfTwoTextureSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isNonPowerOfTwoTextureSupported_function_type)( ::GLenum ) const;
                
                Extensions_exposer.def( 
                    "isNonPowerOfTwoTextureSupported"
                    , isNonPowerOfTwoTextureSupported_function_type( &::osg::Texture::Extensions::isNonPowerOfTwoTextureSupported )
                    , ( bp::arg("filter") ) );
            
            }
            { //::osg::Texture::Extensions::isShadowAmbientSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isShadowAmbientSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isShadowAmbientSupported"
                    , isShadowAmbientSupported_function_type( &::osg::Texture::Extensions::isShadowAmbientSupported ) );
            
            }
            { //::osg::Texture::Extensions::isShadowSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isShadowSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isShadowSupported"
                    , isShadowSupported_function_type( &::osg::Texture::Extensions::isShadowSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureBorderClampSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureBorderClampSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureBorderClampSupported"
                    , isTextureBorderClampSupported_function_type( &::osg::Texture::Extensions::isTextureBorderClampSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureCompressionARBSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureCompressionARBSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureCompressionARBSupported"
                    , isTextureCompressionARBSupported_function_type( &::osg::Texture::Extensions::isTextureCompressionARBSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureCompressionETCSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureCompressionETCSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureCompressionETCSupported"
                    , isTextureCompressionETCSupported_function_type( &::osg::Texture::Extensions::isTextureCompressionETCSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureCompressionPVRTC2BPPSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureCompressionPVRTC2BPPSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureCompressionPVRTC2BPPSupported"
                    , isTextureCompressionPVRTC2BPPSupported_function_type( &::osg::Texture::Extensions::isTextureCompressionPVRTC2BPPSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureCompressionPVRTC4BPPSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureCompressionPVRTC4BPPSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureCompressionPVRTC4BPPSupported"
                    , isTextureCompressionPVRTC4BPPSupported_function_type( &::osg::Texture::Extensions::isTextureCompressionPVRTC4BPPSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureCompressionPVRTCSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureCompressionPVRTCSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureCompressionPVRTCSupported"
                    , isTextureCompressionPVRTCSupported_function_type( &::osg::Texture::Extensions::isTextureCompressionPVRTCSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureCompressionRGTCSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureCompressionRGTCSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureCompressionRGTCSupported"
                    , isTextureCompressionRGTCSupported_function_type( &::osg::Texture::Extensions::isTextureCompressionRGTCSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureCompressionS3TCSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureCompressionS3TCSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureCompressionS3TCSupported"
                    , isTextureCompressionS3TCSupported_function_type( &::osg::Texture::Extensions::isTextureCompressionS3TCSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureEdgeClampSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureEdgeClampSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureEdgeClampSupported"
                    , isTextureEdgeClampSupported_function_type( &::osg::Texture::Extensions::isTextureEdgeClampSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureFilterAnisotropicSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureFilterAnisotropicSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureFilterAnisotropicSupported"
                    , isTextureFilterAnisotropicSupported_function_type( &::osg::Texture::Extensions::isTextureFilterAnisotropicSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureIntegerSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureIntegerSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureIntegerSupported"
                    , isTextureIntegerSupported_function_type( &::osg::Texture::Extensions::isTextureIntegerSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureMaxLevelSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureMaxLevelSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureMaxLevelSupported"
                    , isTextureMaxLevelSupported_function_type( &::osg::Texture::Extensions::isTextureMaxLevelSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureMirroredRepeatSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureMirroredRepeatSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureMirroredRepeatSupported"
                    , isTextureMirroredRepeatSupported_function_type( &::osg::Texture::Extensions::isTextureMirroredRepeatSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureMultisampledSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureMultisampledSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureMultisampledSupported"
                    , isTextureMultisampledSupported_function_type( &::osg::Texture::Extensions::isTextureMultisampledSupported ) );
            
            }
            { //::osg::Texture::Extensions::isTextureSwizzleSupported
            
                typedef bool ( ::osg::Texture::Extensions::*isTextureSwizzleSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTextureSwizzleSupported"
                    , isTextureSwizzleSupported_function_type( &::osg::Texture::Extensions::isTextureSwizzleSupported ) );
            
            }
            { //::osg::Texture::Extensions::maxTextureSize
            
                typedef ::GLint ( ::osg::Texture::Extensions::*maxTextureSize_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "maxTextureSize"
                    , maxTextureSize_function_type( &::osg::Texture::Extensions::maxTextureSize ) );
            
            }
            { //::osg::Texture::Extensions::numTextureUnits
            
                typedef ::GLint ( ::osg::Texture::Extensions::*numTextureUnits_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "numTextureUnits"
                    , numTextureUnits_function_type( &::osg::Texture::Extensions::numTextureUnits ) );
            
            }
            { //::osg::Texture::Extensions::setGenerateMipMapSupported
            
                typedef void ( ::osg::Texture::Extensions::*setGenerateMipMapSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setGenerateMipMapSupported"
                    , setGenerateMipMapSupported_function_type( &::osg::Texture::Extensions::setGenerateMipMapSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setMaxTextureSize
            
                typedef void ( ::osg::Texture::Extensions::*setMaxTextureSize_function_type)( ::GLint ) ;
                
                Extensions_exposer.def( 
                    "setMaxTextureSize"
                    , setMaxTextureSize_function_type( &::osg::Texture::Extensions::setMaxTextureSize )
                    , ( bp::arg("maxsize") ) );
            
            }
            { //::osg::Texture::Extensions::setMultiTexturingSupported
            
                typedef void ( ::osg::Texture::Extensions::*setMultiTexturingSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setMultiTexturingSupported"
                    , setMultiTexturingSupported_function_type( &::osg::Texture::Extensions::setMultiTexturingSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setNumTextureUnits
            
                typedef void ( ::osg::Texture::Extensions::*setNumTextureUnits_function_type)( ::GLint ) ;
                
                Extensions_exposer.def( 
                    "setNumTextureUnits"
                    , setNumTextureUnits_function_type( &::osg::Texture::Extensions::setNumTextureUnits )
                    , ( bp::arg("nunits") ) );
            
            }
            { //::osg::Texture::Extensions::setPreferGenerateMipmapSGISForPowerOfTwo
            
                typedef void ( ::osg::Texture::Extensions::*setPreferGenerateMipmapSGISForPowerOfTwo_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setPreferGenerateMipmapSGISForPowerOfTwo"
                    , setPreferGenerateMipmapSGISForPowerOfTwo_function_type( &::osg::Texture::Extensions::setPreferGenerateMipmapSGISForPowerOfTwo )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setShadowAmbientSupported
            
                typedef void ( ::osg::Texture::Extensions::*setShadowAmbientSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setShadowAmbientSupported"
                    , setShadowAmbientSupported_function_type( &::osg::Texture::Extensions::setShadowAmbientSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setShadowSupported
            
                typedef void ( ::osg::Texture::Extensions::*setShadowSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setShadowSupported"
                    , setShadowSupported_function_type( &::osg::Texture::Extensions::setShadowSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureBorderClampSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureBorderClampSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureBorderClampSupported"
                    , setTextureBorderClampSupported_function_type( &::osg::Texture::Extensions::setTextureBorderClampSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureCompressionARBSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureCompressionARBSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureCompressionARBSupported"
                    , setTextureCompressionARBSupported_function_type( &::osg::Texture::Extensions::setTextureCompressionARBSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureCompressionETCSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureCompressionETCSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureCompressionETCSupported"
                    , setTextureCompressionETCSupported_function_type( &::osg::Texture::Extensions::setTextureCompressionETCSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureCompressionPVRTC2BPPSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureCompressionPVRTC2BPPSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureCompressionPVRTC2BPPSupported"
                    , setTextureCompressionPVRTC2BPPSupported_function_type( &::osg::Texture::Extensions::setTextureCompressionPVRTC2BPPSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureCompressionPVRTC4BPPSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureCompressionPVRTC4BPPSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureCompressionPVRTC4BPPSupported"
                    , setTextureCompressionPVRTC4BPPSupported_function_type( &::osg::Texture::Extensions::setTextureCompressionPVRTC4BPPSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureCompressionPVRTCSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureCompressionPVRTCSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureCompressionPVRTCSupported"
                    , setTextureCompressionPVRTCSupported_function_type( &::osg::Texture::Extensions::setTextureCompressionPVRTCSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureCompressionRGTCSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureCompressionRGTCSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureCompressionRGTCSupported"
                    , setTextureCompressionRGTCSupported_function_type( &::osg::Texture::Extensions::setTextureCompressionRGTCSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureCompressionS3TCSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureCompressionS3TCSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureCompressionS3TCSupported"
                    , setTextureCompressionS3TCSupported_function_type( &::osg::Texture::Extensions::setTextureCompressionS3TCSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureEdgeClampSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureEdgeClampSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureEdgeClampSupported"
                    , setTextureEdgeClampSupported_function_type( &::osg::Texture::Extensions::setTextureEdgeClampSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureFilterAnisotropicSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureFilterAnisotropicSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureFilterAnisotropicSupported"
                    , setTextureFilterAnisotropicSupported_function_type( &::osg::Texture::Extensions::setTextureFilterAnisotropicSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureIntegerSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureIntegerSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureIntegerSupported"
                    , setTextureIntegerSupported_function_type( &::osg::Texture::Extensions::setTextureIntegerSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureMaxLevelSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureMaxLevelSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureMaxLevelSupported"
                    , setTextureMaxLevelSupported_function_type( &::osg::Texture::Extensions::setTextureMaxLevelSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureMirroredRepeatSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureMirroredRepeatSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureMirroredRepeatSupported"
                    , setTextureMirroredRepeatSupported_function_type( &::osg::Texture::Extensions::setTextureMirroredRepeatSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureMultisampledSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureMultisampledSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureMultisampledSupported"
                    , setTextureMultisampledSupported_function_type( &::osg::Texture::Extensions::setTextureMultisampledSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Texture::Extensions::setTextureSwizzleSupported
            
                typedef void ( ::osg::Texture::Extensions::*setTextureSwizzleSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTextureSwizzleSupported"
                    , setTextureSwizzleSupported_function_type( &::osg::Texture::Extensions::setTextureSwizzleSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Referenced::setThreadSafeRefUnref
            
                typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
                typedef void ( Texture_wrapper::Extensions_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setThreadSafeRefUnref"
                    , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                    , default_setThreadSafeRefUnref_function_type(&Texture_wrapper::Extensions_wrapper::default_setThreadSafeRefUnref)
                    , ( bp::arg("threadSafe") ) );
            
            }
        }
        bp::class_< osg::Texture::ImageAttachment >( "ImageAttachment", bp::init< >() )    
            .def_readwrite( "access", &osg::Texture::ImageAttachment::access )    
            .def_readwrite( "format", &osg::Texture::ImageAttachment::format )    
            .def_readwrite( "layer", &osg::Texture::ImageAttachment::layer )    
            .def_readwrite( "layered", &osg::Texture::ImageAttachment::layered )    
            .def_readwrite( "level", &osg::Texture::ImageAttachment::level )    
            .def_readwrite( "unit", &osg::Texture::ImageAttachment::unit );
        bp::class_< Texture_wrapper::TextureObject_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "TextureObject", bp::no_init )    
            .def( bp::init< osg::Texture *, GLuint, GLenum >(( bp::arg("texture"), bp::arg("id"), bp::arg("target") )) )    
            .def( bp::init< osg::Texture *, GLuint, osg::Texture::TextureProfile const & >(( bp::arg("texture"), bp::arg("id"), bp::arg("profile") )) )    
            .def( bp::init< osg::Texture *, GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint >(( bp::arg("texture"), bp::arg("id"), bp::arg("target"), bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") )) )    
            .def( 
                "bind"
                , (void ( ::osg::Texture::TextureObject::* )(  ))( &::osg::Texture::TextureObject::bind ) )    
            .def( 
                "getTexture"
                , (::osg::Texture * ( ::osg::Texture::TextureObject::* )(  )const)( &::osg::Texture::TextureObject::getTexture )
                    /* undefined call policies */ )    
            .def( 
                "getTimeStamp"
                , (double ( ::osg::Texture::TextureObject::* )(  )const)( &::osg::Texture::TextureObject::getTimeStamp ) )    
            .def( 
                "id"
                , (::GLenum ( ::osg::Texture::TextureObject::* )(  )const)( &::osg::Texture::TextureObject::id ) )    
            .def( 
                "isAllocated"
                , (bool ( ::osg::Texture::TextureObject::* )(  )const)( &::osg::Texture::TextureObject::isAllocated ) )    
            .def( 
                "isReusable"
                , (bool ( ::osg::Texture::TextureObject::* )(  )const)( &::osg::Texture::TextureObject::isReusable ) )    
            .def( 
                "match"
                , (bool ( ::osg::Texture::TextureObject::* )( ::GLenum,::GLint,::GLenum,::GLsizei,::GLsizei,::GLsizei,::GLint ))( &::osg::Texture::TextureObject::match )
                , ( bp::arg("target"), bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") ) )    
            .def( 
                "setAllocated"
                , (void ( ::osg::Texture::TextureObject::* )( bool ))( &::osg::Texture::TextureObject::setAllocated )
                , ( bp::arg("allocated")=(bool)(true) ) )    
            .def( 
                "setAllocated"
                , (void ( ::osg::Texture::TextureObject::* )( ::GLint,::GLenum,::GLsizei,::GLsizei,::GLsizei,::GLint ))( &::osg::Texture::TextureObject::setAllocated )
                , ( bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") ) )    
            .def( 
                "setTexture"
                , (void ( ::osg::Texture::TextureObject::* )( ::osg::Texture * ))( &::osg::Texture::TextureObject::setTexture )
                , ( bp::arg("texture") ) )    
            .def( 
                "setTimeStamp"
                , (void ( ::osg::Texture::TextureObject::* )( double ))( &::osg::Texture::TextureObject::setTimeStamp )
                , ( bp::arg("timestamp") ) )    
            .def( 
                "size"
                , (unsigned int ( ::osg::Texture::TextureObject::* )(  )const)( &::osg::Texture::TextureObject::size ) )    
            .def( 
                "target"
                , (::GLenum ( ::osg::Texture::TextureObject::* )(  )const)( &::osg::Texture::TextureObject::target ) )    
            .def_readwrite( "_allocated", &osg::Texture::TextureObject::_allocated )    
            .def_readwrite( "_frameLastUsed", &osg::Texture::TextureObject::_frameLastUsed )    
            .def_readwrite( "_id", &osg::Texture::TextureObject::_id )    
            .add_property( "_next"
                        , bp::make_function( (::osg::Texture::TextureObject * (*)( ::osg::Texture::TextureObject const & ))(&Texture_wrapper::TextureObject_wrapper::get__next), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osg::Texture::TextureObject &,::osg::Texture::TextureObject * ))(&Texture_wrapper::TextureObject_wrapper::set__next), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .add_property( "_previous"
                        , bp::make_function( (::osg::Texture::TextureObject * (*)( ::osg::Texture::TextureObject const & ))(&Texture_wrapper::TextureObject_wrapper::get__previous), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osg::Texture::TextureObject &,::osg::Texture::TextureObject * ))(&Texture_wrapper::TextureObject_wrapper::set__previous), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .def_readwrite( "_profile", &osg::Texture::TextureObject::_profile )    
            .add_property( "_set"
                        , bp::make_function( (::osg::Texture::TextureObjectSet * (*)( ::osg::Texture::TextureObject const & ))(&Texture_wrapper::TextureObject_wrapper::get__set), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osg::Texture::TextureObject &,::osg::Texture::TextureObjectSet * ))(&Texture_wrapper::TextureObject_wrapper::set__set), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .add_property( "_texture"
                        , bp::make_function( (::osg::Texture * (*)( ::osg::Texture::TextureObject const & ))(&Texture_wrapper::TextureObject_wrapper::get__texture), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osg::Texture::TextureObject &,::osg::Texture * ))(&Texture_wrapper::TextureObject_wrapper::set__texture), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .def_readwrite( "_timeStamp", &osg::Texture::TextureObject::_timeStamp )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( Texture_wrapper::TextureObject_wrapper::* )( bool ))(&Texture_wrapper::TextureObject_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        { //::osg::Texture::TextureObjectManager
            typedef bp::class_< Texture_wrapper::TextureObjectManager_wrapper, bp::bases< osg::Referenced >, boost::noncopyable > TextureObjectManager_exposer_t;
            TextureObjectManager_exposer_t TextureObjectManager_exposer = TextureObjectManager_exposer_t( "TextureObjectManager", bp::init< unsigned int >(( bp::arg("contextID") )) );
            bp::scope TextureObjectManager_scope( TextureObjectManager_exposer );
            bp::implicitly_convertible< unsigned int, osg::Texture::TextureObjectManager >();
            { //::osg::Texture::TextureObjectManager::checkConsistency
            
                typedef bool ( ::osg::Texture::TextureObjectManager::*checkConsistency_function_type)(  ) const;
                
                TextureObjectManager_exposer.def( 
                    "checkConsistency"
                    , checkConsistency_function_type( &::osg::Texture::TextureObjectManager::checkConsistency ) );
            
            }
            { //::osg::Texture::TextureObjectManager::deleteAllTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*deleteAllTextureObjects_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "deleteAllTextureObjects"
                    , deleteAllTextureObjects_function_type( &::osg::Texture::TextureObjectManager::deleteAllTextureObjects ) );
            
            }
            { //::osg::Texture::TextureObjectManager::discardAllDeletedTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*discardAllDeletedTextureObjects_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "discardAllDeletedTextureObjects"
                    , discardAllDeletedTextureObjects_function_type( &::osg::Texture::TextureObjectManager::discardAllDeletedTextureObjects ) );
            
            }
            { //::osg::Texture::TextureObjectManager::discardAllTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*discardAllTextureObjects_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "discardAllTextureObjects"
                    , discardAllTextureObjects_function_type( &::osg::Texture::TextureObjectManager::discardAllTextureObjects ) );
            
            }
            { //::osg::Texture::TextureObjectManager::flushAllDeletedTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*flushAllDeletedTextureObjects_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "flushAllDeletedTextureObjects"
                    , flushAllDeletedTextureObjects_function_type( &::osg::Texture::TextureObjectManager::flushAllDeletedTextureObjects ) );
            
            }
            { //::osg::Texture::TextureObjectManager::flushDeletedTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*flushDeletedTextureObjects_function_type)( double,double & ) ;
                
                TextureObjectManager_exposer.def( 
                    "flushDeletedTextureObjects"
                    , flushDeletedTextureObjects_function_type( &::osg::Texture::TextureObjectManager::flushDeletedTextureObjects )
                    , ( bp::arg("currentTime"), bp::arg("availableTime") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::generateTextureObject
            
                typedef ::osg::Texture::TextureObject * ( ::osg::Texture::TextureObjectManager::*generateTextureObject_function_type)( ::osg::Texture const *,::GLenum ) ;
                
                TextureObjectManager_exposer.def( 
                    "generateTextureObject"
                    , generateTextureObject_function_type( &::osg::Texture::TextureObjectManager::generateTextureObject )
                    , ( bp::arg("texture"), bp::arg("target") )
                        /* undefined call policies */ );
            
            }
            { //::osg::Texture::TextureObjectManager::generateTextureObject
            
                typedef ::osg::Texture::TextureObject * ( ::osg::Texture::TextureObjectManager::*generateTextureObject_function_type)( ::osg::Texture const *,::GLenum,::GLint,::GLenum,::GLsizei,::GLsizei,::GLsizei,::GLint ) ;
                
                TextureObjectManager_exposer.def( 
                    "generateTextureObject"
                    , generateTextureObject_function_type( &::osg::Texture::TextureObjectManager::generateTextureObject )
                    , ( bp::arg("texture"), bp::arg("target"), bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") )
                        /* undefined call policies */ );
            
            }
            { //::osg::Texture::TextureObjectManager::getApplyTime
            
                typedef double & ( ::osg::Texture::TextureObjectManager::*getApplyTime_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getApplyTime"
                    , getApplyTime_function_type( &::osg::Texture::TextureObjectManager::getApplyTime )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getContextID
            
                typedef unsigned int ( ::osg::Texture::TextureObjectManager::*getContextID_function_type)(  ) const;
                
                TextureObjectManager_exposer.def( 
                    "getContextID"
                    , getContextID_function_type( &::osg::Texture::TextureObjectManager::getContextID ) );
            
            }
            { //::osg::Texture::TextureObjectManager::getCurrTexturePoolSize
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getCurrTexturePoolSize_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getCurrTexturePoolSize"
                    , getCurrTexturePoolSize_function_type( &::osg::Texture::TextureObjectManager::getCurrTexturePoolSize )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getCurrTexturePoolSize
            
                typedef unsigned int ( ::osg::Texture::TextureObjectManager::*getCurrTexturePoolSize_function_type)(  ) const;
                
                TextureObjectManager_exposer.def( 
                    "getCurrTexturePoolSize"
                    , getCurrTexturePoolSize_function_type( &::osg::Texture::TextureObjectManager::getCurrTexturePoolSize ) );
            
            }
            { //::osg::Texture::TextureObjectManager::getDeleteTime
            
                typedef double & ( ::osg::Texture::TextureObjectManager::*getDeleteTime_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getDeleteTime"
                    , getDeleteTime_function_type( &::osg::Texture::TextureObjectManager::getDeleteTime )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getFrameNumber
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getFrameNumber_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getFrameNumber"
                    , getFrameNumber_function_type( &::osg::Texture::TextureObjectManager::getFrameNumber )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getGenerateTime
            
                typedef double & ( ::osg::Texture::TextureObjectManager::*getGenerateTime_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getGenerateTime"
                    , getGenerateTime_function_type( &::osg::Texture::TextureObjectManager::getGenerateTime )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getMaxTexturePoolSize
            
                typedef unsigned int ( ::osg::Texture::TextureObjectManager::*getMaxTexturePoolSize_function_type)(  ) const;
                
                TextureObjectManager_exposer.def( 
                    "getMaxTexturePoolSize"
                    , getMaxTexturePoolSize_function_type( &::osg::Texture::TextureObjectManager::getMaxTexturePoolSize ) );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberActiveTextureObjects
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getNumberActiveTextureObjects_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getNumberActiveTextureObjects"
                    , getNumberActiveTextureObjects_function_type( &::osg::Texture::TextureObjectManager::getNumberActiveTextureObjects )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberActiveTextureObjects
            
                typedef unsigned int ( ::osg::Texture::TextureObjectManager::*getNumberActiveTextureObjects_function_type)(  ) const;
                
                TextureObjectManager_exposer.def( 
                    "getNumberActiveTextureObjects"
                    , getNumberActiveTextureObjects_function_type( &::osg::Texture::TextureObjectManager::getNumberActiveTextureObjects ) );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberApplied
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getNumberApplied_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getNumberApplied"
                    , getNumberApplied_function_type( &::osg::Texture::TextureObjectManager::getNumberApplied )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberDeleted
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getNumberDeleted_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getNumberDeleted"
                    , getNumberDeleted_function_type( &::osg::Texture::TextureObjectManager::getNumberDeleted )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberFrames
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getNumberFrames_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getNumberFrames"
                    , getNumberFrames_function_type( &::osg::Texture::TextureObjectManager::getNumberFrames )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberGenerated
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getNumberGenerated_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getNumberGenerated"
                    , getNumberGenerated_function_type( &::osg::Texture::TextureObjectManager::getNumberGenerated )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberOrphanedTextureObjects
            
                typedef unsigned int & ( ::osg::Texture::TextureObjectManager::*getNumberOrphanedTextureObjects_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "getNumberOrphanedTextureObjects"
                    , getNumberOrphanedTextureObjects_function_type( &::osg::Texture::TextureObjectManager::getNumberOrphanedTextureObjects )
                    , bp::return_value_policy< bp::copy_non_const_reference >() );
            
            }
            { //::osg::Texture::TextureObjectManager::getNumberOrphanedTextureObjects
            
                typedef unsigned int ( ::osg::Texture::TextureObjectManager::*getNumberOrphanedTextureObjects_function_type)(  ) const;
                
                TextureObjectManager_exposer.def( 
                    "getNumberOrphanedTextureObjects"
                    , getNumberOrphanedTextureObjects_function_type( &::osg::Texture::TextureObjectManager::getNumberOrphanedTextureObjects ) );
            
            }
            { //::osg::Texture::TextureObjectManager::getTextureObjectSet
            
                typedef ::osg::Texture::TextureObjectSet * ( ::osg::Texture::TextureObjectManager::*getTextureObjectSet_function_type)( ::osg::Texture::TextureProfile const & ) ;
                
                TextureObjectManager_exposer.def( 
                    "getTextureObjectSet"
                    , getTextureObjectSet_function_type( &::osg::Texture::TextureObjectManager::getTextureObjectSet )
                    , ( bp::arg("profile") )
                        /* undefined call policies */ );
            
            }
            { //::osg::Texture::TextureObjectManager::handlePendingOrphandedTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*handlePendingOrphandedTextureObjects_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "handlePendingOrphandedTextureObjects"
                    , handlePendingOrphandedTextureObjects_function_type( &::osg::Texture::TextureObjectManager::handlePendingOrphandedTextureObjects ) );
            
            }
            { //::osg::Texture::TextureObjectManager::hasSpace
            
                typedef bool ( ::osg::Texture::TextureObjectManager::*hasSpace_function_type)( unsigned int ) const;
                
                TextureObjectManager_exposer.def( 
                    "hasSpace"
                    , hasSpace_function_type( &::osg::Texture::TextureObjectManager::hasSpace )
                    , ( bp::arg("size") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::makeSpace
            
                typedef bool ( ::osg::Texture::TextureObjectManager::*makeSpace_function_type)( unsigned int ) ;
                
                TextureObjectManager_exposer.def( 
                    "makeSpace"
                    , makeSpace_function_type( &::osg::Texture::TextureObjectManager::makeSpace )
                    , ( bp::arg("size") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::newFrame
            
                typedef void ( ::osg::Texture::TextureObjectManager::*newFrame_function_type)( ::osg::FrameStamp * ) ;
                
                TextureObjectManager_exposer.def( 
                    "newFrame"
                    , newFrame_function_type( &::osg::Texture::TextureObjectManager::newFrame )
                    , ( bp::arg("fs") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::recomputeStats
            
                typedef void ( ::osg::Texture::TextureObjectManager::*recomputeStats_function_type)( ::std::ostream & ) const;
                
                TextureObjectManager_exposer.def( 
                    "recomputeStats"
                    , recomputeStats_function_type( &::osg::Texture::TextureObjectManager::recomputeStats )
                    , ( bp::arg("out") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::releaseTextureObject
            
                typedef void ( ::osg::Texture::TextureObjectManager::*releaseTextureObject_function_type)( ::osg::Texture::TextureObject * ) ;
                
                TextureObjectManager_exposer.def( 
                    "releaseTextureObject"
                    , releaseTextureObject_function_type( &::osg::Texture::TextureObjectManager::releaseTextureObject )
                    , ( bp::arg("to") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::reportStats
            
                typedef void ( ::osg::Texture::TextureObjectManager::*reportStats_function_type)( ::std::ostream & ) ;
                
                TextureObjectManager_exposer.def( 
                    "reportStats"
                    , reportStats_function_type( &::osg::Texture::TextureObjectManager::reportStats )
                    , ( bp::arg("out") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::resetStats
            
                typedef void ( ::osg::Texture::TextureObjectManager::*resetStats_function_type)(  ) ;
                
                TextureObjectManager_exposer.def( 
                    "resetStats"
                    , resetStats_function_type( &::osg::Texture::TextureObjectManager::resetStats ) );
            
            }
            { //::osg::Texture::TextureObjectManager::setCurrTexturePoolSize
            
                typedef void ( ::osg::Texture::TextureObjectManager::*setCurrTexturePoolSize_function_type)( unsigned int ) ;
                
                TextureObjectManager_exposer.def( 
                    "setCurrTexturePoolSize"
                    , setCurrTexturePoolSize_function_type( &::osg::Texture::TextureObjectManager::setCurrTexturePoolSize )
                    , ( bp::arg("size") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::setMaxTexturePoolSize
            
                typedef void ( ::osg::Texture::TextureObjectManager::*setMaxTexturePoolSize_function_type)( unsigned int ) ;
                
                TextureObjectManager_exposer.def( 
                    "setMaxTexturePoolSize"
                    , setMaxTexturePoolSize_function_type( &::osg::Texture::TextureObjectManager::setMaxTexturePoolSize )
                    , ( bp::arg("size") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::setNumberActiveTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*setNumberActiveTextureObjects_function_type)( unsigned int ) ;
                
                TextureObjectManager_exposer.def( 
                    "setNumberActiveTextureObjects"
                    , setNumberActiveTextureObjects_function_type( &::osg::Texture::TextureObjectManager::setNumberActiveTextureObjects )
                    , ( bp::arg("size") ) );
            
            }
            { //::osg::Texture::TextureObjectManager::setNumberOrphanedTextureObjects
            
                typedef void ( ::osg::Texture::TextureObjectManager::*setNumberOrphanedTextureObjects_function_type)( unsigned int ) ;
                
                TextureObjectManager_exposer.def( 
                    "setNumberOrphanedTextureObjects"
                    , setNumberOrphanedTextureObjects_function_type( &::osg::Texture::TextureObjectManager::setNumberOrphanedTextureObjects )
                    , ( bp::arg("size") ) );
            
            }
            { //::osg::Referenced::setThreadSafeRefUnref
            
                typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
                typedef void ( Texture_wrapper::TextureObjectManager_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
                
                TextureObjectManager_exposer.def( 
                    "setThreadSafeRefUnref"
                    , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                    , default_setThreadSafeRefUnref_function_type(&Texture_wrapper::TextureObjectManager_wrapper::default_setThreadSafeRefUnref)
                    , ( bp::arg("threadSafe") ) );
            
            }
        }
        bp::class_< Texture_wrapper::TextureObjectSet_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "TextureObjectSet", bp::no_init )    
            .def( bp::init< osg::Texture::TextureObjectManager *, osg::Texture::TextureProfile const & >(( bp::arg("parent"), bp::arg("profile") )) )    
            .def( 
                "addToBack"
                , (void ( ::osg::Texture::TextureObjectSet::* )( ::osg::Texture::TextureObject * ))( &::osg::Texture::TextureObjectSet::addToBack )
                , ( bp::arg("to") ) )    
            .def( 
                "checkConsistency"
                , (bool ( ::osg::Texture::TextureObjectSet::* )(  )const)( &::osg::Texture::TextureObjectSet::checkConsistency ) )    
            .def( 
                "computeNumTextureObjectsInList"
                , (unsigned int ( ::osg::Texture::TextureObjectSet::* )(  )const)( &::osg::Texture::TextureObjectSet::computeNumTextureObjectsInList ) )    
            .def( 
                "deleteAllTextureObjects"
                , (void ( ::osg::Texture::TextureObjectSet::* )(  ))( &::osg::Texture::TextureObjectSet::deleteAllTextureObjects ) )    
            .def( 
                "discardAllDeletedTextureObjects"
                , (void ( ::osg::Texture::TextureObjectSet::* )(  ))( &::osg::Texture::TextureObjectSet::discardAllDeletedTextureObjects ) )    
            .def( 
                "discardAllTextureObjects"
                , (void ( ::osg::Texture::TextureObjectSet::* )(  ))( &::osg::Texture::TextureObjectSet::discardAllTextureObjects ) )    
            .def( 
                "flushAllDeletedTextureObjects"
                , (void ( ::osg::Texture::TextureObjectSet::* )(  ))( &::osg::Texture::TextureObjectSet::flushAllDeletedTextureObjects ) )    
            .def( 
                "flushDeletedTextureObjects"
                , (void ( ::osg::Texture::TextureObjectSet::* )( double,double & ))( &::osg::Texture::TextureObjectSet::flushDeletedTextureObjects )
                , ( bp::arg("currentTime"), bp::arg("availableTime") ) )    
            .def( 
                "getNumOfTextureObjects"
                , (unsigned int ( ::osg::Texture::TextureObjectSet::* )(  )const)( &::osg::Texture::TextureObjectSet::getNumOfTextureObjects ) )    
            .def( 
                "getNumOrphans"
                , (unsigned int ( ::osg::Texture::TextureObjectSet::* )(  )const)( &::osg::Texture::TextureObjectSet::getNumOrphans ) )    
            .def( 
                "getNumPendingOrphans"
                , (unsigned int ( ::osg::Texture::TextureObjectSet::* )(  )const)( &::osg::Texture::TextureObjectSet::getNumPendingOrphans ) )    
            .def( 
                "getParent"
                , (::osg::Texture::TextureObjectManager * ( ::osg::Texture::TextureObjectSet::* )(  ))( &::osg::Texture::TextureObjectSet::getParent )
                    /* undefined call policies */ )    
            .def( 
                "getProfile"
                , (::osg::Texture::TextureProfile const & ( ::osg::Texture::TextureObjectSet::* )(  )const)( &::osg::Texture::TextureObjectSet::getProfile )
                , bp::return_internal_reference< >() )    
            .def( 
                "handlePendingOrphandedTextureObjects"
                , (void ( ::osg::Texture::TextureObjectSet::* )(  ))( &::osg::Texture::TextureObjectSet::handlePendingOrphandedTextureObjects ) )    
            .def( 
                "makeSpace"
                , (bool ( ::osg::Texture::TextureObjectSet::* )( unsigned int & ))( &::osg::Texture::TextureObjectSet::makeSpace )
                , ( bp::arg("size") ) )    
            .def( 
                "moveToBack"
                , (void ( ::osg::Texture::TextureObjectSet::* )( ::osg::Texture::TextureObject * ))( &::osg::Texture::TextureObjectSet::moveToBack )
                , ( bp::arg("to") ) )    
            .def( 
                "moveToSet"
                , (void ( ::osg::Texture::TextureObjectSet::* )( ::osg::Texture::TextureObject *,::osg::Texture::TextureObjectSet * ))( &::osg::Texture::TextureObjectSet::moveToSet )
                , ( bp::arg("to"), bp::arg("set") ) )    
            .def( 
                "orphan"
                , (void ( ::osg::Texture::TextureObjectSet::* )( ::osg::Texture::TextureObject * ))( &::osg::Texture::TextureObjectSet::orphan )
                , ( bp::arg("to") ) )    
            .def( 
                "remove"
                , (void ( ::osg::Texture::TextureObjectSet::* )( ::osg::Texture::TextureObject * ))( &::osg::Texture::TextureObjectSet::remove )
                , ( bp::arg("to") ) )    
            .def( 
                "size"
                , (unsigned int ( ::osg::Texture::TextureObjectSet::* )(  )const)( &::osg::Texture::TextureObjectSet::size ) )    
            .def( 
                "takeFromOrphans"
                , (::osg::Texture::TextureObject * ( ::osg::Texture::TextureObjectSet::* )( ::osg::Texture * ))( &::osg::Texture::TextureObjectSet::takeFromOrphans )
                , ( bp::arg("texture") )
                    /* undefined call policies */ )    
            .def( 
                "takeOrGenerate"
                , (::osg::Texture::TextureObject * ( ::osg::Texture::TextureObjectSet::* )( ::osg::Texture * ))( &::osg::Texture::TextureObjectSet::takeOrGenerate )
                , ( bp::arg("texture") )
                    /* undefined call policies */ )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( Texture_wrapper::TextureObjectSet_wrapper::* )( bool ))(&Texture_wrapper::TextureObjectSet_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        { //::osg::Texture::TextureProfile
            typedef bp::class_< osg::Texture::TextureProfile > TextureProfile_exposer_t;
            TextureProfile_exposer_t TextureProfile_exposer = TextureProfile_exposer_t( "TextureProfile", bp::init< GLenum >(( bp::arg("target") )) );
            bp::scope TextureProfile_scope( TextureProfile_exposer );
            bp::implicitly_convertible< GLenum, osg::Texture::TextureProfile >();
            TextureProfile_exposer.def( bp::init< GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint >(( bp::arg("target"), bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") )) );
            { //::osg::Texture::TextureProfile::computeSize
            
                typedef void ( ::osg::Texture::TextureProfile::*computeSize_function_type)(  ) ;
                
                TextureProfile_exposer.def( 
                    "computeSize"
                    , computeSize_function_type( &::osg::Texture::TextureProfile::computeSize ) );
            
            }
            { //::osg::Texture::TextureProfile::match
            
                typedef bool ( ::osg::Texture::TextureProfile::*match_function_type)( ::GLenum,::GLint,::GLenum,::GLsizei,::GLsizei,::GLsizei,::GLint ) ;
                
                TextureProfile_exposer.def( 
                    "match"
                    , match_function_type( &::osg::Texture::TextureProfile::match )
                    , ( bp::arg("target"), bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") ) );
            
            }
            TextureProfile_exposer.def( bp::self < bp::self );
            TextureProfile_exposer.def( bp::self == bp::self );
            { //::osg::Texture::TextureProfile::set
            
                typedef void ( ::osg::Texture::TextureProfile::*set_function_type)( ::GLint,::GLenum,::GLsizei,::GLsizei,::GLsizei,::GLint ) ;
                
                TextureProfile_exposer.def( 
                    "set"
                    , set_function_type( &::osg::Texture::TextureProfile::set )
                    , ( bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") ) );
            
            }
            TextureProfile_exposer.def_readwrite( "_border", &osg::Texture::TextureProfile::_border );
            TextureProfile_exposer.def_readwrite( "_depth", &osg::Texture::TextureProfile::_depth );
            TextureProfile_exposer.def_readwrite( "_height", &osg::Texture::TextureProfile::_height );
            TextureProfile_exposer.def_readwrite( "_internalFormat", &osg::Texture::TextureProfile::_internalFormat );
            TextureProfile_exposer.def_readwrite( "_numMipmapLevels", &osg::Texture::TextureProfile::_numMipmapLevels );
            TextureProfile_exposer.def_readwrite( "_size", &osg::Texture::TextureProfile::_size );
            TextureProfile_exposer.def_readwrite( "_target", &osg::Texture::TextureProfile::_target );
            TextureProfile_exposer.def_readwrite( "_width", &osg::Texture::TextureProfile::_width );
        }
        Texture_exposer.def( bp::init< >() );
        Texture_exposer.def( bp::init< osg::Texture const &, bp::optional< osg::CopyOp const & > >(( bp::arg("text"), bp::arg("copyop")=SHALLOW_COPY )) );
        { //::osg::Texture::allocateMipmapLevels
        
            typedef void ( ::osg::Texture::*allocateMipmapLevels_function_type)(  ) ;
            
            Texture_exposer.def( 
                "allocateMipmapLevels"
                , allocateMipmapLevels_function_type( &::osg::Texture::allocateMipmapLevels ) );
        
        }
        { //::osg::Texture::apply
        
            typedef void ( ::osg::Texture::*apply_function_type)( ::osg::State & ) const;
            
            Texture_exposer.def( 
                "apply"
                , bp::pure_virtual( apply_function_type(&::osg::Texture::apply) )
                , ( bp::arg("state") ) );
        
        }
        { //::osg::Texture::applyTexImage2D_load
        
            typedef void ( ::osg::Texture::*applyTexImage2D_load_function_type)( ::osg::State &,::GLenum,::osg::Image const *,::GLsizei,::GLsizei,::GLsizei ) const;
            
            Texture_exposer.def( 
                "applyTexImage2D_load"
                , applyTexImage2D_load_function_type( &::osg::Texture::applyTexImage2D_load )
                , ( bp::arg("state"), bp::arg("target"), bp::arg("image"), bp::arg("width"), bp::arg("height"), bp::arg("numMipmapLevels") ) );
        
        }
        { //::osg::Texture::applyTexImage2D_subload
        
            typedef void ( ::osg::Texture::*applyTexImage2D_subload_function_type)( ::osg::State &,::GLenum,::osg::Image const *,::GLsizei,::GLsizei,::GLint,::GLsizei ) const;
            
            Texture_exposer.def( 
                "applyTexImage2D_subload"
                , applyTexImage2D_subload_function_type( &::osg::Texture::applyTexImage2D_subload )
                , ( bp::arg("state"), bp::arg("target"), bp::arg("image"), bp::arg("width"), bp::arg("height"), bp::arg("inInternalFormat"), bp::arg("numMipmapLevels") ) );
        
        }
        { //::osg::Texture::areAllTextureObjectsLoaded
        
            typedef bool ( ::osg::Texture::*areAllTextureObjectsLoaded_function_type)(  ) const;
            
            Texture_exposer.def( 
                "areAllTextureObjectsLoaded"
                , areAllTextureObjectsLoaded_function_type( &::osg::Texture::areAllTextureObjectsLoaded ) );
        
        }
        { //::osg::Texture::asTexture
        
            typedef ::osg::Texture * ( ::osg::Texture::*asTexture_function_type)(  ) ;
            typedef ::osg::Texture * ( Texture_wrapper::*default_asTexture_function_type)(  ) ;
            
            Texture_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::Texture::asTexture)
                , default_asTexture_function_type(&Texture_wrapper::default_asTexture)
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::asTexture
        
            typedef ::osg::Texture const * ( ::osg::Texture::*asTexture_function_type)(  ) const;
            typedef ::osg::Texture const * ( Texture_wrapper::*default_asTexture_function_type)(  ) const;
            
            Texture_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::Texture::asTexture)
                , default_asTexture_function_type(&Texture_wrapper::default_asTexture)
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::bindToImageUnit
        
            typedef void ( ::osg::Texture::*bindToImageUnit_function_type)( unsigned int,::GLenum,::GLenum,int,bool,int ) ;
            
            Texture_exposer.def( 
                "bindToImageUnit"
                , bindToImageUnit_function_type( &::osg::Texture::bindToImageUnit )
                , ( bp::arg("unit"), bp::arg("access"), bp::arg("format")=(::GLenum)(0), bp::arg("level")=(int)(0), bp::arg("layered")=(bool)(false), bp::arg("layer")=(int)(0) ) );
        
        }
        { //::osg::Texture::className
        
            typedef char const * ( ::osg::Texture::*className_function_type)(  ) const;
            typedef char const * ( Texture_wrapper::*default_className_function_type)(  ) const;
            
            Texture_exposer.def( 
                "className"
                , className_function_type(&::osg::Texture::className)
                , default_className_function_type(&Texture_wrapper::default_className) );
        
        }
        { //::osg::Texture::clone
        
            typedef ::osg::Object * ( ::osg::Texture::*clone_function_type)( ::osg::CopyOp const & ) const;
            
            Texture_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::osg::Texture::clone) )
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Texture::cloneType
        
            typedef ::osg::Object * ( ::osg::Texture::*cloneType_function_type)(  ) const;
            
            Texture_exposer.def( 
                "cloneType"
                , bp::pure_virtual( cloneType_function_type(&::osg::Texture::cloneType) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Texture::compileGLObjects
        
            typedef void ( ::osg::Texture::*compileGLObjects_function_type)( ::osg::State & ) const;
            typedef void ( Texture_wrapper::*default_compileGLObjects_function_type)( ::osg::State & ) const;
            
            Texture_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::Texture::compileGLObjects)
                , default_compileGLObjects_function_type(&Texture_wrapper::default_compileGLObjects)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::Texture::deleteAllTextureObjects
        
            typedef void ( *deleteAllTextureObjects_function_type )( unsigned int );
            
            Texture_exposer.def( 
                "deleteAllTextureObjects"
                , deleteAllTextureObjects_function_type( &::osg::Texture::deleteAllTextureObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::Texture::dirtyTextureObject
        
            typedef void ( ::osg::Texture::*dirtyTextureObject_function_type)(  ) ;
            
            Texture_exposer.def( 
                "dirtyTextureObject"
                , dirtyTextureObject_function_type( &::osg::Texture::dirtyTextureObject ) );
        
        }
        { //::osg::Texture::dirtyTextureParameters
        
            typedef void ( ::osg::Texture::*dirtyTextureParameters_function_type)(  ) ;
            
            Texture_exposer.def( 
                "dirtyTextureParameters"
                , dirtyTextureParameters_function_type( &::osg::Texture::dirtyTextureParameters ) );
        
        }
        { //::osg::Texture::discardAllDeletedTextureObjects
        
            typedef void ( *discardAllDeletedTextureObjects_function_type )( unsigned int );
            
            Texture_exposer.def( 
                "discardAllDeletedTextureObjects"
                , discardAllDeletedTextureObjects_function_type( &::osg::Texture::discardAllDeletedTextureObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::Texture::discardAllTextureObjects
        
            typedef void ( *discardAllTextureObjects_function_type )( unsigned int );
            
            Texture_exposer.def( 
                "discardAllTextureObjects"
                , discardAllTextureObjects_function_type( &::osg::Texture::discardAllTextureObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::Texture::flushAllDeletedTextureObjects
        
            typedef void ( *flushAllDeletedTextureObjects_function_type )( unsigned int );
            
            Texture_exposer.def( 
                "flushAllDeletedTextureObjects"
                , flushAllDeletedTextureObjects_function_type( &::osg::Texture::flushAllDeletedTextureObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::Texture::flushDeletedTextureObjects
        
            typedef void ( *flushDeletedTextureObjects_function_type )( unsigned int,double,double & );
            
            Texture_exposer.def( 
                "flushDeletedTextureObjects"
                , flushDeletedTextureObjects_function_type( &::osg::Texture::flushDeletedTextureObjects )
                , ( bp::arg("contextID"), bp::arg("currentTime"), bp::arg("availableTime") ) );
        
        }
        { //::osg::Texture::generateTextureObject
        
            typedef ::osg::Texture::TextureObject * ( *generateTextureObject_function_type )( ::osg::Texture const *,unsigned int,::GLenum );
            
            Texture_exposer.def( 
                "generateTextureObject"
                , generateTextureObject_function_type( &::osg::Texture::generateTextureObject )
                , ( bp::arg("texture"), bp::arg("contextID"), bp::arg("target") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::generateTextureObject
        
            typedef ::osg::Texture::TextureObject * ( *generateTextureObject_function_type )( ::osg::Texture const *,unsigned int,::GLenum,::GLint,::GLenum,::GLsizei,::GLsizei,::GLsizei,::GLint );
            
            Texture_exposer.def( 
                "generateTextureObject"
                , generateTextureObject_function_type( &::osg::Texture::generateTextureObject )
                , ( bp::arg("texture"), bp::arg("contextID"), bp::arg("target"), bp::arg("numMipmapLevels"), bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("border") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::getBorderColor
        
            typedef ::osg::Vec4d const & ( ::osg::Texture::*getBorderColor_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getBorderColor"
                , getBorderColor_function_type( &::osg::Texture::getBorderColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Texture::getBorderWidth
        
            typedef ::GLint ( ::osg::Texture::*getBorderWidth_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getBorderWidth"
                , getBorderWidth_function_type( &::osg::Texture::getBorderWidth ) );
        
        }
        { //::osg::Texture::getClientStorageHint
        
            typedef bool ( ::osg::Texture::*getClientStorageHint_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getClientStorageHint"
                , getClientStorageHint_function_type( &::osg::Texture::getClientStorageHint ) );
        
        }
        { //::osg::Texture::getCompressedSize
        
            typedef void ( *getCompressedSize_function_type )( ::GLenum,::GLint,::GLint,::GLint,::GLint &,::GLint & );
            
            Texture_exposer.def( 
                "getCompressedSize"
                , getCompressedSize_function_type( &::osg::Texture::getCompressedSize )
                , ( bp::arg("internalFormat"), bp::arg("width"), bp::arg("height"), bp::arg("depth"), bp::arg("blockSize"), bp::arg("size") ) );
        
        }
        { //::osg::Texture::getExtensions
        
            typedef ::osg::Texture::Extensions * ( *getExtensions_function_type )( unsigned int,bool );
            
            Texture_exposer.def( 
                "getExtensions"
                , getExtensions_function_type( &::osg::Texture::getExtensions )
                , ( bp::arg("contextID"), bp::arg("createIfNotInitalized") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::getFilter
        
            typedef ::osg::Texture::FilterMode ( ::osg::Texture::*getFilter_function_type)( ::osg::Texture::FilterParameter ) const;
            
            Texture_exposer.def( 
                "getFilter"
                , getFilter_function_type( &::osg::Texture::getFilter )
                , ( bp::arg("which") ) );
        
        }
        { //::osg::Texture::getImage
        
            typedef ::osg::Image * ( ::osg::Texture::*getImage_function_type)( unsigned int ) ;
            
            Texture_exposer.def( 
                "getImage"
                , bp::pure_virtual( getImage_function_type(&::osg::Texture::getImage) )
                , ( bp::arg("face") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::getImage
        
            typedef ::osg::Image const * ( ::osg::Texture::*getImage_function_type)( unsigned int ) const;
            
            Texture_exposer.def( 
                "getImage"
                , bp::pure_virtual( getImage_function_type(&::osg::Texture::getImage) )
                , ( bp::arg("face") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::getImageAttachment
        
            typedef ::osg::Texture::ImageAttachment & ( ::osg::Texture::*getImageAttachment_function_type)(  ) ;
            
            Texture_exposer.def( 
                "getImageAttachment"
                , getImageAttachment_function_type( &::osg::Texture::getImageAttachment )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Texture::getImageAttachment
        
            typedef ::osg::Texture::ImageAttachment const & ( ::osg::Texture::*getImageAttachment_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getImageAttachment"
                , getImageAttachment_function_type( &::osg::Texture::getImageAttachment )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Texture::getInternalFormat
        
            typedef ::GLint ( ::osg::Texture::*getInternalFormat_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getInternalFormat"
                , getInternalFormat_function_type( &::osg::Texture::getInternalFormat ) );
        
        }
        { //::osg::Texture::getInternalFormatMode
        
            typedef ::osg::Texture::InternalFormatMode ( ::osg::Texture::*getInternalFormatMode_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getInternalFormatMode"
                , getInternalFormatMode_function_type( &::osg::Texture::getInternalFormatMode ) );
        
        }
        { //::osg::Texture::getInternalFormatType
        
            typedef ::osg::Texture::InternalFormatType ( ::osg::Texture::*getInternalFormatType_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getInternalFormatType"
                , getInternalFormatType_function_type( &::osg::Texture::getInternalFormatType ) );
        
        }
        { //::osg::Texture::getMaxAnisotropy
        
            typedef float ( ::osg::Texture::*getMaxAnisotropy_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getMaxAnisotropy"
                , getMaxAnisotropy_function_type( &::osg::Texture::getMaxAnisotropy ) );
        
        }
        { //::osg::Texture::getModeUsage
        
            typedef bool ( ::osg::Texture::*getModeUsage_function_type)( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( Texture_wrapper::*default_getModeUsage_function_type)( ::osg::StateAttribute::ModeUsage & ) const;
            
            Texture_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::Texture::getModeUsage)
                , default_getModeUsage_function_type(&Texture_wrapper::default_getModeUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osg::Texture::getNumImages
        
            typedef unsigned int ( ::osg::Texture::*getNumImages_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getNumImages"
                , bp::pure_virtual( getNumImages_function_type(&::osg::Texture::getNumImages) ) );
        
        }
        { //::osg::Texture::getReadPBuffer
        
            typedef ::osg::GraphicsContext * ( ::osg::Texture::*getReadPBuffer_function_type)(  ) ;
            
            Texture_exposer.def( 
                "getReadPBuffer"
                , getReadPBuffer_function_type( &::osg::Texture::getReadPBuffer )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::getReadPBuffer
        
            typedef ::osg::GraphicsContext const * ( ::osg::Texture::*getReadPBuffer_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getReadPBuffer"
                , getReadPBuffer_function_type( &::osg::Texture::getReadPBuffer )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::getResizeNonPowerOfTwoHint
        
            typedef bool ( ::osg::Texture::*getResizeNonPowerOfTwoHint_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getResizeNonPowerOfTwoHint"
                , getResizeNonPowerOfTwoHint_function_type( &::osg::Texture::getResizeNonPowerOfTwoHint ) );
        
        }
        { //::osg::Texture::getShadowAmbient
        
            typedef float ( ::osg::Texture::*getShadowAmbient_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getShadowAmbient"
                , getShadowAmbient_function_type( &::osg::Texture::getShadowAmbient ) );
        
        }
        { //::osg::Texture::getShadowCompareFunc
        
            typedef ::osg::Texture::ShadowCompareFunc ( ::osg::Texture::*getShadowCompareFunc_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getShadowCompareFunc"
                , getShadowCompareFunc_function_type( &::osg::Texture::getShadowCompareFunc ) );
        
        }
        { //::osg::Texture::getShadowComparison
        
            typedef bool ( ::osg::Texture::*getShadowComparison_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getShadowComparison"
                , getShadowComparison_function_type( &::osg::Texture::getShadowComparison ) );
        
        }
        { //::osg::Texture::getShadowTextureMode
        
            typedef ::osg::Texture::ShadowTextureMode ( ::osg::Texture::*getShadowTextureMode_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getShadowTextureMode"
                , getShadowTextureMode_function_type( &::osg::Texture::getShadowTextureMode ) );
        
        }
        { //::osg::Texture::getSourceFormat
        
            typedef ::GLenum ( ::osg::Texture::*getSourceFormat_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getSourceFormat"
                , getSourceFormat_function_type( &::osg::Texture::getSourceFormat ) );
        
        }
        { //::osg::Texture::getSourceType
        
            typedef ::GLenum ( ::osg::Texture::*getSourceType_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getSourceType"
                , getSourceType_function_type( &::osg::Texture::getSourceType ) );
        
        }
        { //::osg::Texture::getSwizzle
        
            typedef ::osg::Vec4i const & ( ::osg::Texture::*getSwizzle_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getSwizzle"
                , getSwizzle_function_type( &::osg::Texture::getSwizzle )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Texture::getTextureDepth
        
            typedef int ( ::osg::Texture::*getTextureDepth_function_type)(  ) const;
            typedef int ( Texture_wrapper::*default_getTextureDepth_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getTextureDepth"
                , getTextureDepth_function_type(&::osg::Texture::getTextureDepth)
                , default_getTextureDepth_function_type(&Texture_wrapper::default_getTextureDepth) );
        
        }
        { //::osg::Texture::getTextureHeight
        
            typedef int ( ::osg::Texture::*getTextureHeight_function_type)(  ) const;
            typedef int ( Texture_wrapper::*default_getTextureHeight_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getTextureHeight"
                , getTextureHeight_function_type(&::osg::Texture::getTextureHeight)
                , default_getTextureHeight_function_type(&Texture_wrapper::default_getTextureHeight) );
        
        }
        { //::osg::Texture::getTextureObject
        
            typedef ::osg::Texture::TextureObject * ( ::osg::Texture::*getTextureObject_function_type)( unsigned int ) const;
            
            Texture_exposer.def( 
                "getTextureObject"
                , getTextureObject_function_type( &::osg::Texture::getTextureObject )
                , ( bp::arg("contextID") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Texture::getTextureObjectManager
        
            typedef ::osg::ref_ptr< osg::Texture::TextureObjectManager > & ( *getTextureObjectManager_function_type )( unsigned int );
            
            Texture_exposer.def( 
                "getTextureObjectManager"
                , getTextureObjectManager_function_type( &::osg::Texture::getTextureObjectManager )
                , ( bp::arg("contextID") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Texture::getTextureParameterDirty
        
            typedef unsigned int & ( ::osg::Texture::*getTextureParameterDirty_function_type)( unsigned int ) const;
            
            Texture_exposer.def( 
                "getTextureParameterDirty"
                , getTextureParameterDirty_function_type( &::osg::Texture::getTextureParameterDirty )
                , ( bp::arg("contextID") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Texture::getTextureTarget
        
            typedef ::GLenum ( ::osg::Texture::*getTextureTarget_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getTextureTarget"
                , bp::pure_virtual( getTextureTarget_function_type(&::osg::Texture::getTextureTarget) ) );
        
        }
        { //::osg::Texture::getTextureWidth
        
            typedef int ( ::osg::Texture::*getTextureWidth_function_type)(  ) const;
            typedef int ( Texture_wrapper::*default_getTextureWidth_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getTextureWidth"
                , getTextureWidth_function_type(&::osg::Texture::getTextureWidth)
                , default_getTextureWidth_function_type(&Texture_wrapper::default_getTextureWidth) );
        
        }
        { //::osg::Texture::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::Texture::*getType_function_type)(  ) const;
            typedef ::osg::StateAttribute::Type ( Texture_wrapper::*default_getType_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getType"
                , getType_function_type(&::osg::Texture::getType)
                , default_getType_function_type(&Texture_wrapper::default_getType) );
        
        }
        { //::osg::Texture::getUnRefImageDataAfterApply
        
            typedef bool ( ::osg::Texture::*getUnRefImageDataAfterApply_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getUnRefImageDataAfterApply"
                , getUnRefImageDataAfterApply_function_type( &::osg::Texture::getUnRefImageDataAfterApply ) );
        
        }
        { //::osg::Texture::getUseHardwareMipMapGeneration
        
            typedef bool ( ::osg::Texture::*getUseHardwareMipMapGeneration_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getUseHardwareMipMapGeneration"
                , getUseHardwareMipMapGeneration_function_type( &::osg::Texture::getUseHardwareMipMapGeneration ) );
        
        }
        { //::osg::Texture::getWrap
        
            typedef ::osg::Texture::WrapMode ( ::osg::Texture::*getWrap_function_type)( ::osg::Texture::WrapParameter ) const;
            
            Texture_exposer.def( 
                "getWrap"
                , getWrap_function_type( &::osg::Texture::getWrap )
                , ( bp::arg("which") ) );
        
        }
        { //::osg::Texture::isCompressedInternalFormat
        
            typedef bool ( ::osg::Texture::*isCompressedInternalFormat_function_type)(  ) const;
            
            Texture_exposer.def( 
                "isCompressedInternalFormat"
                , isCompressedInternalFormat_function_type( &::osg::Texture::isCompressedInternalFormat ) );
        
        }
        { //::osg::Texture::isCompressedInternalFormat
        
            typedef bool ( *isCompressedInternalFormat_function_type )( ::GLint );
            
            Texture_exposer.def( 
                "isCompressedInternalFormat"
                , isCompressedInternalFormat_function_type( &::osg::Texture::isCompressedInternalFormat )
                , ( bp::arg("internalFormat") ) );
        
        }
        { //::osg::Texture::isSameKindAs
        
            typedef bool ( ::osg::Texture::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Texture_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Texture_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Texture::isSameKindAs)
                , default_isSameKindAs_function_type(&Texture_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Texture::isTextureAttribute
        
            typedef bool ( ::osg::Texture::*isTextureAttribute_function_type)(  ) const;
            typedef bool ( Texture_wrapper::*default_isTextureAttribute_function_type)(  ) const;
            
            Texture_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::Texture::isTextureAttribute)
                , default_isTextureAttribute_function_type(&Texture_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::Texture::libraryName
        
            typedef char const * ( ::osg::Texture::*libraryName_function_type)(  ) const;
            typedef char const * ( Texture_wrapper::*default_libraryName_function_type)(  ) const;
            
            Texture_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Texture::libraryName)
                , default_libraryName_function_type(&Texture_wrapper::default_libraryName) );
        
        }
        { //::osg::Texture::releaseGLObjects
        
            typedef void ( ::osg::Texture::*releaseGLObjects_function_type)( ::osg::State * ) const;
            typedef void ( Texture_wrapper::*default_releaseGLObjects_function_type)( ::osg::State * ) const;
            
            Texture_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osg::Texture::releaseGLObjects)
                , default_releaseGLObjects_function_type(&Texture_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osg::Texture::releaseTextureObject
        
            typedef void ( *releaseTextureObject_function_type )( unsigned int,::osg::Texture::TextureObject * );
            
            Texture_exposer.def( 
                "releaseTextureObject"
                , releaseTextureObject_function_type( &::osg::Texture::releaseTextureObject )
                , ( bp::arg("contextID"), bp::arg("to") ) );
        
        }
        { //::osg::Texture::resizeGLObjectBuffers
        
            typedef void ( ::osg::Texture::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Texture_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Texture_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Texture::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Texture_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Texture::setBorderColor
        
            typedef void ( ::osg::Texture::*setBorderColor_function_type)( ::osg::Vec4d const & ) ;
            
            Texture_exposer.def( 
                "setBorderColor"
                , setBorderColor_function_type( &::osg::Texture::setBorderColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osg::Texture::setBorderWidth
        
            typedef void ( ::osg::Texture::*setBorderWidth_function_type)( ::GLint ) ;
            
            Texture_exposer.def( 
                "setBorderWidth"
                , setBorderWidth_function_type( &::osg::Texture::setBorderWidth )
                , ( bp::arg("width") ) );
        
        }
        { //::osg::Texture::setClientStorageHint
        
            typedef void ( ::osg::Texture::*setClientStorageHint_function_type)( bool ) ;
            
            Texture_exposer.def( 
                "setClientStorageHint"
                , setClientStorageHint_function_type( &::osg::Texture::setClientStorageHint )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Texture::setExtensions
        
            typedef void ( *setExtensions_function_type )( unsigned int,::osg::Texture::Extensions * );
            
            Texture_exposer.def( 
                "setExtensions"
                , setExtensions_function_type( &::osg::Texture::setExtensions )
                , ( bp::arg("contextID"), bp::arg("extensions") ) );
        
        }
        { //::osg::Texture::setFilter
        
            typedef void ( ::osg::Texture::*setFilter_function_type)( ::osg::Texture::FilterParameter,::osg::Texture::FilterMode ) ;
            
            Texture_exposer.def( 
                "setFilter"
                , setFilter_function_type( &::osg::Texture::setFilter )
                , ( bp::arg("which"), bp::arg("filter") ) );
        
        }
        { //::osg::Texture::setImage
        
            typedef void ( ::osg::Texture::*setImage_function_type)( unsigned int,::osg::Image * ) ;
            
            Texture_exposer.def( 
                "setImage"
                , bp::pure_virtual( setImage_function_type(&::osg::Texture::setImage) )
                , ( bp::arg("face"), bp::arg("image") ) );
        
        }
        { //::osg::Texture::setInternalFormat
        
            typedef void ( ::osg::Texture::*setInternalFormat_function_type)( ::GLint ) ;
            
            Texture_exposer.def( 
                "setInternalFormat"
                , setInternalFormat_function_type( &::osg::Texture::setInternalFormat )
                , ( bp::arg("internalFormat") ) );
        
        }
        { //::osg::Texture::setInternalFormatMode
        
            typedef void ( ::osg::Texture::*setInternalFormatMode_function_type)( ::osg::Texture::InternalFormatMode ) ;
            
            Texture_exposer.def( 
                "setInternalFormatMode"
                , setInternalFormatMode_function_type( &::osg::Texture::setInternalFormatMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::Texture::setMaxAnisotropy
        
            typedef void ( ::osg::Texture::*setMaxAnisotropy_function_type)( float ) ;
            
            Texture_exposer.def( 
                "setMaxAnisotropy"
                , setMaxAnisotropy_function_type( &::osg::Texture::setMaxAnisotropy )
                , ( bp::arg("anis") ) );
        
        }
        { //::osg::Texture::setReadPBuffer
        
            typedef void ( ::osg::Texture::*setReadPBuffer_function_type)( ::osg::GraphicsContext * ) ;
            
            Texture_exposer.def( 
                "setReadPBuffer"
                , setReadPBuffer_function_type( &::osg::Texture::setReadPBuffer )
                , ( bp::arg("context") ) );
        
        }
        { //::osg::Texture::setResizeNonPowerOfTwoHint
        
            typedef void ( ::osg::Texture::*setResizeNonPowerOfTwoHint_function_type)( bool ) ;
            
            Texture_exposer.def( 
                "setResizeNonPowerOfTwoHint"
                , setResizeNonPowerOfTwoHint_function_type( &::osg::Texture::setResizeNonPowerOfTwoHint )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Texture::setShadowAmbient
        
            typedef void ( ::osg::Texture::*setShadowAmbient_function_type)( float ) ;
            
            Texture_exposer.def( 
                "setShadowAmbient"
                , setShadowAmbient_function_type( &::osg::Texture::setShadowAmbient )
                , ( bp::arg("shadow_ambient") ) );
        
        }
        { //::osg::Texture::setShadowCompareFunc
        
            typedef void ( ::osg::Texture::*setShadowCompareFunc_function_type)( ::osg::Texture::ShadowCompareFunc ) ;
            
            Texture_exposer.def( 
                "setShadowCompareFunc"
                , setShadowCompareFunc_function_type( &::osg::Texture::setShadowCompareFunc )
                , ( bp::arg("func") ) );
        
        }
        { //::osg::Texture::setShadowComparison
        
            typedef void ( ::osg::Texture::*setShadowComparison_function_type)( bool ) ;
            
            Texture_exposer.def( 
                "setShadowComparison"
                , setShadowComparison_function_type( &::osg::Texture::setShadowComparison )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Texture::setShadowTextureMode
        
            typedef void ( ::osg::Texture::*setShadowTextureMode_function_type)( ::osg::Texture::ShadowTextureMode ) ;
            
            Texture_exposer.def( 
                "setShadowTextureMode"
                , setShadowTextureMode_function_type( &::osg::Texture::setShadowTextureMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::Texture::setSourceFormat
        
            typedef void ( ::osg::Texture::*setSourceFormat_function_type)( ::GLenum ) ;
            
            Texture_exposer.def( 
                "setSourceFormat"
                , setSourceFormat_function_type( &::osg::Texture::setSourceFormat )
                , ( bp::arg("sourceFormat") ) );
        
        }
        { //::osg::Texture::setSourceType
        
            typedef void ( ::osg::Texture::*setSourceType_function_type)( ::GLenum ) ;
            
            Texture_exposer.def( 
                "setSourceType"
                , setSourceType_function_type( &::osg::Texture::setSourceType )
                , ( bp::arg("sourceType") ) );
        
        }
        { //::osg::Texture::setSwizzle
        
            typedef void ( ::osg::Texture::*setSwizzle_function_type)( ::osg::Vec4i const & ) ;
            
            Texture_exposer.def( 
                "setSwizzle"
                , setSwizzle_function_type( &::osg::Texture::setSwizzle )
                , ( bp::arg("swizzle") ) );
        
        }
        { //::osg::Texture::setTextureObject
        
            typedef void ( ::osg::Texture::*setTextureObject_function_type)( unsigned int,::osg::Texture::TextureObject * ) ;
            
            Texture_exposer.def( 
                "setTextureObject"
                , setTextureObject_function_type( &::osg::Texture::setTextureObject )
                , ( bp::arg("contextID"), bp::arg("to") ) );
        
        }
        { //::osg::Texture::setUnRefImageDataAfterApply
        
            typedef void ( ::osg::Texture::*setUnRefImageDataAfterApply_function_type)( bool ) ;
            
            Texture_exposer.def( 
                "setUnRefImageDataAfterApply"
                , setUnRefImageDataAfterApply_function_type( &::osg::Texture::setUnRefImageDataAfterApply )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Texture::setUseHardwareMipMapGeneration
        
            typedef void ( ::osg::Texture::*setUseHardwareMipMapGeneration_function_type)( bool ) ;
            
            Texture_exposer.def( 
                "setUseHardwareMipMapGeneration"
                , setUseHardwareMipMapGeneration_function_type( &::osg::Texture::setUseHardwareMipMapGeneration )
                , ( bp::arg("useHardwareMipMapGeneration") ) );
        
        }
        { //::osg::Texture::setWrap
        
            typedef void ( ::osg::Texture::*setWrap_function_type)( ::osg::Texture::WrapParameter,::osg::Texture::WrapMode ) ;
            
            Texture_exposer.def( 
                "setWrap"
                , setWrap_function_type( &::osg::Texture::setWrap )
                , ( bp::arg("which"), bp::arg("wrap") ) );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type)( ::osg::State & ) const;
            typedef bool ( Texture_wrapper::*default_checkValidityOfAssociatedModes_function_type)( ::osg::State & ) const;
            
            Texture_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&Texture_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::compare
        
            typedef int ( ::osg::StateAttribute::*compare_function_type)( ::osg::StateAttribute const & ) const;
            
            Texture_exposer.def( 
                "compare"
                , bp::pure_virtual( compare_function_type(&::osg::StateAttribute::compare) )
                , ( bp::arg("sa") ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Texture_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Texture_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Texture_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type)(  ) const;
            typedef unsigned int ( Texture_wrapper::*default_getMember_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&Texture_wrapper::default_getMember) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Texture_wrapper::*default_getUserData_function_type)(  ) ;
            
            Texture_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Texture_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Texture_wrapper::*default_getUserData_function_type)(  ) const;
            
            Texture_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Texture_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Texture_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Texture_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Texture_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Texture_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Texture_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Texture_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Texture_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Texture_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Texture_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Texture_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
        Texture_exposer.staticmethod( "deleteAllTextureObjects" );
        Texture_exposer.staticmethod( "discardAllDeletedTextureObjects" );
        Texture_exposer.staticmethod( "discardAllTextureObjects" );
        Texture_exposer.staticmethod( "flushAllDeletedTextureObjects" );
        Texture_exposer.staticmethod( "flushDeletedTextureObjects" );
        Texture_exposer.staticmethod( "generateTextureObject" );
        Texture_exposer.staticmethod( "getCompressedSize" );
        Texture_exposer.staticmethod( "getExtensions" );
        Texture_exposer.staticmethod( "getTextureObjectManager" );
        Texture_exposer.staticmethod( "isCompressedInternalFormat" );
        Texture_exposer.staticmethod( "releaseTextureObject" );
        Texture_exposer.staticmethod( "setExtensions" );
    }

}
