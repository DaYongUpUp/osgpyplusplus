// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "fragmentprogram.pypp.hpp"

namespace bp = boost::python;

struct FragmentProgram_wrapper : osg::FragmentProgram, bp::wrapper< osg::FragmentProgram > {

    struct Extensions_wrapper : osg::FragmentProgram::Extensions, bp::wrapper< osg::FragmentProgram::Extensions > {
    
        Extensions_wrapper(unsigned int contextID )
        : osg::FragmentProgram::Extensions( contextID )
          , bp::wrapper< osg::FragmentProgram::Extensions >(){
            // constructor
        
        }
    
        static void lowestCommonDenominator( ::osg::FragmentProgram::Extensions & inst, ::osg::FragmentProgram::Extensions & rhs ){
            inst.lowestCommonDenominator(rhs);
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    FragmentProgram_wrapper( )
    : osg::FragmentProgram( )
      , bp::wrapper< osg::FragmentProgram >(){
        // null constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::FragmentProgram::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::FragmentProgram::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::FragmentProgram::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::FragmentProgram::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::FragmentProgram::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::FragmentProgram::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::FragmentProgram::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::FragmentProgram::cloneType( );
    }

    virtual void compileGLObjects( ::osg::State & state ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(state) );
        else{
            this->osg::FragmentProgram::compileGLObjects( boost::ref(state) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & state ) const  {
        osg::FragmentProgram::compileGLObjects( boost::ref(state) );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(usage) );
        else{
            return this->osg::FragmentProgram::getModeUsage( boost::ref(usage) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        return osg::FragmentProgram::getModeUsage( boost::ref(usage) );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::FragmentProgram::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::FragmentProgram::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::FragmentProgram::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::FragmentProgram::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::FragmentProgram::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::FragmentProgram::libraryName( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::FragmentProgram::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::FragmentProgram::resizeGLObjectBuffers( maxSize );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::StateAttribute::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::StateAttribute::isTextureAttribute( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_FragmentProgram_class(){

    { //::osg::FragmentProgram
        typedef bp::class_< FragmentProgram_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< ::osg::FragmentProgram >, boost::noncopyable > FragmentProgram_exposer_t;
        FragmentProgram_exposer_t FragmentProgram_exposer = FragmentProgram_exposer_t( "FragmentProgram", "\n FragmentProgram - encapsulates the OpenGL ARB fragment program state.\n", bp::no_init );
        bp::scope FragmentProgram_scope( FragmentProgram_exposer );
        { //::osg::FragmentProgram::Extensions
            typedef bp::class_< FragmentProgram_wrapper::Extensions_wrapper, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::FragmentProgram::Extensions > > Extensions_exposer_t;
            Extensions_exposer_t Extensions_exposer = Extensions_exposer_t( "Extensions", "\n Extensions class which encapsulates the querying of extensions and\n associated function pointers, and provide convenience wrappers to\n check for the extensions or use the associated functions.\n", bp::no_init );
            bp::scope Extensions_scope( Extensions_exposer );
            Extensions_exposer.def( bp::init< unsigned int >(( bp::arg("contextID") ), "\n Extensions class which encapsulates the querying of extensions and\n associated function pointers, and provide convenience wrappers to\n check for the extensions or use the associated functions.\n") );
            bp::implicitly_convertible< unsigned int, osg::FragmentProgram::Extensions >();
            { //::osg::FragmentProgram::Extensions::glBindProgram
            
                typedef void ( ::osg::FragmentProgram::Extensions::*glBindProgram_function_type )( ::GLenum,::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glBindProgram"
                    , glBindProgram_function_type( &::osg::FragmentProgram::Extensions::glBindProgram )
                    , ( bp::arg("target"), bp::arg("id") ) );
            
            }
            { //::osg::FragmentProgram::Extensions::glDeletePrograms
            
                typedef void ( ::osg::FragmentProgram::Extensions::*glDeletePrograms_function_type )( ::GLsizei,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glDeletePrograms"
                    , glDeletePrograms_function_type( &::osg::FragmentProgram::Extensions::glDeletePrograms )
                    , ( bp::arg("n"), bp::arg("programs") ) );
            
            }
            { //::osg::FragmentProgram::Extensions::glGenPrograms
            
                typedef void ( ::osg::FragmentProgram::Extensions::*glGenPrograms_function_type )( ::GLsizei,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glGenPrograms"
                    , glGenPrograms_function_type( &::osg::FragmentProgram::Extensions::glGenPrograms )
                    , ( bp::arg("n"), bp::arg("programs") ) );
            
            }
            { //::osg::FragmentProgram::Extensions::glProgramLocalParameter4fv
            
                typedef void ( ::osg::FragmentProgram::Extensions::*glProgramLocalParameter4fv_function_type )( ::GLenum,::GLuint,::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glProgramLocalParameter4fv"
                    , glProgramLocalParameter4fv_function_type( &::osg::FragmentProgram::Extensions::glProgramLocalParameter4fv )
                    , ( bp::arg("target"), bp::arg("index"), bp::arg("params") ) );
            
            }
            { //::osg::FragmentProgram::Extensions::glProgramString
            
                typedef void ( ::osg::FragmentProgram::Extensions::*glProgramString_function_type )( ::GLenum,::GLenum,::GLsizei,void const * ) const;
                
                Extensions_exposer.def( 
                    "glProgramString"
                    , glProgramString_function_type( &::osg::FragmentProgram::Extensions::glProgramString )
                    , ( bp::arg("target"), bp::arg("format"), bp::arg("len"), bp::arg("string") ) );
            
            }
            { //::osg::FragmentProgram::Extensions::isFragmentProgramSupported
            
                typedef bool ( ::osg::FragmentProgram::Extensions::*isFragmentProgramSupported_function_type )(  ) const;
                
                Extensions_exposer.def( 
                    "isFragmentProgramSupported"
                    , isFragmentProgramSupported_function_type( &::osg::FragmentProgram::Extensions::isFragmentProgramSupported ) );
            
            }
            { //::osg::FragmentProgram::Extensions::lowestCommonDenominator
            
                typedef void ( *lowestCommonDenominator_function_type )( ::osg::FragmentProgram::Extensions &,::osg::FragmentProgram::Extensions & );
                
                Extensions_exposer.def( 
                    "lowestCommonDenominator"
                    , lowestCommonDenominator_function_type( &FragmentProgram_wrapper::Extensions_wrapper::lowestCommonDenominator )
                    , ( bp::arg("inst"), bp::arg("rhs") ) );
            
            }
            { //::osg::FragmentProgram::Extensions::setFragmentProgramSupported
            
                typedef void ( ::osg::FragmentProgram::Extensions::*setFragmentProgramSupported_function_type )( bool ) ;
                
                Extensions_exposer.def( 
                    "setFragmentProgramSupported"
                    , setFragmentProgramSupported_function_type( &::osg::FragmentProgram::Extensions::setFragmentProgramSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::FragmentProgram::Extensions::setupGLExtensions
            
                typedef void ( ::osg::FragmentProgram::Extensions::*setupGLExtensions_function_type )( unsigned int ) ;
                
                Extensions_exposer.def( 
                    "setupGLExtensions"
                    , setupGLExtensions_function_type( &::osg::FragmentProgram::Extensions::setupGLExtensions )
                    , ( bp::arg("contextID") ) );
            
            }
            { //::osg::Referenced::setThreadSafeRefUnref
            
                typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type )( bool ) ;
                typedef void ( FragmentProgram_wrapper::Extensions_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
                
                Extensions_exposer.def( 
                    "setThreadSafeRefUnref"
                    , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                    , default_setThreadSafeRefUnref_function_type(&FragmentProgram_wrapper::Extensions_wrapper::default_setThreadSafeRefUnref)
                    , ( bp::arg("threadSafe") ) );
            
            }
        }
        FragmentProgram_exposer.def( bp::init< >("\n FragmentProgram - encapsulates the OpenGL ARB fragment program state.\n") );
        { //::osg::FragmentProgram::apply
        
            typedef void ( ::osg::FragmentProgram::*apply_function_type )( ::osg::State & ) const;
            typedef void ( FragmentProgram_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            FragmentProgram_exposer.def( 
                "apply"
                , apply_function_type(&::osg::FragmentProgram::apply)
                , default_apply_function_type(&FragmentProgram_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::FragmentProgram::className
        
            typedef char const * ( ::osg::FragmentProgram::*className_function_type )(  ) const;
            typedef char const * ( FragmentProgram_wrapper::*default_className_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "className"
                , className_function_type(&::osg::FragmentProgram::className)
                , default_className_function_type(&FragmentProgram_wrapper::default_className) );
        
        }
        { //::osg::FragmentProgram::clone
        
            typedef ::osg::Object * ( ::osg::FragmentProgram::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( FragmentProgram_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            FragmentProgram_exposer.def( 
                "clone"
                , clone_function_type(&::osg::FragmentProgram::clone)
                , default_clone_function_type(&FragmentProgram_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::FragmentProgram::cloneType
        
            typedef ::osg::Object * ( ::osg::FragmentProgram::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( FragmentProgram_wrapper::*default_cloneType_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::FragmentProgram::cloneType)
                , default_cloneType_function_type(&FragmentProgram_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::FragmentProgram::compileGLObjects
        
            typedef void ( ::osg::FragmentProgram::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( FragmentProgram_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            FragmentProgram_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::FragmentProgram::compileGLObjects)
                , default_compileGLObjects_function_type(&FragmentProgram_wrapper::default_compileGLObjects)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::FragmentProgram::deleteFragmentProgramObject
        
            typedef void ( *deleteFragmentProgramObject_function_type )( unsigned int,::GLuint );
            
            FragmentProgram_exposer.def( 
                "deleteFragmentProgramObject"
                , deleteFragmentProgramObject_function_type( &::osg::FragmentProgram::deleteFragmentProgramObject )
                , ( bp::arg("contextID"), bp::arg("handle") )
                , " use deleteFragmentProgramObject instead of glDeletePrograms to allow\n OpenGL Fragment Program objects to be cached until they can be deleted\n by the OpenGL context in which they were created, specified\n by contextID." );
        
        }
        { //::osg::FragmentProgram::dirtyFragmentProgramObject
        
            typedef void ( ::osg::FragmentProgram::*dirtyFragmentProgramObject_function_type )(  ) ;
            
            FragmentProgram_exposer.def( 
                "dirtyFragmentProgramObject"
                , dirtyFragmentProgramObject_function_type( &::osg::FragmentProgram::dirtyFragmentProgramObject )
                , " Force a recompile on next apply() of associated OpenGL vertex program objects." );
        
        }
        { //::osg::FragmentProgram::discardDeletedFragmentProgramObjects
        
            typedef void ( *discardDeletedFragmentProgramObjects_function_type )( unsigned int );
            
            FragmentProgram_exposer.def( 
                "discardDeletedFragmentProgramObjects"
                , discardDeletedFragmentProgramObjects_function_type( &::osg::FragmentProgram::discardDeletedFragmentProgramObjects )
                , ( bp::arg("contextID") )
                , " discard all the cached fragment programs which need to be deleted\n in the OpenGL context related to contextID.\n Note, unlike flush no OpenGL calls are made, instead the handles are all removed.\n this call is useful for when an OpenGL context has been destroyed." );
        
        }
        { //::osg::FragmentProgram::flushDeletedFragmentProgramObjects
        
            typedef void ( *flushDeletedFragmentProgramObjects_function_type )( unsigned int,double,double & );
            
            FragmentProgram_exposer.def( 
                "flushDeletedFragmentProgramObjects"
                , flushDeletedFragmentProgramObjects_function_type( &::osg::FragmentProgram::flushDeletedFragmentProgramObjects )
                , ( bp::arg("contextID"), bp::arg("currentTime"), bp::arg("availableTime") )
                , " flush all the cached fragment programs which need to be deleted\n in the OpenGL context related to contextID." );
        
        }
        { //::osg::FragmentProgram::getExtensions
        
            typedef ::osg::FragmentProgram::Extensions * ( *getExtensions_function_type )( unsigned int,bool );
            
            FragmentProgram_exposer.def( 
                "getExtensions"
                , getExtensions_function_type( &::osg::FragmentProgram::getExtensions )
                , ( bp::arg("contextID"), bp::arg("createIfNotInitalized") )
                , bp::return_internal_reference< >()
                , " Function to call to get the extension of a specified context.\n If the Extension object for that context has not yet been created and the\n createIfNotInitalized flag has been set to false then returns NULL.\n If createIfNotInitalized is true then the Extensions object is\n automatically created.  However, in this case the extension object will\n only be created with the graphics context associated with ContextID.." );
        
        }
        { //::osg::FragmentProgram::getFragmentProgram
        
            typedef ::std::string const & ( ::osg::FragmentProgram::*getFragmentProgram_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "getFragmentProgram"
                , getFragmentProgram_function_type( &::osg::FragmentProgram::getFragmentProgram )
                , bp::return_value_policy< bp::copy_const_reference >()
                , " Get the fragment program." );
        
        }
        { //::osg::FragmentProgram::getFragmentProgramID
        
            typedef ::GLuint & ( ::osg::FragmentProgram::*getFragmentProgramID_function_type )( unsigned int ) const;
            
            FragmentProgram_exposer.def( 
                "getFragmentProgramID"
                , getFragmentProgramID_function_type( &::osg::FragmentProgram::getFragmentProgramID )
                , ( bp::arg("contextID") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , " Get the handle to the fragment program id for the current context." );
        
        }
        { //::osg::FragmentProgram::getLocalParameters
        
            typedef ::std::map< unsigned int, osg::Vec4f > & ( ::osg::FragmentProgram::*getLocalParameters_function_type )(  ) ;
            
            FragmentProgram_exposer.def( 
                "getLocalParameters"
                , getLocalParameters_function_type( &::osg::FragmentProgram::getLocalParameters )
                , bp::return_internal_reference< >()
                , " Get list of Program Parameters" );
        
        }
        { //::osg::FragmentProgram::getLocalParameters
        
            typedef ::std::map< unsigned int, osg::Vec4f > const & ( ::osg::FragmentProgram::*getLocalParameters_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "getLocalParameters"
                , getLocalParameters_function_type( &::osg::FragmentProgram::getLocalParameters )
                , bp::return_internal_reference< >()
                , " Get const list of Program Parameters" );
        
        }
        { //::osg::FragmentProgram::getMatrices
        
            typedef ::std::map< unsigned int, osg::Matrixd > & ( ::osg::FragmentProgram::*getMatrices_function_type )(  ) ;
            
            FragmentProgram_exposer.def( 
                "getMatrices"
                , getMatrices_function_type( &::osg::FragmentProgram::getMatrices )
                , bp::return_internal_reference< >()
                , " Get list of Matrices" );
        
        }
        { //::osg::FragmentProgram::getMatrices
        
            typedef ::std::map< unsigned int, osg::Matrixd > const & ( ::osg::FragmentProgram::*getMatrices_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "getMatrices"
                , getMatrices_function_type( &::osg::FragmentProgram::getMatrices )
                , bp::return_internal_reference< >()
                , " Get list of Matrices" );
        
        }
        { //::osg::FragmentProgram::getModeUsage
        
            typedef bool ( ::osg::FragmentProgram::*getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( FragmentProgram_wrapper::*default_getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            
            FragmentProgram_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::FragmentProgram::getModeUsage)
                , default_getModeUsage_function_type(&FragmentProgram_wrapper::default_getModeUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osg::FragmentProgram::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::FragmentProgram::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( FragmentProgram_wrapper::*default_getType_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "getType"
                , getType_function_type(&::osg::FragmentProgram::getType)
                , default_getType_function_type(&FragmentProgram_wrapper::default_getType) );
        
        }
        { //::osg::FragmentProgram::isSameKindAs
        
            typedef bool ( ::osg::FragmentProgram::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( FragmentProgram_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            FragmentProgram_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::FragmentProgram::isSameKindAs)
                , default_isSameKindAs_function_type(&FragmentProgram_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::FragmentProgram::libraryName
        
            typedef char const * ( ::osg::FragmentProgram::*libraryName_function_type )(  ) const;
            typedef char const * ( FragmentProgram_wrapper::*default_libraryName_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::FragmentProgram::libraryName)
                , default_libraryName_function_type(&FragmentProgram_wrapper::default_libraryName) );
        
        }
        { //::osg::FragmentProgram::resizeGLObjectBuffers
        
            typedef void ( ::osg::FragmentProgram::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( FragmentProgram_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            FragmentProgram_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::FragmentProgram::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&FragmentProgram_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::FragmentProgram::setExtensions
        
            typedef void ( *setExtensions_function_type )( unsigned int,::osg::FragmentProgram::Extensions * );
            
            FragmentProgram_exposer.def( 
                "setExtensions"
                , setExtensions_function_type( &::osg::FragmentProgram::setExtensions )
                , ( bp::arg("contextID"), bp::arg("extensions") )
                , " setExtensions allows users to override the extensions across graphics contexts.\n typically used when you have different extensions supported across graphics pipes\n but need to ensure that they all use the same low common denominator extensions." );
        
        }
        { //::osg::FragmentProgram::setFragmentProgram
        
            typedef void ( ::osg::FragmentProgram::*setFragmentProgram_function_type )( char const * ) ;
            
            FragmentProgram_exposer.def( 
                "setFragmentProgram"
                , setFragmentProgram_function_type( &::osg::FragmentProgram::setFragmentProgram )
                , ( bp::arg("program") )
                , " Set the fragment program using a C style string." );
        
        }
        { //::osg::FragmentProgram::setFragmentProgram
        
            typedef void ( ::osg::FragmentProgram::*setFragmentProgram_function_type )( ::std::string const & ) ;
            
            FragmentProgram_exposer.def( 
                "setFragmentProgram"
                , setFragmentProgram_function_type( &::osg::FragmentProgram::setFragmentProgram )
                , ( bp::arg("program") )
                , " Set the fragment program using C++ style string." );
        
        }
        { //::osg::FragmentProgram::setLocalParameters
        
            typedef void ( ::osg::FragmentProgram::*setLocalParameters_function_type )( ::std::map< unsigned int, osg::Vec4f > const & ) ;
            
            FragmentProgram_exposer.def( 
                "setLocalParameters"
                , setLocalParameters_function_type( &::osg::FragmentProgram::setLocalParameters )
                , ( bp::arg("lpl") )
                , " Set list of Program Parameters" );
        
        }
        { //::osg::FragmentProgram::setMatrices
        
            typedef void ( ::osg::FragmentProgram::*setMatrices_function_type )( ::std::map< unsigned int, osg::Matrixd > const & ) ;
            
            FragmentProgram_exposer.def( 
                "setMatrices"
                , setMatrices_function_type( &::osg::FragmentProgram::setMatrices )
                , ( bp::arg("matrices") )
                , " Set list of Matrices" );
        
        }
        { //::osg::FragmentProgram::setMatrix
        
            typedef void ( ::osg::FragmentProgram::*setMatrix_function_type )( ::GLenum const,::osg::Matrix const & ) ;
            
            FragmentProgram_exposer.def( 
                "setMatrix"
                , setMatrix_function_type( &::osg::FragmentProgram::setMatrix )
                , ( bp::arg("mode"), bp::arg("matrix") )
                , " Matrix" );
        
        }
        { //::osg::FragmentProgram::setProgramLocalParameter
        
            typedef void ( ::osg::FragmentProgram::*setProgramLocalParameter_function_type )( ::GLuint const,::osg::Vec4 const & ) ;
            
            FragmentProgram_exposer.def( 
                "setProgramLocalParameter"
                , setProgramLocalParameter_function_type( &::osg::FragmentProgram::setProgramLocalParameter )
                , ( bp::arg("index"), bp::arg("p") )
                , " Set Program Parameters" );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture * ( ::osg::StateAttribute::*asTexture_function_type )(  ) ;
            typedef ::osg::Texture * ( FragmentProgram_wrapper::*default_asTexture_function_type )(  ) ;
            
            FragmentProgram_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&FragmentProgram_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture const * ( ::osg::StateAttribute::*asTexture_function_type )(  ) const;
            typedef ::osg::Texture const * ( FragmentProgram_wrapper::*default_asTexture_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&FragmentProgram_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            typedef bool ( FragmentProgram_wrapper::*default_checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            FragmentProgram_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&FragmentProgram_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type )(  ) ;
            typedef void ( FragmentProgram_wrapper::*default_computeDataVariance_function_type )(  ) ;
            
            FragmentProgram_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&FragmentProgram_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type )(  ) const;
            typedef unsigned int ( FragmentProgram_wrapper::*default_getMember_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&FragmentProgram_wrapper::default_getMember) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type )(  ) ;
            typedef ::osg::Referenced * ( FragmentProgram_wrapper::*default_getUserData_function_type )(  ) ;
            
            FragmentProgram_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&FragmentProgram_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type )(  ) const;
            typedef ::osg::Referenced const * ( FragmentProgram_wrapper::*default_getUserData_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&FragmentProgram_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::isTextureAttribute
        
            typedef bool ( ::osg::StateAttribute::*isTextureAttribute_function_type )(  ) const;
            typedef bool ( FragmentProgram_wrapper::*default_isTextureAttribute_function_type )(  ) const;
            
            FragmentProgram_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::StateAttribute::isTextureAttribute)
                , default_isTextureAttribute_function_type(&FragmentProgram_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type )( ::std::string const & ) ;
            typedef void ( FragmentProgram_wrapper::*default_setName_function_type )( ::std::string const & ) ;
            
            FragmentProgram_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&FragmentProgram_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type )( char const * ) ;
            
            FragmentProgram_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") )
                , " Set the name of object using a C style string." );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( FragmentProgram_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            FragmentProgram_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&FragmentProgram_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type )( ::osg::Referenced * ) ;
            typedef void ( FragmentProgram_wrapper::*default_setUserData_function_type )( ::osg::Referenced * ) ;
            
            FragmentProgram_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&FragmentProgram_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
        FragmentProgram_exposer.staticmethod( "deleteFragmentProgramObject" );
        FragmentProgram_exposer.staticmethod( "discardDeletedFragmentProgramObjects" );
        FragmentProgram_exposer.staticmethod( "flushDeletedFragmentProgramObjects" );
        FragmentProgram_exposer.staticmethod( "getExtensions" );
        FragmentProgram_exposer.staticmethod( "setExtensions" );
    }

}
