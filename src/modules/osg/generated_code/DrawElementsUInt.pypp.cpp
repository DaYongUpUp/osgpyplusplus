// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "drawelementsuint.pypp.hpp"

namespace bp = boost::python;

struct DrawElementsUInt_wrapper : osg::DrawElementsUInt, bp::wrapper< osg::DrawElementsUInt > {

    DrawElementsUInt_wrapper(::GLenum mode=0 )
    : osg::DrawElementsUInt( mode )
      , bp::wrapper< osg::DrawElementsUInt >(){
        // constructor
    
    }

    DrawElementsUInt_wrapper(::GLenum mode, unsigned int no, ::GLuint const * ptr, int numInstances=0 )
    : osg::DrawElementsUInt( mode, no, ptr, numInstances )
      , bp::wrapper< osg::DrawElementsUInt >(){
        // constructor
    
    }

    virtual void accept( ::osg::PrimitiveFunctor & functor ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(functor) );
        else{
            this->osg::DrawElementsUInt::accept( boost::ref(functor) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & functor ) const  {
        osg::DrawElementsUInt::accept( boost::ref(functor) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & functor ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(functor) );
        else{
            this->osg::DrawElementsUInt::accept( boost::ref(functor) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & functor ) const  {
        osg::DrawElementsUInt::accept( boost::ref(functor) );
    }

    virtual void addElement( unsigned int v ) {
        if( bp::override func_addElement = this->get_override( "addElement" ) )
            func_addElement( v );
        else{
            this->osg::DrawElementsUInt::addElement( v );
        }
    }
    
    void default_addElement( unsigned int v ) {
        osg::DrawElementsUInt::addElement( v );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::DrawElementsUInt::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::DrawElementsUInt::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::DrawElementsUInt::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::DrawElementsUInt::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::DrawElementsUInt::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::DrawElementsUInt::cloneType( );
    }

    virtual void draw( ::osg::State & state, bool useVertexBufferObjects ) const  {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw( boost::ref(state), useVertexBufferObjects );
        else{
            this->osg::DrawElementsUInt::draw( boost::ref(state), useVertexBufferObjects );
        }
    }
    
    void default_draw( ::osg::State & state, bool useVertexBufferObjects ) const  {
        osg::DrawElementsUInt::draw( boost::ref(state), useVertexBufferObjects );
    }

    virtual ::GLvoid const * getDataPointer(  ) const  {
        if( bp::override func_getDataPointer = this->get_override( "getDataPointer" ) )
            return func_getDataPointer(  );
        else{
            return this->osg::DrawElementsUInt::getDataPointer(  );
        }
    }
    
    ::GLvoid const * default_getDataPointer(  ) const  {
        return osg::DrawElementsUInt::getDataPointer( );
    }

    virtual unsigned int getElement( unsigned int i ) {
        if( bp::override func_getElement = this->get_override( "getElement" ) )
            return func_getElement( i );
        else{
            return this->osg::DrawElementsUInt::getElement( i );
        }
    }
    
    unsigned int default_getElement( unsigned int i ) {
        return osg::DrawElementsUInt::getElement( i );
    }

    virtual unsigned int getNumIndices(  ) const  {
        if( bp::override func_getNumIndices = this->get_override( "getNumIndices" ) )
            return func_getNumIndices(  );
        else{
            return this->osg::DrawElementsUInt::getNumIndices(  );
        }
    }
    
    unsigned int default_getNumIndices(  ) const  {
        return osg::DrawElementsUInt::getNumIndices( );
    }

    virtual unsigned int getTotalDataSize(  ) const  {
        if( bp::override func_getTotalDataSize = this->get_override( "getTotalDataSize" ) )
            return func_getTotalDataSize(  );
        else{
            return this->osg::DrawElementsUInt::getTotalDataSize(  );
        }
    }
    
    unsigned int default_getTotalDataSize(  ) const  {
        return osg::DrawElementsUInt::getTotalDataSize( );
    }

    virtual unsigned int index( unsigned int pos ) const  {
        if( bp::override func_index = this->get_override( "index" ) )
            return func_index( pos );
        else{
            return this->osg::DrawElementsUInt::index( pos );
        }
    }
    
    unsigned int default_index( unsigned int pos ) const  {
        return osg::DrawElementsUInt::index( pos );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::DrawElementsUInt::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::DrawElementsUInt::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::DrawElementsUInt::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::DrawElementsUInt::libraryName( );
    }

    virtual void offsetIndices( int offset ) {
        if( bp::override func_offsetIndices = this->get_override( "offsetIndices" ) )
            func_offsetIndices( offset );
        else{
            this->osg::DrawElementsUInt::offsetIndices( offset );
        }
    }
    
    void default_offsetIndices( int offset ) {
        osg::DrawElementsUInt::offsetIndices( offset );
    }

    virtual void reserveElements( unsigned int numIndices ) {
        if( bp::override func_reserveElements = this->get_override( "reserveElements" ) )
            func_reserveElements( numIndices );
        else{
            this->osg::DrawElementsUInt::reserveElements( numIndices );
        }
    }
    
    void default_reserveElements( unsigned int numIndices ) {
        osg::DrawElementsUInt::reserveElements( numIndices );
    }

    virtual void setElement( unsigned int i, unsigned int v ) {
        if( bp::override func_setElement = this->get_override( "setElement" ) )
            func_setElement( i, v );
        else{
            this->osg::DrawElementsUInt::setElement( i, v );
        }
    }
    
    void default_setElement( unsigned int i, unsigned int v ) {
        osg::DrawElementsUInt::setElement( i, v );
    }

    virtual bool supportsBufferObject(  ) const  {
        if( bp::override func_supportsBufferObject = this->get_override( "supportsBufferObject" ) )
            return func_supportsBufferObject(  );
        else{
            return this->osg::DrawElementsUInt::supportsBufferObject(  );
        }
    }
    
    bool default_supportsBufferObject(  ) const  {
        return osg::DrawElementsUInt::supportsBufferObject( );
    }

    virtual ::osg::Array * asArray(  ) {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array * default_asArray(  ) {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::Array const * asArray(  ) const  {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array const * default_asArray(  ) const  {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::PrimitiveSet * asPrimitiveSet(  ) {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::PrimitiveSet::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet * default_asPrimitiveSet(  ) {
        return osg::PrimitiveSet::asPrimitiveSet( );
    }

    virtual ::osg::PrimitiveSet const * asPrimitiveSet(  ) const  {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::PrimitiveSet::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet const * default_asPrimitiveSet(  ) const  {
        return osg::PrimitiveSet::asPrimitiveSet( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void computeRange(  ) const  {
        if( bp::override func_computeRange = this->get_override( "computeRange" ) )
            func_computeRange(  );
        else{
            this->osg::PrimitiveSet::computeRange(  );
        }
    }
    
    void default_computeRange(  ) const  {
        osg::PrimitiveSet::computeRange( );
    }

    virtual ::osg::DrawElements * getDrawElements(  ) {
        if( bp::override func_getDrawElements = this->get_override( "getDrawElements" ) )
            return func_getDrawElements(  );
        else{
            return this->osg::DrawElements::getDrawElements(  );
        }
    }
    
    ::osg::DrawElements * default_getDrawElements(  ) {
        return osg::DrawElements::getDrawElements( );
    }

    virtual ::osg::DrawElements const * getDrawElements(  ) const  {
        if( bp::override func_getDrawElements = this->get_override( "getDrawElements" ) )
            return func_getDrawElements(  );
        else{
            return this->osg::DrawElements::getDrawElements(  );
        }
    }
    
    ::osg::DrawElements const * default_getDrawElements(  ) const  {
        return osg::DrawElements::getDrawElements( );
    }

    virtual unsigned int getNumPrimitives(  ) const  {
        if( bp::override func_getNumPrimitives = this->get_override( "getNumPrimitives" ) )
            return func_getNumPrimitives(  );
        else{
            return this->osg::PrimitiveSet::getNumPrimitives(  );
        }
    }
    
    unsigned int default_getNumPrimitives(  ) const  {
        return osg::PrimitiveSet::getNumPrimitives( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferData::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferData::resizeGLObjectBuffers( maxSize );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_DrawElementsUInt_class(){

    bp::class_< DrawElementsUInt_wrapper, bp::bases< osg::DrawElements >, osg::ref_ptr< ::osg::DrawElementsUInt >, boost::noncopyable >( "DrawElementsUInt", bp::no_init )    
        .def( bp::init< bp::optional< GLenum > >(( bp::arg("mode")=(::GLenum)(0) )) )    
        .def( bp::init< GLenum, unsigned int, GLuint const *, bp::optional< int > >(( bp::arg("mode"), bp::arg("no"), bp::arg("ptr"), bp::arg("numInstances")=(int)(0) )) )    
        .def( 
            "accept"
            , (void ( ::osg::DrawElementsUInt::* )( ::osg::PrimitiveFunctor & )const)(&::osg::DrawElementsUInt::accept)
            , (void ( DrawElementsUInt_wrapper::* )( ::osg::PrimitiveFunctor & )const)(&DrawElementsUInt_wrapper::default_accept)
            , ( bp::arg("functor") ) )    
        .def( 
            "accept"
            , (void ( ::osg::DrawElementsUInt::* )( ::osg::PrimitiveIndexFunctor & )const)(&::osg::DrawElementsUInt::accept)
            , (void ( DrawElementsUInt_wrapper::* )( ::osg::PrimitiveIndexFunctor & )const)(&DrawElementsUInt_wrapper::default_accept)
            , ( bp::arg("functor") ) )    
        .def( 
            "addElement"
            , (void ( ::osg::DrawElementsUInt::* )( unsigned int ))(&::osg::DrawElementsUInt::addElement)
            , (void ( DrawElementsUInt_wrapper::* )( unsigned int ))(&DrawElementsUInt_wrapper::default_addElement)
            , ( bp::arg("v") ) )    
        .def( 
            "className"
            , (char const * ( ::osg::DrawElementsUInt::* )(  )const)(&::osg::DrawElementsUInt::className)
            , (char const * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::DrawElementsUInt::* )( ::osg::CopyOp const & )const)(&::osg::DrawElementsUInt::clone)
            , (::osg::Object * ( DrawElementsUInt_wrapper::* )( ::osg::CopyOp const & )const)(&DrawElementsUInt_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::DrawElementsUInt::* )(  )const)(&::osg::DrawElementsUInt::cloneType)
            , (::osg::Object * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "draw"
            , (void ( ::osg::DrawElementsUInt::* )( ::osg::State &,bool )const)(&::osg::DrawElementsUInt::draw)
            , (void ( DrawElementsUInt_wrapper::* )( ::osg::State &,bool )const)(&DrawElementsUInt_wrapper::default_draw)
            , ( bp::arg("state"), bp::arg("useVertexBufferObjects") ) )    
        .def( 
            "getDataPointer"
            , (::GLvoid const * ( ::osg::DrawElementsUInt::* )(  )const)(&::osg::DrawElementsUInt::getDataPointer)
            , (::GLvoid const * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_getDataPointer)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getElement"
            , (unsigned int ( ::osg::DrawElementsUInt::* )( unsigned int ))(&::osg::DrawElementsUInt::getElement)
            , (unsigned int ( DrawElementsUInt_wrapper::* )( unsigned int ))(&DrawElementsUInt_wrapper::default_getElement)
            , ( bp::arg("i") ) )    
        .def( 
            "getNumIndices"
            , (unsigned int ( ::osg::DrawElementsUInt::* )(  )const)(&::osg::DrawElementsUInt::getNumIndices)
            , (unsigned int ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_getNumIndices) )    
        .def( 
            "getTotalDataSize"
            , (unsigned int ( ::osg::DrawElementsUInt::* )(  )const)(&::osg::DrawElementsUInt::getTotalDataSize)
            , (unsigned int ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_getTotalDataSize) )    
        .def( 
            "index"
            , (unsigned int ( ::osg::DrawElementsUInt::* )( unsigned int )const)(&::osg::DrawElementsUInt::index)
            , (unsigned int ( DrawElementsUInt_wrapper::* )( unsigned int )const)(&DrawElementsUInt_wrapper::default_index)
            , ( bp::arg("pos") ) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::DrawElementsUInt::* )( ::osg::Object const * )const)(&::osg::DrawElementsUInt::isSameKindAs)
            , (bool ( DrawElementsUInt_wrapper::* )( ::osg::Object const * )const)(&DrawElementsUInt_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::DrawElementsUInt::* )(  )const)(&::osg::DrawElementsUInt::libraryName)
            , (char const * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_libraryName) )    
        .def( 
            "offsetIndices"
            , (void ( ::osg::DrawElementsUInt::* )( int ))(&::osg::DrawElementsUInt::offsetIndices)
            , (void ( DrawElementsUInt_wrapper::* )( int ))(&DrawElementsUInt_wrapper::default_offsetIndices)
            , ( bp::arg("offset") ) )    
        .def( 
            "reserveElements"
            , (void ( ::osg::DrawElementsUInt::* )( unsigned int ))(&::osg::DrawElementsUInt::reserveElements)
            , (void ( DrawElementsUInt_wrapper::* )( unsigned int ))(&DrawElementsUInt_wrapper::default_reserveElements)
            , ( bp::arg("numIndices") ) )    
        .def( 
            "setElement"
            , (void ( ::osg::DrawElementsUInt::* )( unsigned int,unsigned int ))(&::osg::DrawElementsUInt::setElement)
            , (void ( DrawElementsUInt_wrapper::* )( unsigned int,unsigned int ))(&DrawElementsUInt_wrapper::default_setElement)
            , ( bp::arg("i"), bp::arg("v") ) )    
        .def( 
            "supportsBufferObject"
            , (bool ( ::osg::DrawElementsUInt::* )(  )const)(&::osg::DrawElementsUInt::supportsBufferObject)
            , (bool ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_supportsBufferObject) )    
        .def( 
            "asArray"
            , (::osg::Array * ( ::osg::BufferData::* )(  ))(&::osg::BufferData::asArray)
            , (::osg::Array * ( DrawElementsUInt_wrapper::* )(  ))(&DrawElementsUInt_wrapper::default_asArray)
            , bp::return_internal_reference< >() )    
        .def( 
            "asArray"
            , (::osg::Array const * ( ::osg::BufferData::* )(  )const)(&::osg::BufferData::asArray)
            , (::osg::Array const * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_asArray)
            , bp::return_internal_reference< >() )    
        .def( 
            "asPrimitiveSet"
            , (::osg::PrimitiveSet * ( ::osg::PrimitiveSet::* )(  ))(&::osg::PrimitiveSet::asPrimitiveSet)
            , (::osg::PrimitiveSet * ( DrawElementsUInt_wrapper::* )(  ))(&DrawElementsUInt_wrapper::default_asPrimitiveSet)
            , bp::return_internal_reference< >() )    
        .def( 
            "asPrimitiveSet"
            , (::osg::PrimitiveSet const * ( ::osg::PrimitiveSet::* )(  )const)(&::osg::PrimitiveSet::asPrimitiveSet)
            , (::osg::PrimitiveSet const * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_asPrimitiveSet)
            , bp::return_internal_reference< >() )    
        .def( 
            "computeDataVariance"
            , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
            , (void ( DrawElementsUInt_wrapper::* )(  ))(&DrawElementsUInt_wrapper::default_computeDataVariance) )    
        .def( 
            "computeRange"
            , (void ( ::osg::PrimitiveSet::* )(  )const)(&::osg::PrimitiveSet::computeRange)
            , (void ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_computeRange) )    
        .def( 
            "getDrawElements"
            , (::osg::DrawElements * ( ::osg::DrawElements::* )(  ))(&::osg::DrawElements::getDrawElements)
            , (::osg::DrawElements * ( DrawElementsUInt_wrapper::* )(  ))(&DrawElementsUInt_wrapper::default_getDrawElements)
            , bp::return_internal_reference< >() )    
        .def( 
            "getDrawElements"
            , (::osg::DrawElements const * ( ::osg::DrawElements::* )(  )const)(&::osg::DrawElements::getDrawElements)
            , (::osg::DrawElements const * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_getDrawElements)
            , bp::return_internal_reference< >() )    
        .def( 
            "getNumPrimitives"
            , (unsigned int ( ::osg::PrimitiveSet::* )(  )const)(&::osg::PrimitiveSet::getNumPrimitives)
            , (unsigned int ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_getNumPrimitives) )    
        .def( 
            "getUserData"
            , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
            , (::osg::Referenced * ( DrawElementsUInt_wrapper::* )(  ))(&DrawElementsUInt_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "getUserData"
            , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
            , (::osg::Referenced const * ( DrawElementsUInt_wrapper::* )(  )const)(&DrawElementsUInt_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "resizeGLObjectBuffers"
            , (void ( ::osg::BufferData::* )( unsigned int ))(&::osg::BufferData::resizeGLObjectBuffers)
            , (void ( DrawElementsUInt_wrapper::* )( unsigned int ))(&DrawElementsUInt_wrapper::default_resizeGLObjectBuffers)
            , ( bp::arg("maxSize") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
            , (void ( DrawElementsUInt_wrapper::* )( ::std::string const & ))(&DrawElementsUInt_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
            , ( bp::arg("name") ) )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
            , (void ( DrawElementsUInt_wrapper::* )( bool ))(&DrawElementsUInt_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) )    
        .def( 
            "setUserData"
            , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
            , (void ( DrawElementsUInt_wrapper::* )( ::osg::Referenced * ))(&DrawElementsUInt_wrapper::default_setUserData)
            , ( bp::arg("obj") ) );

}
