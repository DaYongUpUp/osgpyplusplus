// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "group.pypp.hpp"

namespace bp = boost::python;

struct Group_wrapper : osg::Group, bp::wrapper< osg::Group > {

    Group_wrapper( )
    : osg::Group( )
      , bp::wrapper< osg::Group >(){
        // null constructor
    
    }

    Group_wrapper(::osg::Group const & arg0, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::Group( boost::ref(arg0), boost::ref(copyop) )
      , bp::wrapper< osg::Group >(){
        // constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::Group::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::Group::accept( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Group::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Group::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Group::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Group::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Group::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Group::cloneType( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Group::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Group::computeBound( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Group::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Group::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Group::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Group::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * arg0=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(arg0) );
        else{
            this->osg::Group::releaseGLObjects( boost::python::ptr(arg0) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * arg0=0 ) const  {
        osg::Group::releaseGLObjects( boost::python::ptr(arg0) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::Group::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::Group::traverse( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osgTerrain::Terrain * asTerrain(  ) {
        if( bp::override func_asTerrain = this->get_override( "asTerrain" ) )
            return func_asTerrain(  );
        else{
            return this->osg::Node::asTerrain(  );
        }
    }
    
    ::osgTerrain::Terrain * default_asTerrain(  ) {
        return osg::Node::asTerrain( );
    }

    virtual ::osgTerrain::Terrain const * asTerrain(  ) const  {
        if( bp::override func_asTerrain = this->get_override( "asTerrain" ) )
            return func_asTerrain(  );
        else{
            return this->osg::Node::asTerrain(  );
        }
    }
    
    ::osgTerrain::Terrain const * default_asTerrain(  ) const  {
        return osg::Node::asTerrain( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Group_class(){

    { //::osg::Group
        typedef bp::class_< Group_wrapper, bp::bases< osg::Node >, boost::noncopyable > Group_exposer_t;
        Group_exposer_t Group_exposer = Group_exposer_t( "Group", bp::no_init );
        bp::scope Group_scope( Group_exposer );
        Group_exposer.def( bp::init< >() );
        Group_exposer.def( bp::init< osg::Group const &, bp::optional< osg::CopyOp const & > >(( bp::arg("arg0"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::Group const &, osg::Group >();
        { //::osg::Group::accept
        
            typedef void ( ::osg::Group::*accept_function_type)( ::osg::NodeVisitor & ) ;
            typedef void ( Group_wrapper::*default_accept_function_type)( ::osg::NodeVisitor & ) ;
            
            Group_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Group::accept)
                , default_accept_function_type(&Group_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Group::addChild
        
            typedef bool ( ::osg::Group::*addChild_function_type)( ::osg::Node * ) ;
            typedef bool ( Group_wrapper::*default_addChild_function_type)( ::osg::Node * ) ;
            
            Group_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::Group::addChild)
                , default_addChild_function_type(&Group_wrapper::default_addChild)
                , ( bp::arg("child") ) );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group * ( ::osg::Group::*asGroup_function_type)(  ) ;
            typedef ::osg::Group * ( Group_wrapper::*default_asGroup_function_type)(  ) ;
            
            Group_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&Group_wrapper::default_asGroup)
                    /* undefined call policies */ );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group const * ( ::osg::Group::*asGroup_function_type)(  ) const;
            typedef ::osg::Group const * ( Group_wrapper::*default_asGroup_function_type)(  ) const;
            
            Group_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&Group_wrapper::default_asGroup)
                    /* undefined call policies */ );
        
        }
        { //::osg::Group::className
        
            typedef char const * ( ::osg::Group::*className_function_type)(  ) const;
            typedef char const * ( Group_wrapper::*default_className_function_type)(  ) const;
            
            Group_exposer.def( 
                "className"
                , className_function_type(&::osg::Group::className)
                , default_className_function_type(&Group_wrapper::default_className) );
        
        }
        { //::osg::Group::clone
        
            typedef ::osg::Object * ( ::osg::Group::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Group_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            Group_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Group::clone)
                , default_clone_function_type(&Group_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Group::cloneType
        
            typedef ::osg::Object * ( ::osg::Group::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( Group_wrapper::*default_cloneType_function_type)(  ) const;
            
            Group_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Group::cloneType)
                , default_cloneType_function_type(&Group_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Group::computeBound
        
            typedef ::osg::BoundingSphere ( ::osg::Group::*computeBound_function_type)(  ) const;
            typedef ::osg::BoundingSphere ( Group_wrapper::*default_computeBound_function_type)(  ) const;
            
            Group_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::Group::computeBound)
                , default_computeBound_function_type(&Group_wrapper::default_computeBound) );
        
        }
        { //::osg::Group::containsNode
        
            typedef bool ( ::osg::Group::*containsNode_function_type)( ::osg::Node const * ) const;
            
            Group_exposer.def( 
                "containsNode"
                , containsNode_function_type( &::osg::Group::containsNode )
                , ( bp::arg("node") ) );
        
        }
        { //::osg::Group::getChild
        
            typedef ::osg::Node * ( ::osg::Group::*getChild_function_type)( unsigned int ) ;
            
            Group_exposer.def( 
                "getChild"
                , getChild_function_type( &::osg::Group::getChild )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Group::getChild
        
            typedef ::osg::Node const * ( ::osg::Group::*getChild_function_type)( unsigned int ) const;
            
            Group_exposer.def( 
                "getChild"
                , getChild_function_type( &::osg::Group::getChild )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Group::getChildIndex
        
            typedef unsigned int ( ::osg::Group::*getChildIndex_function_type)( ::osg::Node const * ) const;
            
            Group_exposer.def( 
                "getChildIndex"
                , getChildIndex_function_type( &::osg::Group::getChildIndex )
                , ( bp::arg("node") ) );
        
        }
        { //::osg::Group::getNumChildren
        
            typedef unsigned int ( ::osg::Group::*getNumChildren_function_type)(  ) const;
            
            Group_exposer.def( 
                "getNumChildren"
                , getNumChildren_function_type( &::osg::Group::getNumChildren ) );
        
        }
        { //::osg::Group::insertChild
        
            typedef bool ( ::osg::Group::*insertChild_function_type)( unsigned int,::osg::Node * ) ;
            typedef bool ( Group_wrapper::*default_insertChild_function_type)( unsigned int,::osg::Node * ) ;
            
            Group_exposer.def( 
                "insertChild"
                , insertChild_function_type(&::osg::Group::insertChild)
                , default_insertChild_function_type(&Group_wrapper::default_insertChild)
                , ( bp::arg("index"), bp::arg("child") ) );
        
        }
        { //::osg::Group::isSameKindAs
        
            typedef bool ( ::osg::Group::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Group_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Group_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Group::isSameKindAs)
                , default_isSameKindAs_function_type(&Group_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Group::libraryName
        
            typedef char const * ( ::osg::Group::*libraryName_function_type)(  ) const;
            typedef char const * ( Group_wrapper::*default_libraryName_function_type)(  ) const;
            
            Group_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Group::libraryName)
                , default_libraryName_function_type(&Group_wrapper::default_libraryName) );
        
        }
        { //::osg::Group::releaseGLObjects
        
            typedef void ( ::osg::Group::*releaseGLObjects_function_type)( ::osg::State * ) const;
            typedef void ( Group_wrapper::*default_releaseGLObjects_function_type)( ::osg::State * ) const;
            
            Group_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osg::Group::releaseGLObjects)
                , default_releaseGLObjects_function_type(&Group_wrapper::default_releaseGLObjects)
                , ( bp::arg("arg0")=bp::object() ) );
        
        }
        { //::osg::Group::removeChild
        
            typedef bool ( ::osg::Group::*removeChild_function_type)( ::osg::Node * ) ;
            
            Group_exposer.def( 
                "removeChild"
                , removeChild_function_type( &::osg::Group::removeChild )
                , ( bp::arg("child") ) );
        
        }
        { //::osg::Group::removeChild
        
            typedef bool ( ::osg::Group::*removeChild_function_type)( unsigned int,unsigned int ) ;
            
            Group_exposer.def( 
                "removeChild"
                , removeChild_function_type( &::osg::Group::removeChild )
                , ( bp::arg("pos"), bp::arg("numChildrenToRemove")=(unsigned int)(1) ) );
        
        }
        { //::osg::Group::removeChildren
        
            typedef bool ( ::osg::Group::*removeChildren_function_type)( unsigned int,unsigned int ) ;
            typedef bool ( Group_wrapper::*default_removeChildren_function_type)( unsigned int,unsigned int ) ;
            
            Group_exposer.def( 
                "removeChildren"
                , removeChildren_function_type(&::osg::Group::removeChildren)
                , default_removeChildren_function_type(&Group_wrapper::default_removeChildren)
                , ( bp::arg("pos"), bp::arg("numChildrenToRemove") ) );
        
        }
        { //::osg::Group::replaceChild
        
            typedef bool ( ::osg::Group::*replaceChild_function_type)( ::osg::Node *,::osg::Node * ) ;
            typedef bool ( Group_wrapper::*default_replaceChild_function_type)( ::osg::Node *,::osg::Node * ) ;
            
            Group_exposer.def( 
                "replaceChild"
                , replaceChild_function_type(&::osg::Group::replaceChild)
                , default_replaceChild_function_type(&Group_wrapper::default_replaceChild)
                , ( bp::arg("origChild"), bp::arg("newChild") ) );
        
        }
        { //::osg::Group::resizeGLObjectBuffers
        
            typedef void ( ::osg::Group::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Group_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Group_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Group::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Group_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Group::setChild
        
            typedef bool ( ::osg::Group::*setChild_function_type)( unsigned int,::osg::Node * ) ;
            typedef bool ( Group_wrapper::*default_setChild_function_type)( unsigned int,::osg::Node * ) ;
            
            Group_exposer.def( 
                "setChild"
                , setChild_function_type(&::osg::Group::setChild)
                , default_setChild_function_type(&Group_wrapper::default_setChild)
                , ( bp::arg("i"), bp::arg("node") ) );
        
        }
        { //::osg::Group::setThreadSafeRefUnref
        
            typedef void ( ::osg::Group::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Group_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Group_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Group::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Group_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Group::traverse
        
            typedef void ( ::osg::Group::*traverse_function_type)( ::osg::NodeVisitor & ) ;
            typedef void ( Group_wrapper::*default_traverse_function_type)( ::osg::NodeVisitor & ) ;
            
            Group_exposer.def( 
                "traverse"
                , traverse_function_type(&::osg::Group::traverse)
                , default_traverse_function_type(&Group_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera * ( ::osg::Node::*asCamera_function_type)(  ) ;
            typedef ::osg::Camera * ( Group_wrapper::*default_asCamera_function_type)(  ) ;
            
            Group_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&Group_wrapper::default_asCamera)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera const * ( ::osg::Node::*asCamera_function_type)(  ) const;
            typedef ::osg::Camera const * ( Group_wrapper::*default_asCamera_function_type)(  ) const;
            
            Group_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&Group_wrapper::default_asCamera)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode * ( ::osg::Node::*asGeode_function_type)(  ) ;
            typedef ::osg::Geode * ( Group_wrapper::*default_asGeode_function_type)(  ) ;
            
            Group_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&Group_wrapper::default_asGeode)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode const * ( ::osg::Node::*asGeode_function_type)(  ) const;
            typedef ::osg::Geode const * ( Group_wrapper::*default_asGeode_function_type)(  ) const;
            
            Group_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&Group_wrapper::default_asGeode)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch * ( ::osg::Node::*asSwitch_function_type)(  ) ;
            typedef ::osg::Switch * ( Group_wrapper::*default_asSwitch_function_type)(  ) ;
            
            Group_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&Group_wrapper::default_asSwitch)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch const * ( ::osg::Node::*asSwitch_function_type)(  ) const;
            typedef ::osg::Switch const * ( Group_wrapper::*default_asSwitch_function_type)(  ) const;
            
            Group_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&Group_wrapper::default_asSwitch)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTerrain
        
            typedef ::osgTerrain::Terrain * ( ::osg::Node::*asTerrain_function_type)(  ) ;
            typedef ::osgTerrain::Terrain * ( Group_wrapper::*default_asTerrain_function_type)(  ) ;
            
            Group_exposer.def( 
                "asTerrain"
                , asTerrain_function_type(&::osg::Node::asTerrain)
                , default_asTerrain_function_type(&Group_wrapper::default_asTerrain)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTerrain
        
            typedef ::osgTerrain::Terrain const * ( ::osg::Node::*asTerrain_function_type)(  ) const;
            typedef ::osgTerrain::Terrain const * ( Group_wrapper::*default_asTerrain_function_type)(  ) const;
            
            Group_exposer.def( 
                "asTerrain"
                , asTerrain_function_type(&::osg::Node::asTerrain)
                , default_asTerrain_function_type(&Group_wrapper::default_asTerrain)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform * ( ::osg::Node::*asTransform_function_type)(  ) ;
            typedef ::osg::Transform * ( Group_wrapper::*default_asTransform_function_type)(  ) ;
            
            Group_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&Group_wrapper::default_asTransform)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform const * ( ::osg::Node::*asTransform_function_type)(  ) const;
            typedef ::osg::Transform const * ( Group_wrapper::*default_asTransform_function_type)(  ) const;
            
            Group_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&Group_wrapper::default_asTransform)
                    /* undefined call policies */ );
        
        }
        { //::osg::Node::ascend
        
            typedef void ( ::osg::Node::*ascend_function_type)( ::osg::NodeVisitor & ) ;
            typedef void ( Group_wrapper::*default_ascend_function_type)( ::osg::NodeVisitor & ) ;
            
            Group_exposer.def( 
                "ascend"
                , ascend_function_type(&::osg::Node::ascend)
                , default_ascend_function_type(&Group_wrapper::default_ascend)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Group_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Group_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Group_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Group_wrapper::*default_getUserData_function_type)(  ) ;
            
            Group_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Group_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Group_wrapper::*default_getUserData_function_type)(  ) const;
            
            Group_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Group_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Group_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Group_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Group_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Group_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Group_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Group_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Group_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
