// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "stateset.pypp.hpp"

namespace bp = boost::python;

struct StateSet_wrapper : osg::StateSet, bp::wrapper< osg::StateSet > {

    struct Callback_wrapper : osg::StateSet::Callback, bp::wrapper< osg::StateSet::Callback > {
    
        Callback_wrapper( )
        : osg::StateSet::Callback( )
          , bp::wrapper< osg::StateSet::Callback >(){
            // null constructor
        
        }
    
        Callback_wrapper(::osg::StateSet::Callback const & arg0, ::osg::CopyOp const & arg1 )
        : osg::StateSet::Callback( boost::ref(arg0), boost::ref(arg1) )
          , bp::wrapper< osg::StateSet::Callback >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::StateSet::Callback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::StateSet::Callback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::StateSet::Callback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::StateSet::Callback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::StateSet::Callback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::StateSet::Callback::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::StateSet::Callback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::StateSet::Callback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::StateSet::Callback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::StateSet::Callback::libraryName( );
        }
    
        virtual void operator()( ::osg::StateSet * arg0, ::osg::NodeVisitor * arg1 ) {
            if( bp::override func___call__ = this->get_override( "__call__" ) )
                func___call__( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            else{
                this->osg::StateSet::Callback::operator()( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            }
        }
        
        void default___call__( ::osg::StateSet * arg0, ::osg::NodeVisitor * arg1 ) {
            osg::StateSet::Callback::operator()( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    StateSet_wrapper( )
    : osg::StateSet( )
      , bp::wrapper< osg::StateSet >(){
        // null constructor
    
    }

    StateSet_wrapper(::osg::StateSet const & arg0, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::StateSet( boost::ref(arg0), boost::ref(copyop) )
      , bp::wrapper< osg::StateSet >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::StateSet::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::StateSet::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::StateSet::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::StateSet::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::StateSet::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::StateSet::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::StateSet::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::StateSet::computeDataVariance( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::StateSet::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::StateSet::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::StateSet::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::StateSet::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osg::StateSet::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osg::StateSet::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::StateSet::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::StateSet::resizeGLObjectBuffers( maxSize );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::StateSet::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::StateSet::setThreadSafeRefUnref( threadSafe );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_StateSet_class(){

    { //::osg::StateSet
        typedef bp::class_< StateSet_wrapper, bp::bases< osg::Object >, boost::noncopyable > StateSet_exposer_t;
        StateSet_exposer_t StateSet_exposer = StateSet_exposer_t( "StateSet", bp::no_init );
        bp::scope StateSet_scope( StateSet_exposer );
        bp::enum_< osg::StateSet::RenderBinMode>("RenderBinMode")
            .value("INHERIT_RENDERBIN_DETAILS", osg::StateSet::INHERIT_RENDERBIN_DETAILS)
            .value("USE_RENDERBIN_DETAILS", osg::StateSet::USE_RENDERBIN_DETAILS)
            .value("OVERRIDE_RENDERBIN_DETAILS", osg::StateSet::OVERRIDE_RENDERBIN_DETAILS)
            .export_values()
            ;
        bp::enum_< osg::StateSet::RenderingHint>("RenderingHint")
            .value("DEFAULT_BIN", osg::StateSet::DEFAULT_BIN)
            .value("OPAQUE_BIN", osg::StateSet::OPAQUE_BIN)
            .value("TRANSPARENT_BIN", osg::StateSet::TRANSPARENT_BIN)
            .export_values()
            ;
        bp::class_< StateSet_wrapper::Callback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "Callback", bp::init< >() )    
            .def( bp::init< osg::StateSet::Callback const &, osg::CopyOp const & >(( bp::arg("arg0"), bp::arg("arg1") )) )    
            .def( 
                "className"
                , (char const * ( ::osg::StateSet::Callback::* )(  )const)(&::osg::StateSet::Callback::className)
                , (char const * ( StateSet_wrapper::Callback_wrapper::* )(  )const)(&StateSet_wrapper::Callback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::StateSet::Callback::* )( ::osg::CopyOp const & )const)(&::osg::StateSet::Callback::clone)
                , (::osg::Object * ( StateSet_wrapper::Callback_wrapper::* )( ::osg::CopyOp const & )const)(&StateSet_wrapper::Callback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::StateSet::Callback::* )(  )const)(&::osg::StateSet::Callback::cloneType)
                , (::osg::Object * ( StateSet_wrapper::Callback_wrapper::* )(  )const)(&StateSet_wrapper::Callback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::StateSet::Callback::* )( ::osg::Object const * )const)(&::osg::StateSet::Callback::isSameKindAs)
                , (bool ( StateSet_wrapper::Callback_wrapper::* )( ::osg::Object const * )const)(&StateSet_wrapper::Callback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::StateSet::Callback::* )(  )const)(&::osg::StateSet::Callback::libraryName)
                , (char const * ( StateSet_wrapper::Callback_wrapper::* )(  )const)(&StateSet_wrapper::Callback_wrapper::default_libraryName) )    
            .def( 
                "__call__"
                , (void ( ::osg::StateSet::Callback::* )( ::osg::StateSet *,::osg::NodeVisitor * ))(&::osg::StateSet::Callback::operator())
                , (void ( StateSet_wrapper::Callback_wrapper::* )( ::osg::StateSet *,::osg::NodeVisitor * ))(&StateSet_wrapper::Callback_wrapper::default___call__)
                , ( bp::arg("arg0"), bp::arg("arg1") ) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( StateSet_wrapper::Callback_wrapper::* )(  ))(&StateSet_wrapper::Callback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( StateSet_wrapper::Callback_wrapper::* )(  ))(&StateSet_wrapper::Callback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( StateSet_wrapper::Callback_wrapper::* )(  )const)(&StateSet_wrapper::Callback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( StateSet_wrapper::Callback_wrapper::* )( unsigned int ))(&StateSet_wrapper::Callback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( StateSet_wrapper::Callback_wrapper::* )( ::std::string const & ))(&StateSet_wrapper::Callback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( StateSet_wrapper::Callback_wrapper::* )( bool ))(&StateSet_wrapper::Callback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( StateSet_wrapper::Callback_wrapper::* )( ::osg::Referenced * ))(&StateSet_wrapper::Callback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        StateSet_exposer.def( bp::init< >() );
        StateSet_exposer.def( bp::init< osg::StateSet const &, bp::optional< osg::CopyOp const & > >(( bp::arg("arg0"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::StateSet const &, osg::StateSet >();
        { //::osg::StateSet::addUniform
        
            typedef void ( ::osg::StateSet::*addUniform_function_type)( ::osg::Uniform *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "addUniform"
                , addUniform_function_type( &::osg::StateSet::addUniform )
                , ( bp::arg("uniform"), bp::arg("value")=(unsigned int)(ON) ) );
        
        }
        { //::osg::StateSet::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateSet::*checkValidityOfAssociatedModes_function_type)( ::osg::State & ) const;
            
            StateSet_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type( &::osg::StateSet::checkValidityOfAssociatedModes )
                , ( bp::arg("state") ) );
        
        }
        { //::osg::StateSet::className
        
            typedef char const * ( ::osg::StateSet::*className_function_type)(  ) const;
            typedef char const * ( StateSet_wrapper::*default_className_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "className"
                , className_function_type(&::osg::StateSet::className)
                , default_className_function_type(&StateSet_wrapper::default_className) );
        
        }
        { //::osg::StateSet::clear
        
            typedef void ( ::osg::StateSet::*clear_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "clear"
                , clear_function_type( &::osg::StateSet::clear ) );
        
        }
        { //::osg::StateSet::clone
        
            typedef ::osg::Object * ( ::osg::StateSet::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( StateSet_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            StateSet_exposer.def( 
                "clone"
                , clone_function_type(&::osg::StateSet::clone)
                , default_clone_function_type(&StateSet_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::StateSet::cloneType
        
            typedef ::osg::Object * ( ::osg::StateSet::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( StateSet_wrapper::*default_cloneType_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::StateSet::cloneType)
                , default_cloneType_function_type(&StateSet_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::StateSet::compare
        
            typedef int ( ::osg::StateSet::*compare_function_type)( ::osg::StateSet const &,bool ) const;
            
            StateSet_exposer.def( 
                "compare"
                , compare_function_type( &::osg::StateSet::compare )
                , ( bp::arg("rhs"), bp::arg("compareAttributeContents")=(bool)(false) ) );
        
        }
        { //::osg::StateSet::compileGLObjects
        
            typedef void ( ::osg::StateSet::*compileGLObjects_function_type)( ::osg::State & ) const;
            
            StateSet_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type( &::osg::StateSet::compileGLObjects )
                , ( bp::arg("state") ) );
        
        }
        { //::osg::StateSet::computeDataVariance
        
            typedef void ( ::osg::StateSet::*computeDataVariance_function_type)(  ) ;
            typedef void ( StateSet_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::StateSet::computeDataVariance)
                , default_computeDataVariance_function_type(&StateSet_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::StateSet::getAttribute
        
            typedef ::osg::StateAttribute * ( ::osg::StateSet::*getAttribute_function_type)( ::osg::StateAttribute::Type,unsigned int ) ;
            
            StateSet_exposer.def( 
                "getAttribute"
                , getAttribute_function_type( &::osg::StateSet::getAttribute )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getAttribute
        
            typedef ::osg::StateAttribute const * ( ::osg::StateSet::*getAttribute_function_type)( ::osg::StateAttribute::Type,unsigned int ) const;
            
            StateSet_exposer.def( 
                "getAttribute"
                , getAttribute_function_type( &::osg::StateSet::getAttribute )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getAttributeList
        
            typedef ::std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > & ( ::osg::StateSet::*getAttributeList_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getAttributeList"
                , getAttributeList_function_type( &::osg::StateSet::getAttributeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getAttributeList
        
            typedef ::std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > const & ( ::osg::StateSet::*getAttributeList_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getAttributeList"
                , getAttributeList_function_type( &::osg::StateSet::getAttributeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getAttributePair
        
            typedef ::std::pair< osg::ref_ptr< osg::StateAttribute >, unsigned int > const * ( ::osg::StateSet::*getAttributePair_function_type)( ::osg::StateAttribute::Type,unsigned int ) const;
            
            StateSet_exposer.def( 
                "getAttributePair"
                , getAttributePair_function_type( &::osg::StateSet::getAttributePair )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getBinName
        
            typedef ::std::string const & ( ::osg::StateSet::*getBinName_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getBinName"
                , getBinName_function_type( &::osg::StateSet::getBinName )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getBinNumber
        
            typedef int ( ::osg::StateSet::*getBinNumber_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getBinNumber"
                , getBinNumber_function_type( &::osg::StateSet::getBinNumber ) );
        
        }
        { //::osg::StateSet::getEventCallback
        
            typedef ::osg::StateSet::Callback * ( ::osg::StateSet::*getEventCallback_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::StateSet::getEventCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getEventCallback
        
            typedef ::osg::StateSet::Callback const * ( ::osg::StateSet::*getEventCallback_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::StateSet::getEventCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getMode
        
            typedef unsigned int ( ::osg::StateSet::*getMode_function_type)( ::GLenum ) const;
            
            StateSet_exposer.def( 
                "getMode"
                , getMode_function_type( &::osg::StateSet::getMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::StateSet::getModeList
        
            typedef ::std::map< unsigned int, unsigned int > & ( ::osg::StateSet::*getModeList_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getModeList"
                , getModeList_function_type( &::osg::StateSet::getModeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getModeList
        
            typedef ::std::map< unsigned int, unsigned int > const & ( ::osg::StateSet::*getModeList_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getModeList"
                , getModeList_function_type( &::osg::StateSet::getModeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getNestRenderBins
        
            typedef bool ( ::osg::StateSet::*getNestRenderBins_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getNestRenderBins"
                , getNestRenderBins_function_type( &::osg::StateSet::getNestRenderBins ) );
        
        }
        { //::osg::StateSet::getNumChildrenRequiringEventTraversal
        
            typedef unsigned int ( ::osg::StateSet::*getNumChildrenRequiringEventTraversal_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getNumChildrenRequiringEventTraversal"
                , getNumChildrenRequiringEventTraversal_function_type( &::osg::StateSet::getNumChildrenRequiringEventTraversal ) );
        
        }
        { //::osg::StateSet::getNumChildrenRequiringUpdateTraversal
        
            typedef unsigned int ( ::osg::StateSet::*getNumChildrenRequiringUpdateTraversal_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getNumChildrenRequiringUpdateTraversal"
                , getNumChildrenRequiringUpdateTraversal_function_type( &::osg::StateSet::getNumChildrenRequiringUpdateTraversal ) );
        
        }
        { //::osg::StateSet::getNumParents
        
            typedef unsigned int ( ::osg::StateSet::*getNumParents_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getNumParents"
                , getNumParents_function_type( &::osg::StateSet::getNumParents ) );
        
        }
        { //::osg::StateSet::getNumTextureAttributeLists
        
            typedef unsigned int ( ::osg::StateSet::*getNumTextureAttributeLists_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getNumTextureAttributeLists"
                , getNumTextureAttributeLists_function_type( &::osg::StateSet::getNumTextureAttributeLists ) );
        
        }
        { //::osg::StateSet::getNumTextureModeLists
        
            typedef unsigned int ( ::osg::StateSet::*getNumTextureModeLists_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getNumTextureModeLists"
                , getNumTextureModeLists_function_type( &::osg::StateSet::getNumTextureModeLists ) );
        
        }
        { //::osg::StateSet::getOrCreateUniform
        
            typedef ::osg::Uniform * ( ::osg::StateSet::*getOrCreateUniform_function_type)( ::std::string const &,::osg::Uniform::Type,unsigned int ) ;
            
            StateSet_exposer.def( 
                "getOrCreateUniform"
                , getOrCreateUniform_function_type( &::osg::StateSet::getOrCreateUniform )
                , ( bp::arg("name"), bp::arg("type"), bp::arg("numElements")=(unsigned int)(1) )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getParent
        
            typedef ::osg::Object * ( ::osg::StateSet::*getParent_function_type)( unsigned int ) ;
            
            StateSet_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::StateSet::getParent )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getParent
        
            typedef ::osg::Object const * ( ::osg::StateSet::*getParent_function_type)( unsigned int ) const;
            
            StateSet_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::StateSet::getParent )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getParents
        
            typedef ::std::vector< osg::Object* > const & ( ::osg::StateSet::*getParents_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::StateSet::getParents )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getParents
        
            typedef ::std::vector< osg::Object* > ( ::osg::StateSet::*getParents_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::StateSet::getParents ) );
        
        }
        { //::osg::StateSet::getRenderBinMode
        
            typedef ::osg::StateSet::RenderBinMode ( ::osg::StateSet::*getRenderBinMode_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getRenderBinMode"
                , getRenderBinMode_function_type( &::osg::StateSet::getRenderBinMode ) );
        
        }
        { //::osg::StateSet::getRenderingHint
        
            typedef int ( ::osg::StateSet::*getRenderingHint_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getRenderingHint"
                , getRenderingHint_function_type( &::osg::StateSet::getRenderingHint ) );
        
        }
        { //::osg::StateSet::getTextureAttribute
        
            typedef ::osg::StateAttribute * ( ::osg::StateSet::*getTextureAttribute_function_type)( unsigned int,::osg::StateAttribute::Type ) ;
            
            StateSet_exposer.def( 
                "getTextureAttribute"
                , getTextureAttribute_function_type( &::osg::StateSet::getTextureAttribute )
                , ( bp::arg("unit"), bp::arg("type") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getTextureAttribute
        
            typedef ::osg::StateAttribute const * ( ::osg::StateSet::*getTextureAttribute_function_type)( unsigned int,::osg::StateAttribute::Type ) const;
            
            StateSet_exposer.def( 
                "getTextureAttribute"
                , getTextureAttribute_function_type( &::osg::StateSet::getTextureAttribute )
                , ( bp::arg("unit"), bp::arg("type") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getTextureAttributeList
        
            typedef ::std::vector< std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > > & ( ::osg::StateSet::*getTextureAttributeList_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getTextureAttributeList"
                , getTextureAttributeList_function_type( &::osg::StateSet::getTextureAttributeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getTextureAttributeList
        
            typedef ::std::vector< std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > > const & ( ::osg::StateSet::*getTextureAttributeList_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getTextureAttributeList"
                , getTextureAttributeList_function_type( &::osg::StateSet::getTextureAttributeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getTextureAttributePair
        
            typedef ::std::pair< osg::ref_ptr< osg::StateAttribute >, unsigned int > const * ( ::osg::StateSet::*getTextureAttributePair_function_type)( unsigned int,::osg::StateAttribute::Type ) const;
            
            StateSet_exposer.def( 
                "getTextureAttributePair"
                , getTextureAttributePair_function_type( &::osg::StateSet::getTextureAttributePair )
                , ( bp::arg("unit"), bp::arg("type") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getTextureMode
        
            typedef unsigned int ( ::osg::StateSet::*getTextureMode_function_type)( unsigned int,::GLenum ) const;
            
            StateSet_exposer.def( 
                "getTextureMode"
                , getTextureMode_function_type( &::osg::StateSet::getTextureMode )
                , ( bp::arg("unit"), bp::arg("mode") ) );
        
        }
        { //::osg::StateSet::getTextureModeList
        
            typedef ::std::vector< std::map< unsigned int, unsigned int > > & ( ::osg::StateSet::*getTextureModeList_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getTextureModeList"
                , getTextureModeList_function_type( &::osg::StateSet::getTextureModeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getTextureModeList
        
            typedef ::std::vector< std::map< unsigned int, unsigned int > > const & ( ::osg::StateSet::*getTextureModeList_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getTextureModeList"
                , getTextureModeList_function_type( &::osg::StateSet::getTextureModeList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getUniform
        
            typedef ::osg::Uniform * ( ::osg::StateSet::*getUniform_function_type)( ::std::string const & ) ;
            
            StateSet_exposer.def( 
                "getUniform"
                , getUniform_function_type( &::osg::StateSet::getUniform )
                , ( bp::arg("name") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getUniform
        
            typedef ::osg::Uniform const * ( ::osg::StateSet::*getUniform_function_type)( ::std::string const & ) const;
            
            StateSet_exposer.def( 
                "getUniform"
                , getUniform_function_type( &::osg::StateSet::getUniform )
                , ( bp::arg("name") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getUniformList
        
            typedef ::std::map< std::string, std::pair<osg::ref_ptr<osg::Uniform>, unsigned int> > & ( ::osg::StateSet::*getUniformList_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getUniformList"
                , getUniformList_function_type( &::osg::StateSet::getUniformList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getUniformList
        
            typedef ::std::map< std::string, std::pair<osg::ref_ptr<osg::Uniform>, unsigned int> > const & ( ::osg::StateSet::*getUniformList_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getUniformList"
                , getUniformList_function_type( &::osg::StateSet::getUniformList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getUniformPair
        
            typedef ::std::pair< osg::ref_ptr< osg::Uniform >, unsigned int > const * ( ::osg::StateSet::*getUniformPair_function_type)( ::std::string const & ) const;
            
            StateSet_exposer.def( 
                "getUniformPair"
                , getUniformPair_function_type( &::osg::StateSet::getUniformPair )
                , ( bp::arg("name") )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getUpdateCallback
        
            typedef ::osg::StateSet::Callback * ( ::osg::StateSet::*getUpdateCallback_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::StateSet::getUpdateCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::getUpdateCallback
        
            typedef ::osg::StateSet::Callback const * ( ::osg::StateSet::*getUpdateCallback_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::StateSet::getUpdateCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::StateSet::isSameKindAs
        
            typedef bool ( ::osg::StateSet::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( StateSet_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            StateSet_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::StateSet::isSameKindAs)
                , default_isSameKindAs_function_type(&StateSet_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::StateSet::libraryName
        
            typedef char const * ( ::osg::StateSet::*libraryName_function_type)(  ) const;
            typedef char const * ( StateSet_wrapper::*default_libraryName_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::StateSet::libraryName)
                , default_libraryName_function_type(&StateSet_wrapper::default_libraryName) );
        
        }
        { //::osg::StateSet::merge
        
            typedef void ( ::osg::StateSet::*merge_function_type)( ::osg::StateSet const & ) ;
            
            StateSet_exposer.def( 
                "merge"
                , merge_function_type( &::osg::StateSet::merge )
                , ( bp::arg("rhs") ) );
        
        }
        StateSet_exposer.def( bp::self != bp::self );
        StateSet_exposer.def( bp::self < bp::self );
        StateSet_exposer.def( bp::self == bp::self );
        { //::osg::StateSet::releaseGLObjects
        
            typedef void ( ::osg::StateSet::*releaseGLObjects_function_type)( ::osg::State * ) const;
            typedef void ( StateSet_wrapper::*default_releaseGLObjects_function_type)( ::osg::State * ) const;
            
            StateSet_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osg::StateSet::releaseGLObjects)
                , default_releaseGLObjects_function_type(&StateSet_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osg::StateSet::removeAssociatedModes
        
            typedef void ( ::osg::StateSet::*removeAssociatedModes_function_type)( ::osg::StateAttribute const * ) ;
            
            StateSet_exposer.def( 
                "removeAssociatedModes"
                , removeAssociatedModes_function_type( &::osg::StateSet::removeAssociatedModes )
                , ( bp::arg("attribute") ) );
        
        }
        { //::osg::StateSet::removeAssociatedTextureModes
        
            typedef void ( ::osg::StateSet::*removeAssociatedTextureModes_function_type)( unsigned int,::osg::StateAttribute const * ) ;
            
            StateSet_exposer.def( 
                "removeAssociatedTextureModes"
                , removeAssociatedTextureModes_function_type( &::osg::StateSet::removeAssociatedTextureModes )
                , ( bp::arg("unit"), bp::arg("attribute") ) );
        
        }
        { //::osg::StateSet::removeAttribute
        
            typedef void ( ::osg::StateSet::*removeAttribute_function_type)( ::osg::StateAttribute::Type,unsigned int ) ;
            
            StateSet_exposer.def( 
                "removeAttribute"
                , removeAttribute_function_type( &::osg::StateSet::removeAttribute )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) ) );
        
        }
        { //::osg::StateSet::removeAttribute
        
            typedef void ( ::osg::StateSet::*removeAttribute_function_type)( ::osg::StateAttribute * ) ;
            
            StateSet_exposer.def( 
                "removeAttribute"
                , removeAttribute_function_type( &::osg::StateSet::removeAttribute )
                , ( bp::arg("attribute") ) );
        
        }
        { //::osg::StateSet::removeMode
        
            typedef void ( ::osg::StateSet::*removeMode_function_type)( ::GLenum ) ;
            
            StateSet_exposer.def( 
                "removeMode"
                , removeMode_function_type( &::osg::StateSet::removeMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::StateSet::removeTextureAttribute
        
            typedef void ( ::osg::StateSet::*removeTextureAttribute_function_type)( unsigned int,::osg::StateAttribute::Type ) ;
            
            StateSet_exposer.def( 
                "removeTextureAttribute"
                , removeTextureAttribute_function_type( &::osg::StateSet::removeTextureAttribute )
                , ( bp::arg("unit"), bp::arg("type") ) );
        
        }
        { //::osg::StateSet::removeTextureAttribute
        
            typedef void ( ::osg::StateSet::*removeTextureAttribute_function_type)( unsigned int,::osg::StateAttribute * ) ;
            
            StateSet_exposer.def( 
                "removeTextureAttribute"
                , removeTextureAttribute_function_type( &::osg::StateSet::removeTextureAttribute )
                , ( bp::arg("unit"), bp::arg("attribute") ) );
        
        }
        { //::osg::StateSet::removeTextureMode
        
            typedef void ( ::osg::StateSet::*removeTextureMode_function_type)( unsigned int,::GLenum ) ;
            
            StateSet_exposer.def( 
                "removeTextureMode"
                , removeTextureMode_function_type( &::osg::StateSet::removeTextureMode )
                , ( bp::arg("unit"), bp::arg("mode") ) );
        
        }
        { //::osg::StateSet::removeUniform
        
            typedef void ( ::osg::StateSet::*removeUniform_function_type)( ::std::string const & ) ;
            
            StateSet_exposer.def( 
                "removeUniform"
                , removeUniform_function_type( &::osg::StateSet::removeUniform )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::StateSet::removeUniform
        
            typedef void ( ::osg::StateSet::*removeUniform_function_type)( ::osg::Uniform * ) ;
            
            StateSet_exposer.def( 
                "removeUniform"
                , removeUniform_function_type( &::osg::StateSet::removeUniform )
                , ( bp::arg("uniform") ) );
        
        }
        { //::osg::StateSet::requiresEventTraversal
        
            typedef bool ( ::osg::StateSet::*requiresEventTraversal_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "requiresEventTraversal"
                , requiresEventTraversal_function_type( &::osg::StateSet::requiresEventTraversal ) );
        
        }
        { //::osg::StateSet::requiresUpdateTraversal
        
            typedef bool ( ::osg::StateSet::*requiresUpdateTraversal_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "requiresUpdateTraversal"
                , requiresUpdateTraversal_function_type( &::osg::StateSet::requiresUpdateTraversal ) );
        
        }
        { //::osg::StateSet::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateSet::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( StateSet_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            StateSet_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateSet::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&StateSet_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::StateSet::runEventCallbacks
        
            typedef void ( ::osg::StateSet::*runEventCallbacks_function_type)( ::osg::NodeVisitor * ) ;
            
            StateSet_exposer.def( 
                "runEventCallbacks"
                , runEventCallbacks_function_type( &::osg::StateSet::runEventCallbacks )
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::StateSet::runUpdateCallbacks
        
            typedef void ( ::osg::StateSet::*runUpdateCallbacks_function_type)( ::osg::NodeVisitor * ) ;
            
            StateSet_exposer.def( 
                "runUpdateCallbacks"
                , runUpdateCallbacks_function_type( &::osg::StateSet::runUpdateCallbacks )
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::StateSet::setAssociatedModes
        
            typedef void ( ::osg::StateSet::*setAssociatedModes_function_type)( ::osg::StateAttribute const *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAssociatedModes"
                , setAssociatedModes_function_type( &::osg::StateSet::setAssociatedModes )
                , ( bp::arg("attribute"), bp::arg("value") ) );
        
        }
        { //::osg::StateSet::setAssociatedTextureModes
        
            typedef void ( ::osg::StateSet::*setAssociatedTextureModes_function_type)( unsigned int,::osg::StateAttribute const *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAssociatedTextureModes"
                , setAssociatedTextureModes_function_type( &::osg::StateSet::setAssociatedTextureModes )
                , ( bp::arg("unit"), bp::arg("attribute"), bp::arg("value") ) );
        
        }
        { //::osg::StateSet::setAttribute
        
            typedef void ( ::osg::StateSet::*setAttribute_function_type)( ::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAttribute"
                , setAttribute_function_type( &::osg::StateSet::setAttribute )
                , ( bp::arg("attribute"), bp::arg("value")=(unsigned int)(OFF) ) );
        
        }
        { //::osg::StateSet::setAttributeAndModes
        
            typedef void ( ::osg::StateSet::*setAttributeAndModes_function_type)( ::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAttributeAndModes"
                , setAttributeAndModes_function_type( &::osg::StateSet::setAttributeAndModes )
                , ( bp::arg("attribute"), bp::arg("value")=(unsigned int)(ON) ) );
        
        }
        { //::osg::StateSet::setAttributeList
        
            typedef void ( ::osg::StateSet::*setAttributeList_function_type)( ::std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > & ) ;
            
            StateSet_exposer.def( 
                "setAttributeList"
                , setAttributeList_function_type( &::osg::StateSet::setAttributeList )
                , ( bp::arg("al") ) );
        
        }
        { //::osg::StateSet::setBinName
        
            typedef void ( ::osg::StateSet::*setBinName_function_type)( ::std::string const & ) ;
            
            StateSet_exposer.def( 
                "setBinName"
                , setBinName_function_type( &::osg::StateSet::setBinName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::StateSet::setBinNumber
        
            typedef void ( ::osg::StateSet::*setBinNumber_function_type)( int ) ;
            
            StateSet_exposer.def( 
                "setBinNumber"
                , setBinNumber_function_type( &::osg::StateSet::setBinNumber )
                , ( bp::arg("num") ) );
        
        }
        { //::osg::StateSet::setEventCallback
        
            typedef void ( ::osg::StateSet::*setEventCallback_function_type)( ::osg::StateSet::Callback * ) ;
            
            StateSet_exposer.def( 
                "setEventCallback"
                , setEventCallback_function_type( &::osg::StateSet::setEventCallback )
                , ( bp::arg("ac") ) );
        
        }
        { //::osg::StateSet::setGlobalDefaults
        
            typedef void ( ::osg::StateSet::*setGlobalDefaults_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "setGlobalDefaults"
                , setGlobalDefaults_function_type( &::osg::StateSet::setGlobalDefaults ) );
        
        }
        { //::osg::StateSet::setMode
        
            typedef void ( ::osg::StateSet::*setMode_function_type)( ::GLenum,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setMode"
                , setMode_function_type( &::osg::StateSet::setMode )
                , ( bp::arg("mode"), bp::arg("value") ) );
        
        }
        { //::osg::StateSet::setModeList
        
            typedef void ( ::osg::StateSet::*setModeList_function_type)( ::std::map< unsigned int, unsigned int > & ) ;
            
            StateSet_exposer.def( 
                "setModeList"
                , setModeList_function_type( &::osg::StateSet::setModeList )
                , ( bp::arg("ml") ) );
        
        }
        { //::osg::StateSet::setNestRenderBins
        
            typedef void ( ::osg::StateSet::*setNestRenderBins_function_type)( bool ) ;
            
            StateSet_exposer.def( 
                "setNestRenderBins"
                , setNestRenderBins_function_type( &::osg::StateSet::setNestRenderBins )
                , ( bp::arg("val") ) );
        
        }
        { //::osg::StateSet::setRenderBinDetails
        
            typedef void ( ::osg::StateSet::*setRenderBinDetails_function_type)( int,::std::string const &,::osg::StateSet::RenderBinMode ) ;
            
            StateSet_exposer.def( 
                "setRenderBinDetails"
                , setRenderBinDetails_function_type( &::osg::StateSet::setRenderBinDetails )
                , ( bp::arg("binNum"), bp::arg("binName"), bp::arg("mode")=::osg::StateSet::USE_RENDERBIN_DETAILS ) );
        
        }
        { //::osg::StateSet::setRenderBinMode
        
            typedef void ( ::osg::StateSet::*setRenderBinMode_function_type)( ::osg::StateSet::RenderBinMode ) ;
            
            StateSet_exposer.def( 
                "setRenderBinMode"
                , setRenderBinMode_function_type( &::osg::StateSet::setRenderBinMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::StateSet::setRenderBinToInherit
        
            typedef void ( ::osg::StateSet::*setRenderBinToInherit_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "setRenderBinToInherit"
                , setRenderBinToInherit_function_type( &::osg::StateSet::setRenderBinToInherit ) );
        
        }
        { //::osg::StateSet::setRenderingHint
        
            typedef void ( ::osg::StateSet::*setRenderingHint_function_type)( int ) ;
            
            StateSet_exposer.def( 
                "setRenderingHint"
                , setRenderingHint_function_type( &::osg::StateSet::setRenderingHint )
                , ( bp::arg("hint") ) );
        
        }
        { //::osg::StateSet::setTextureAttribute
        
            typedef void ( ::osg::StateSet::*setTextureAttribute_function_type)( unsigned int,::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setTextureAttribute"
                , setTextureAttribute_function_type( &::osg::StateSet::setTextureAttribute )
                , ( bp::arg("unit"), bp::arg("attribute"), bp::arg("value")=(unsigned int)(OFF) ) );
        
        }
        { //::osg::StateSet::setTextureAttributeAndModes
        
            typedef void ( ::osg::StateSet::*setTextureAttributeAndModes_function_type)( unsigned int,::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setTextureAttributeAndModes"
                , setTextureAttributeAndModes_function_type( &::osg::StateSet::setTextureAttributeAndModes )
                , ( bp::arg("unit"), bp::arg("attribute"), bp::arg("value")=(unsigned int)(ON) ) );
        
        }
        { //::osg::StateSet::setTextureAttributeList
        
            typedef void ( ::osg::StateSet::*setTextureAttributeList_function_type)( ::std::vector< std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > > & ) ;
            
            StateSet_exposer.def( 
                "setTextureAttributeList"
                , setTextureAttributeList_function_type( &::osg::StateSet::setTextureAttributeList )
                , ( bp::arg("tal") ) );
        
        }
        { //::osg::StateSet::setTextureMode
        
            typedef void ( ::osg::StateSet::*setTextureMode_function_type)( unsigned int,::GLenum,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setTextureMode"
                , setTextureMode_function_type( &::osg::StateSet::setTextureMode )
                , ( bp::arg("unit"), bp::arg("mode"), bp::arg("value") ) );
        
        }
        { //::osg::StateSet::setTextureModeList
        
            typedef void ( ::osg::StateSet::*setTextureModeList_function_type)( ::std::vector< std::map< unsigned int, unsigned int > > & ) ;
            
            StateSet_exposer.def( 
                "setTextureModeList"
                , setTextureModeList_function_type( &::osg::StateSet::setTextureModeList )
                , ( bp::arg("tml") ) );
        
        }
        { //::osg::StateSet::setThreadSafeRefUnref
        
            typedef void ( ::osg::StateSet::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( StateSet_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            StateSet_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::StateSet::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&StateSet_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::StateSet::setUniformList
        
            typedef void ( ::osg::StateSet::*setUniformList_function_type)( ::std::map< std::string, std::pair<osg::ref_ptr<osg::Uniform>, unsigned int> > & ) ;
            
            StateSet_exposer.def( 
                "setUniformList"
                , setUniformList_function_type( &::osg::StateSet::setUniformList )
                , ( bp::arg("al") ) );
        
        }
        { //::osg::StateSet::setUpdateCallback
        
            typedef void ( ::osg::StateSet::*setUpdateCallback_function_type)( ::osg::StateSet::Callback * ) ;
            
            StateSet_exposer.def( 
                "setUpdateCallback"
                , setUpdateCallback_function_type( &::osg::StateSet::setUpdateCallback )
                , ( bp::arg("ac") ) );
        
        }
        { //::osg::StateSet::useRenderBinDetails
        
            typedef bool ( ::osg::StateSet::*useRenderBinDetails_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "useRenderBinDetails"
                , useRenderBinDetails_function_type( &::osg::StateSet::useRenderBinDetails ) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( StateSet_wrapper::*default_getUserData_function_type)(  ) ;
            
            StateSet_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&StateSet_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( StateSet_wrapper::*default_getUserData_function_type)(  ) const;
            
            StateSet_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&StateSet_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( StateSet_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            StateSet_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&StateSet_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            StateSet_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( StateSet_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            StateSet_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&StateSet_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
