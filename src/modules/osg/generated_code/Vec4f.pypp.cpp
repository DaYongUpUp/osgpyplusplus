// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec4f.pypp.hpp"

namespace bp = boost::python;

void register_Vec4f_class(){

    { //::osg::Vec4f
        typedef bp::class_< osg::Vec4f > Vec4f_exposer_t;
        Vec4f_exposer_t Vec4f_exposer = Vec4f_exposer_t( "Vec4f", bp::init< >() );
        bp::scope Vec4f_scope( Vec4f_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec4f::num_components;
        Vec4f_exposer.def( bp::init< float, float, float, float >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") )) );
        Vec4f_exposer.def( bp::init< osg::Vec3f const &, float >(( bp::arg("v3"), bp::arg("w") )) );
        { //::osg::Vec4f::a
        
            typedef float & ( ::osg::Vec4f::*a_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "a"
                , a_function_type( &::osg::Vec4f::a )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::a
        
            typedef float ( ::osg::Vec4f::*a_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "a"
                , a_function_type( &::osg::Vec4f::a ) );
        
        }
        { //::osg::Vec4f::asABGR
        
            typedef unsigned int ( ::osg::Vec4f::*asABGR_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "asABGR"
                , asABGR_function_type( &::osg::Vec4f::asABGR ) );
        
        }
        { //::osg::Vec4f::asRGBA
        
            typedef unsigned int ( ::osg::Vec4f::*asRGBA_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "asRGBA"
                , asRGBA_function_type( &::osg::Vec4f::asRGBA ) );
        
        }
        { //::osg::Vec4f::b
        
            typedef float & ( ::osg::Vec4f::*b_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec4f::b )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::b
        
            typedef float ( ::osg::Vec4f::*b_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec4f::b ) );
        
        }
        { //::osg::Vec4f::g
        
            typedef float & ( ::osg::Vec4f::*g_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec4f::g )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::g
        
            typedef float ( ::osg::Vec4f::*g_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec4f::g ) );
        
        }
        { //::osg::Vec4f::isNaN
        
            typedef bool ( ::osg::Vec4f::*isNaN_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "isNaN"
                , isNaN_function_type( &::osg::Vec4f::isNaN ) );
        
        }
        { //::osg::Vec4f::length
        
            typedef float ( ::osg::Vec4f::*length_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "length"
                , length_function_type( &::osg::Vec4f::length ) );
        
        }
        { //::osg::Vec4f::length2
        
            typedef float ( ::osg::Vec4f::*length2_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "length2"
                , length2_function_type( &::osg::Vec4f::length2 ) );
        
        }
        { //::osg::Vec4f::normalize
        
            typedef float ( ::osg::Vec4f::*normalize_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "normalize"
                , normalize_function_type( &::osg::Vec4f::normalize ) );
        
        }
        Vec4f_exposer.def( bp::self != bp::self );
        Vec4f_exposer.def( bp::self * bp::self );
        Vec4f_exposer.def( bp::self * bp::other< float >() );
        Vec4f_exposer.def( bp::self *= bp::other< float >() );
        Vec4f_exposer.def( bp::self + bp::self );
        Vec4f_exposer.def( bp::self += bp::self );
        Vec4f_exposer.def( bp::self - bp::self );
        Vec4f_exposer.def( -bp::self );
        Vec4f_exposer.def( bp::self -= bp::self );
        Vec4f_exposer.def( bp::self / bp::other< float >() );
        Vec4f_exposer.def( bp::self /= bp::other< float >() );
        Vec4f_exposer.def( bp::self < bp::self );
        Vec4f_exposer.def( bp::self == bp::self );
        { //::osg::Vec4f::operator[]
        
            typedef float & ( ::osg::Vec4f::*__getitem___function_type)( unsigned int ) ;
            
            Vec4f_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec4f::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::operator[]
        
            typedef float ( ::osg::Vec4f::*__getitem___function_type)( unsigned int ) const;
            
            Vec4f_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec4f::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec4f::r
        
            typedef float & ( ::osg::Vec4f::*r_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec4f::r )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::r
        
            typedef float ( ::osg::Vec4f::*r_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec4f::r ) );
        
        }
        { //::osg::Vec4f::set
        
            typedef void ( ::osg::Vec4f::*set_function_type)( float,float,float,float ) ;
            
            Vec4f_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec4f::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") ) );
        
        }
        { //::osg::Vec4f::valid
        
            typedef bool ( ::osg::Vec4f::*valid_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "valid"
                , valid_function_type( &::osg::Vec4f::valid ) );
        
        }
        { //::osg::Vec4f::w
        
            typedef float & ( ::osg::Vec4f::*w_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "w"
                , w_function_type( &::osg::Vec4f::w )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::w
        
            typedef float ( ::osg::Vec4f::*w_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "w"
                , w_function_type( &::osg::Vec4f::w ) );
        
        }
        { //::osg::Vec4f::x
        
            typedef float & ( ::osg::Vec4f::*x_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec4f::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::x
        
            typedef float ( ::osg::Vec4f::*x_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec4f::x ) );
        
        }
        { //::osg::Vec4f::y
        
            typedef float & ( ::osg::Vec4f::*y_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec4f::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::y
        
            typedef float ( ::osg::Vec4f::*y_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec4f::y ) );
        
        }
        { //::osg::Vec4f::z
        
            typedef float & ( ::osg::Vec4f::*z_function_type)(  ) ;
            
            Vec4f_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec4f::z )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4f::z
        
            typedef float ( ::osg::Vec4f::*z_function_type)(  ) const;
            
            Vec4f_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec4f::z ) );
        
        }
        Vec4f_exposer.def( bp::self * bp::other< osg::Matrixf >() );
        Vec4f_exposer.def( bp::self * bp::other< osg::Matrixd >() );
        Vec4f_exposer.def( bp::self * bp::other< osg::Vec3d >() );
        Vec4f_exposer.def( bp::self * bp::other< osg::Vec3f >() );
    }

}
