// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "graphicscontext.pypp.hpp"

namespace bp = boost::python;

struct GraphicsContext_wrapper : osg::GraphicsContext, bp::wrapper< osg::GraphicsContext > {

    struct ResizedCallback_wrapper : osg::GraphicsContext::ResizedCallback, bp::wrapper< osg::GraphicsContext::ResizedCallback > {
    
        ResizedCallback_wrapper()
        : osg::GraphicsContext::ResizedCallback()
          , bp::wrapper< osg::GraphicsContext::ResizedCallback >(){
            // null constructor
            
        }
    
        virtual void resizedImplementation( ::osg::GraphicsContext * gc, int x, int y, int width, int height ){
            bp::override func_resizedImplementation = this->get_override( "resizedImplementation" );
            func_resizedImplementation( boost::python::ptr(gc), x, y, width, height );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct SwapCallback_wrapper : osg::GraphicsContext::SwapCallback, bp::wrapper< osg::GraphicsContext::SwapCallback > {
    
        SwapCallback_wrapper()
        : osg::GraphicsContext::SwapCallback()
          , bp::wrapper< osg::GraphicsContext::SwapCallback >(){
            // null constructor
            
        }
    
        virtual void swapBuffersImplementation( ::osg::GraphicsContext * gc ){
            bp::override func_swapBuffersImplementation = this->get_override( "swapBuffersImplementation" );
            func_swapBuffersImplementation( boost::python::ptr(gc) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct Traits_wrapper : osg::GraphicsContext::Traits, bp::wrapper< osg::GraphicsContext::Traits > {
    
        Traits_wrapper(::osg::DisplaySettings * ds=0 )
        : osg::GraphicsContext::Traits( boost::python::ptr(ds) )
          , bp::wrapper< osg::GraphicsContext::Traits >(){
            // constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct WindowingSystemInterface_wrapper : osg::GraphicsContext::WindowingSystemInterface, bp::wrapper< osg::GraphicsContext::WindowingSystemInterface > {
    
        WindowingSystemInterface_wrapper()
        : osg::GraphicsContext::WindowingSystemInterface()
          , bp::wrapper< osg::GraphicsContext::WindowingSystemInterface >(){
            // null constructor
            
        }
    
        virtual ::osg::GraphicsContext * createGraphicsContext( ::osg::GraphicsContext::Traits * traits ){
            bp::override func_createGraphicsContext = this->get_override( "createGraphicsContext" );
            return func_createGraphicsContext( boost::python::ptr(traits) );
        }
    
        virtual void enumerateScreenSettings( ::osg::GraphicsContext::ScreenIdentifier const & screenIdentifier, ::std::vector< osg::GraphicsContext::ScreenSettings > & resolutionList ){
            bp::override func_enumerateScreenSettings = this->get_override( "enumerateScreenSettings" );
            func_enumerateScreenSettings( boost::ref(screenIdentifier), boost::ref(resolutionList) );
        }
    
        virtual unsigned int getNumScreens( ::osg::GraphicsContext::ScreenIdentifier const & screenIdentifier=osg::GraphicsContext::ScreenIdentifier() ){
            bp::override func_getNumScreens = this->get_override( "getNumScreens" );
            return func_getNumScreens( boost::ref(screenIdentifier) );
        }
    
        virtual void getScreenSettings( ::osg::GraphicsContext::ScreenIdentifier const & screenIdentifier, ::osg::GraphicsContext::ScreenSettings & resolution ){
            bp::override func_getScreenSettings = this->get_override( "getScreenSettings" );
            func_getScreenSettings( boost::ref(screenIdentifier), boost::ref(resolution) );
        }
    
        virtual bool setScreenSettings( ::osg::GraphicsContext::ScreenIdentifier const & arg0, ::osg::GraphicsContext::ScreenSettings const & arg1 ) {
            if( bp::override func_setScreenSettings = this->get_override( "setScreenSettings" ) )
                return func_setScreenSettings( boost::ref(arg0), boost::ref(arg1) );
            else{
                return this->osg::GraphicsContext::WindowingSystemInterface::setScreenSettings( boost::ref(arg0), boost::ref(arg1) );
            }
        }
        
        bool default_setScreenSettings( ::osg::GraphicsContext::ScreenIdentifier const & arg0, ::osg::GraphicsContext::ScreenSettings const & arg1 ) {
            return osg::GraphicsContext::WindowingSystemInterface::setScreenSettings( boost::ref(arg0), boost::ref(arg1) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    virtual void bindPBufferToTextureImplementation( ::GLenum buffer ){
        bp::override func_bindPBufferToTextureImplementation = this->get_override( "bindPBufferToTextureImplementation" );
        func_bindPBufferToTextureImplementation( buffer );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::GraphicsContext::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::GraphicsContext::className( );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->osg::GraphicsContext::clear(  );
        }
    }
    
    void default_clear(  ) {
        osg::GraphicsContext::clear( );
    }

    virtual void closeImplementation(  ){
        bp::override func_closeImplementation = this->get_override( "closeImplementation" );
        func_closeImplementation(  );
    }

    virtual bool isRealizedImplementation(  ) const {
        bp::override func_isRealizedImplementation = this->get_override( "isRealizedImplementation" );
        return func_isRealizedImplementation(  );
    }

    virtual bool isSameKindAs( ::osg::Object const * object ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(object) );
        else{
            return this->osg::GraphicsContext::isSameKindAs( boost::python::ptr(object) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * object ) const  {
        return osg::GraphicsContext::isSameKindAs( boost::python::ptr(object) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::GraphicsContext::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::GraphicsContext::libraryName( );
    }

    virtual bool makeContextCurrentImplementation( ::osg::GraphicsContext * readContext ){
        bp::override func_makeContextCurrentImplementation = this->get_override( "makeContextCurrentImplementation" );
        return func_makeContextCurrentImplementation( boost::python::ptr(readContext) );
    }

    virtual bool makeCurrentImplementation(  ){
        bp::override func_makeCurrentImplementation = this->get_override( "makeCurrentImplementation" );
        return func_makeCurrentImplementation(  );
    }

    virtual bool realizeImplementation(  ){
        bp::override func_realizeImplementation = this->get_override( "realizeImplementation" );
        return func_realizeImplementation(  );
    }

    virtual bool releaseContextImplementation(  ){
        bp::override func_releaseContextImplementation = this->get_override( "releaseContextImplementation" );
        return func_releaseContextImplementation(  );
    }

    virtual void resizedImplementation( int x, int y, int width, int height ) {
        if( bp::override func_resizedImplementation = this->get_override( "resizedImplementation" ) )
            func_resizedImplementation( x, y, width, height );
        else{
            this->osg::GraphicsContext::resizedImplementation( x, y, width, height );
        }
    }
    
    void default_resizedImplementation( int x, int y, int width, int height ) {
        osg::GraphicsContext::resizedImplementation( x, y, width, height );
    }

    virtual void runOperations(  ) {
        if( bp::override func_runOperations = this->get_override( "runOperations" ) )
            func_runOperations(  );
        else{
            this->osg::GraphicsContext::runOperations(  );
        }
    }
    
    void default_runOperations(  ) {
        osg::GraphicsContext::runOperations( );
    }

    virtual void swapBuffersImplementation(  ){
        bp::override func_swapBuffersImplementation = this->get_override( "swapBuffersImplementation" );
        func_swapBuffersImplementation(  );
    }

    virtual bool valid(  ) const {
        bp::override func_valid = this->get_override( "valid" );
        return func_valid(  );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_GraphicsContext_class(){

    { //::osg::GraphicsContext
        typedef bp::class_< GraphicsContext_wrapper, bp::bases< osg::Object >, boost::noncopyable > GraphicsContext_exposer_t;
        GraphicsContext_exposer_t GraphicsContext_exposer = GraphicsContext_exposer_t( "GraphicsContext", bp::no_init );
        bp::scope GraphicsContext_scope( GraphicsContext_exposer );
        bp::class_< GraphicsContext_wrapper::ResizedCallback_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "ResizedCallback" )    
            .def( 
                "resizedImplementation"
                , bp::pure_virtual( (void ( ::osg::GraphicsContext::ResizedCallback::* )( ::osg::GraphicsContext *,int,int,int,int ))(&::osg::GraphicsContext::ResizedCallback::resizedImplementation) )
                , ( bp::arg("gc"), bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( GraphicsContext_wrapper::ResizedCallback_wrapper::* )( bool ))(&GraphicsContext_wrapper::ResizedCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        { //::osg::GraphicsContext::ScreenIdentifier
            typedef bp::class_< osg::GraphicsContext::ScreenIdentifier > ScreenIdentifier_exposer_t;
            ScreenIdentifier_exposer_t ScreenIdentifier_exposer = ScreenIdentifier_exposer_t( "ScreenIdentifier", bp::init< >() );
            bp::scope ScreenIdentifier_scope( ScreenIdentifier_exposer );
            ScreenIdentifier_exposer.def( bp::init< int >(( bp::arg("in_screenNum") )) );
            bp::implicitly_convertible< int, osg::GraphicsContext::ScreenIdentifier >();
            ScreenIdentifier_exposer.def( bp::init< std::string const &, int, int >(( bp::arg("in_hostName"), bp::arg("in_displayNum"), bp::arg("in_screenNum") )) );
            { //::osg::GraphicsContext::ScreenIdentifier::displayName
            
                typedef ::std::string ( ::osg::GraphicsContext::ScreenIdentifier::*displayName_function_type)(  ) const;
                
                ScreenIdentifier_exposer.def( 
                    "displayName"
                    , displayName_function_type( &::osg::GraphicsContext::ScreenIdentifier::displayName ) );
            
            }
            { //::osg::GraphicsContext::ScreenIdentifier::readDISPLAY
            
                typedef void ( ::osg::GraphicsContext::ScreenIdentifier::*readDISPLAY_function_type)(  ) ;
                
                ScreenIdentifier_exposer.def( 
                    "readDISPLAY"
                    , readDISPLAY_function_type( &::osg::GraphicsContext::ScreenIdentifier::readDISPLAY ) );
            
            }
            { //::osg::GraphicsContext::ScreenIdentifier::setScreenIdentifier
            
                typedef void ( ::osg::GraphicsContext::ScreenIdentifier::*setScreenIdentifier_function_type)( ::std::string const & ) ;
                
                ScreenIdentifier_exposer.def( 
                    "setScreenIdentifier"
                    , setScreenIdentifier_function_type( &::osg::GraphicsContext::ScreenIdentifier::setScreenIdentifier )
                    , ( bp::arg("displayName") ) );
            
            }
            { //::osg::GraphicsContext::ScreenIdentifier::setUndefinedScreenDetailsToDefaultScreen
            
                typedef void ( ::osg::GraphicsContext::ScreenIdentifier::*setUndefinedScreenDetailsToDefaultScreen_function_type)(  ) ;
                
                ScreenIdentifier_exposer.def( 
                    "setUndefinedScreenDetailsToDefaultScreen"
                    , setUndefinedScreenDetailsToDefaultScreen_function_type( &::osg::GraphicsContext::ScreenIdentifier::setUndefinedScreenDetailsToDefaultScreen ) );
            
            }
            ScreenIdentifier_exposer.def_readwrite( "displayNum", &osg::GraphicsContext::ScreenIdentifier::displayNum );
            ScreenIdentifier_exposer.def_readwrite( "hostName", &osg::GraphicsContext::ScreenIdentifier::hostName );
            ScreenIdentifier_exposer.def_readwrite( "screenNum", &osg::GraphicsContext::ScreenIdentifier::screenNum );
        }
        bp::class_< osg::GraphicsContext::ScreenSettings >( "ScreenSettings", bp::init< >() )    
            .def( bp::init< int, int, bp::optional< double, unsigned int > >(( bp::arg("width"), bp::arg("height"), bp::arg("refreshRate")=0, bp::arg("colorDepth")=(unsigned int)(0) )) )    
            .def_readwrite( "colorDepth", &osg::GraphicsContext::ScreenSettings::colorDepth )    
            .def_readwrite( "height", &osg::GraphicsContext::ScreenSettings::height )    
            .def_readwrite( "refreshRate", &osg::GraphicsContext::ScreenSettings::refreshRate )    
            .def_readwrite( "width", &osg::GraphicsContext::ScreenSettings::width );
        bp::class_< GraphicsContext_wrapper::SwapCallback_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "SwapCallback" )    
            .def( 
                "swapBuffersImplementation"
                , bp::pure_virtual( (void ( ::osg::GraphicsContext::SwapCallback::* )( ::osg::GraphicsContext * ))(&::osg::GraphicsContext::SwapCallback::swapBuffersImplementation) )
                , ( bp::arg("gc") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( GraphicsContext_wrapper::SwapCallback_wrapper::* )( bool ))(&GraphicsContext_wrapper::SwapCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        { //::osg::GraphicsContext::Traits
            typedef bp::class_< GraphicsContext_wrapper::Traits_wrapper, bp::bases< osg::Referenced, osg::GraphicsContext::ScreenIdentifier >, boost::noncopyable > Traits_exposer_t;
            Traits_exposer_t Traits_exposer = Traits_exposer_t( "Traits", bp::init< bp::optional< osg::DisplaySettings * > >(( bp::arg("ds")=bp::object() )) );
            bp::scope Traits_scope( Traits_exposer );
            bp::implicitly_convertible< osg::DisplaySettings *, osg::GraphicsContext::Traits >();
            { //::osg::GraphicsContext::Traits::getContextVersion
            
                typedef bool ( ::osg::GraphicsContext::Traits::*getContextVersion_function_type)( unsigned int &,unsigned int & ) const;
                
                Traits_exposer.def( 
                    "getContextVersion"
                    , getContextVersion_function_type( &::osg::GraphicsContext::Traits::getContextVersion )
                    , ( bp::arg("major"), bp::arg("minor") ) );
            
            }
            Traits_exposer.def_readwrite( "alpha", &osg::GraphicsContext::Traits::alpha );
            Traits_exposer.def_readwrite( "blue", &osg::GraphicsContext::Traits::blue );
            Traits_exposer.def_readwrite( "depth", &osg::GraphicsContext::Traits::depth );
            Traits_exposer.def_readwrite( "doubleBuffer", &osg::GraphicsContext::Traits::doubleBuffer );
            Traits_exposer.def_readwrite( "face", &osg::GraphicsContext::Traits::face );
            Traits_exposer.def_readwrite( "format", &osg::GraphicsContext::Traits::format );
            Traits_exposer.def_readwrite( "glContextFlags", &osg::GraphicsContext::Traits::glContextFlags );
            Traits_exposer.def_readwrite( "glContextProfileMask", &osg::GraphicsContext::Traits::glContextProfileMask );
            Traits_exposer.def_readwrite( "glContextVersion", &osg::GraphicsContext::Traits::glContextVersion );
            Traits_exposer.def_readwrite( "green", &osg::GraphicsContext::Traits::green );
            Traits_exposer.def_readwrite( "height", &osg::GraphicsContext::Traits::height );
            Traits_exposer.def_readwrite( "inheritedWindowData", &osg::GraphicsContext::Traits::inheritedWindowData );
            Traits_exposer.def_readwrite( "level", &osg::GraphicsContext::Traits::level );
            Traits_exposer.def_readwrite( "mipMapGeneration", &osg::GraphicsContext::Traits::mipMapGeneration );
            Traits_exposer.def_readwrite( "overrideRedirect", &osg::GraphicsContext::Traits::overrideRedirect );
            Traits_exposer.def_readwrite( "pbuffer", &osg::GraphicsContext::Traits::pbuffer );
            Traits_exposer.def_readwrite( "quadBufferStereo", &osg::GraphicsContext::Traits::quadBufferStereo );
            Traits_exposer.def_readwrite( "red", &osg::GraphicsContext::Traits::red );
            Traits_exposer.def_readwrite( "sampleBuffers", &osg::GraphicsContext::Traits::sampleBuffers );
            Traits_exposer.def_readwrite( "samples", &osg::GraphicsContext::Traits::samples );
            Traits_exposer.def_readwrite( "setInheritedWindowPixelFormat", &osg::GraphicsContext::Traits::setInheritedWindowPixelFormat );
            Traits_exposer.def_readwrite( "sharedContext", &osg::GraphicsContext::Traits::sharedContext );
            Traits_exposer.def_readwrite( "stencil", &osg::GraphicsContext::Traits::stencil );
            Traits_exposer.def_readwrite( "supportsResize", &osg::GraphicsContext::Traits::supportsResize );
            Traits_exposer.def_readwrite( "swapBarrier", &osg::GraphicsContext::Traits::swapBarrier );
            Traits_exposer.def_readwrite( "swapGroup", &osg::GraphicsContext::Traits::swapGroup );
            Traits_exposer.def_readwrite( "swapGroupEnabled", &osg::GraphicsContext::Traits::swapGroupEnabled );
            Traits_exposer.def_readwrite( "swapMethod", &osg::GraphicsContext::Traits::swapMethod );
            Traits_exposer.def_readwrite( "target", &osg::GraphicsContext::Traits::target );
            Traits_exposer.def_readwrite( "useCursor", &osg::GraphicsContext::Traits::useCursor );
            Traits_exposer.def_readwrite( "useMultiThreadedOpenGLEngine", &osg::GraphicsContext::Traits::useMultiThreadedOpenGLEngine );
            Traits_exposer.def_readwrite( "vsync", &osg::GraphicsContext::Traits::vsync );
            Traits_exposer.def_readwrite( "width", &osg::GraphicsContext::Traits::width );
            Traits_exposer.def_readwrite( "windowDecoration", &osg::GraphicsContext::Traits::windowDecoration );
            Traits_exposer.def_readwrite( "windowName", &osg::GraphicsContext::Traits::windowName );
            Traits_exposer.def_readwrite( "x", &osg::GraphicsContext::Traits::x );
            Traits_exposer.def_readwrite( "y", &osg::GraphicsContext::Traits::y );
            { //::osg::Referenced::setThreadSafeRefUnref
            
                typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
                typedef void ( GraphicsContext_wrapper::Traits_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
                
                Traits_exposer.def( 
                    "setThreadSafeRefUnref"
                    , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                    , default_setThreadSafeRefUnref_function_type(&GraphicsContext_wrapper::Traits_wrapper::default_setThreadSafeRefUnref)
                    , ( bp::arg("threadSafe") ) );
            
            }
        }
        bp::class_< GraphicsContext_wrapper::WindowingSystemInterface_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "WindowingSystemInterface" )    
            .def( 
                "createGraphicsContext"
                , bp::pure_virtual( (::osg::GraphicsContext * ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::Traits * ))(&::osg::GraphicsContext::WindowingSystemInterface::createGraphicsContext) )
                , ( bp::arg("traits") )
                    /* undefined call policies */ )    
            .def( 
                "enumerateScreenSettings"
                , bp::pure_virtual( (void ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::ScreenIdentifier const &,::std::vector< osg::GraphicsContext::ScreenSettings > & ))(&::osg::GraphicsContext::WindowingSystemInterface::enumerateScreenSettings) )
                , ( bp::arg("screenIdentifier"), bp::arg("resolutionList") ) )    
            .def( 
                "getNumScreens"
                , bp::pure_virtual( (unsigned int ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::ScreenIdentifier const & ))(&::osg::GraphicsContext::WindowingSystemInterface::getNumScreens) )
                , ( bp::arg("screenIdentifier")=osg::GraphicsContext::ScreenIdentifier() ) )    
            .def( 
                "getScreenResolution"
                , (void ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::ScreenIdentifier const &,unsigned int &,unsigned int & ))( &::osg::GraphicsContext::WindowingSystemInterface::getScreenResolution )
                , ( bp::arg("screenIdentifier"), bp::arg("width"), bp::arg("height") ) )    
            .def( 
                "getScreenSettings"
                , bp::pure_virtual( (void ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::ScreenIdentifier const &,::osg::GraphicsContext::ScreenSettings & ))(&::osg::GraphicsContext::WindowingSystemInterface::getScreenSettings) )
                , ( bp::arg("screenIdentifier"), bp::arg("resolution") ) )    
            .def( 
                "setScreenRefreshRate"
                , (bool ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::ScreenIdentifier const &,double ))( &::osg::GraphicsContext::WindowingSystemInterface::setScreenRefreshRate )
                , ( bp::arg("screenIdentifier"), bp::arg("refreshRate") ) )    
            .def( 
                "setScreenResolution"
                , (bool ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::ScreenIdentifier const &,unsigned int,unsigned int ))( &::osg::GraphicsContext::WindowingSystemInterface::setScreenResolution )
                , ( bp::arg("screenIdentifier"), bp::arg("width"), bp::arg("height") ) )    
            .def( 
                "setScreenSettings"
                , (bool ( ::osg::GraphicsContext::WindowingSystemInterface::* )( ::osg::GraphicsContext::ScreenIdentifier const &,::osg::GraphicsContext::ScreenSettings const & ))(&::osg::GraphicsContext::WindowingSystemInterface::setScreenSettings)
                , (bool ( GraphicsContext_wrapper::WindowingSystemInterface_wrapper::* )( ::osg::GraphicsContext::ScreenIdentifier const &,::osg::GraphicsContext::ScreenSettings const & ))(&GraphicsContext_wrapper::WindowingSystemInterface_wrapper::default_setScreenSettings)
                , ( bp::arg("arg0"), bp::arg("arg1") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( GraphicsContext_wrapper::WindowingSystemInterface_wrapper::* )( bool ))(&GraphicsContext_wrapper::WindowingSystemInterface_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        { //::osg::GraphicsContext::add
        
            typedef void ( ::osg::GraphicsContext::*add_function_type)( ::osg::Operation * ) ;
            
            GraphicsContext_exposer.def( 
                "add"
                , add_function_type( &::osg::GraphicsContext::add )
                , ( bp::arg("operation") ) );
        
        }
        { //::osg::GraphicsContext::bindPBufferToTexture
        
            typedef void ( ::osg::GraphicsContext::*bindPBufferToTexture_function_type)( ::GLenum ) ;
            
            GraphicsContext_exposer.def( 
                "bindPBufferToTexture"
                , bindPBufferToTexture_function_type( &::osg::GraphicsContext::bindPBufferToTexture )
                , ( bp::arg("buffer") ) );
        
        }
        { //::osg::GraphicsContext::bindPBufferToTextureImplementation
        
            typedef void ( ::osg::GraphicsContext::*bindPBufferToTextureImplementation_function_type)( ::GLenum ) ;
            
            GraphicsContext_exposer.def( 
                "bindPBufferToTextureImplementation"
                , bp::pure_virtual( bindPBufferToTextureImplementation_function_type(&::osg::GraphicsContext::bindPBufferToTextureImplementation) )
                , ( bp::arg("buffer") ) );
        
        }
        { //::osg::GraphicsContext::className
        
            typedef char const * ( ::osg::GraphicsContext::*className_function_type)(  ) const;
            typedef char const * ( GraphicsContext_wrapper::*default_className_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "className"
                , className_function_type(&::osg::GraphicsContext::className)
                , default_className_function_type(&GraphicsContext_wrapper::default_className) );
        
        }
        { //::osg::GraphicsContext::clear
        
            typedef void ( ::osg::GraphicsContext::*clear_function_type)(  ) ;
            typedef void ( GraphicsContext_wrapper::*default_clear_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "clear"
                , clear_function_type(&::osg::GraphicsContext::clear)
                , default_clear_function_type(&GraphicsContext_wrapper::default_clear) );
        
        }
        { //::osg::GraphicsContext::close
        
            typedef void ( ::osg::GraphicsContext::*close_function_type)( bool ) ;
            
            GraphicsContext_exposer.def( 
                "close"
                , close_function_type( &::osg::GraphicsContext::close )
                , ( bp::arg("callCloseImplementation")=(bool)(true) ) );
        
        }
        { //::osg::GraphicsContext::closeImplementation
        
            typedef void ( ::osg::GraphicsContext::*closeImplementation_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "closeImplementation"
                , bp::pure_virtual( closeImplementation_function_type(&::osg::GraphicsContext::closeImplementation) ) );
        
        }
        { //::osg::GraphicsContext::createGraphicsContext
        
            typedef ::osg::GraphicsContext * ( *createGraphicsContext_function_type )( ::osg::GraphicsContext::Traits * );
            
            GraphicsContext_exposer.def( 
                "createGraphicsContext"
                , createGraphicsContext_function_type( &::osg::GraphicsContext::createGraphicsContext )
                , ( bp::arg("traits") )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::createGraphicsThread
        
            typedef void ( ::osg::GraphicsContext::*createGraphicsThread_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "createGraphicsThread"
                , createGraphicsThread_function_type( &::osg::GraphicsContext::createGraphicsThread ) );
        
        }
        { //::osg::GraphicsContext::createNewContextID
        
            typedef unsigned int ( *createNewContextID_function_type )(  );
            
            GraphicsContext_exposer.def( 
                "createNewContextID"
                , createNewContextID_function_type( &::osg::GraphicsContext::createNewContextID ) );
        
        }
        { //::osg::GraphicsContext::decrementContextIDUsageCount
        
            typedef void ( *decrementContextIDUsageCount_function_type )( unsigned int );
            
            GraphicsContext_exposer.def( 
                "decrementContextIDUsageCount"
                , decrementContextIDUsageCount_function_type( &::osg::GraphicsContext::decrementContextIDUsageCount )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::GraphicsContext::getAllRegisteredGraphicsContexts
        
            typedef ::std::vector< osg::GraphicsContext* > ( *getAllRegisteredGraphicsContexts_function_type )(  );
            
            GraphicsContext_exposer.def( 
                "getAllRegisteredGraphicsContexts"
                , getAllRegisteredGraphicsContexts_function_type( &::osg::GraphicsContext::getAllRegisteredGraphicsContexts ) );
        
        }
        { //::osg::GraphicsContext::getCameras
        
            typedef ::std::list< osg::Camera* > & ( ::osg::GraphicsContext::*getCameras_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getCameras"
                , getCameras_function_type( &::osg::GraphicsContext::getCameras )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::GraphicsContext::getCameras
        
            typedef ::std::list< osg::Camera* > const & ( ::osg::GraphicsContext::*getCameras_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getCameras"
                , getCameras_function_type( &::osg::GraphicsContext::getCameras )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::GraphicsContext::getClearColor
        
            typedef ::osg::Vec4 const & ( ::osg::GraphicsContext::*getClearColor_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getClearColor"
                , getClearColor_function_type( &::osg::GraphicsContext::getClearColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::GraphicsContext::getClearMask
        
            typedef ::GLbitfield ( ::osg::GraphicsContext::*getClearMask_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getClearMask"
                , getClearMask_function_type( &::osg::GraphicsContext::getClearMask ) );
        
        }
        { //::osg::GraphicsContext::getCompileContext
        
            typedef ::osg::GraphicsContext * ( *getCompileContext_function_type )( unsigned int );
            
            GraphicsContext_exposer.def( 
                "getCompileContext"
                , getCompileContext_function_type( &::osg::GraphicsContext::getCompileContext )
                , ( bp::arg("contextID") )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getCurrentOperation
        
            typedef ::osg::Operation * ( ::osg::GraphicsContext::*getCurrentOperation_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getCurrentOperation"
                , getCurrentOperation_function_type( &::osg::GraphicsContext::getCurrentOperation )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getDefaultFboId
        
            typedef ::GLuint ( ::osg::GraphicsContext::*getDefaultFboId_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getDefaultFboId"
                , getDefaultFboId_function_type( &::osg::GraphicsContext::getDefaultFboId ) );
        
        }
        { //::osg::GraphicsContext::getGraphicsThread
        
            typedef ::osg::GraphicsThread * ( ::osg::GraphicsContext::*getGraphicsThread_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getGraphicsThread"
                , getGraphicsThread_function_type( &::osg::GraphicsContext::getGraphicsThread )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getGraphicsThread
        
            typedef ::osg::GraphicsThread const * ( ::osg::GraphicsContext::*getGraphicsThread_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getGraphicsThread"
                , getGraphicsThread_function_type( &::osg::GraphicsContext::getGraphicsThread )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getMaxContextID
        
            typedef unsigned int ( *getMaxContextID_function_type )(  );
            
            GraphicsContext_exposer.def( 
                "getMaxContextID"
                , getMaxContextID_function_type( &::osg::GraphicsContext::getMaxContextID ) );
        
        }
        { //::osg::GraphicsContext::getOperationsBlock
        
            typedef ::osg::RefBlock * ( ::osg::GraphicsContext::*getOperationsBlock_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getOperationsBlock"
                , getOperationsBlock_function_type( &::osg::GraphicsContext::getOperationsBlock )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getOperationsMutex
        
            typedef ::OpenThreads::Mutex * ( ::osg::GraphicsContext::*getOperationsMutex_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getOperationsMutex"
                , getOperationsMutex_function_type( &::osg::GraphicsContext::getOperationsMutex )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getOperationsQueue
        
            typedef ::std::list< osg::ref_ptr<osg::Operation> > & ( ::osg::GraphicsContext::*getOperationsQueue_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getOperationsQueue"
                , getOperationsQueue_function_type( &::osg::GraphicsContext::getOperationsQueue )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::GraphicsContext::getOrCreateCompileContext
        
            typedef ::osg::GraphicsContext * ( *getOrCreateCompileContext_function_type )( unsigned int );
            
            GraphicsContext_exposer.def( 
                "getOrCreateCompileContext"
                , getOrCreateCompileContext_function_type( &::osg::GraphicsContext::getOrCreateCompileContext )
                , ( bp::arg("contextID") )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getRegisteredGraphicsContexts
        
            typedef ::std::vector< osg::GraphicsContext* > ( *getRegisteredGraphicsContexts_function_type )( unsigned int );
            
            GraphicsContext_exposer.def( 
                "getRegisteredGraphicsContexts"
                , getRegisteredGraphicsContexts_function_type( &::osg::GraphicsContext::getRegisteredGraphicsContexts )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::GraphicsContext::getResizedCallback
        
            typedef ::osg::GraphicsContext::ResizedCallback * ( ::osg::GraphicsContext::*getResizedCallback_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getResizedCallback"
                , getResizedCallback_function_type( &::osg::GraphicsContext::getResizedCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getResizedCallback
        
            typedef ::osg::GraphicsContext::ResizedCallback const * ( ::osg::GraphicsContext::*getResizedCallback_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getResizedCallback"
                , getResizedCallback_function_type( &::osg::GraphicsContext::getResizedCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getState
        
            typedef ::osg::State * ( ::osg::GraphicsContext::*getState_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getState"
                , getState_function_type( &::osg::GraphicsContext::getState )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getState
        
            typedef ::osg::State const * ( ::osg::GraphicsContext::*getState_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getState"
                , getState_function_type( &::osg::GraphicsContext::getState )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getSwapCallback
        
            typedef ::osg::GraphicsContext::SwapCallback * ( ::osg::GraphicsContext::*getSwapCallback_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getSwapCallback"
                , getSwapCallback_function_type( &::osg::GraphicsContext::getSwapCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getSwapCallback
        
            typedef ::osg::GraphicsContext::SwapCallback const * ( ::osg::GraphicsContext::*getSwapCallback_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getSwapCallback"
                , getSwapCallback_function_type( &::osg::GraphicsContext::getSwapCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getTimeSinceLastClear
        
            typedef double ( ::osg::GraphicsContext::*getTimeSinceLastClear_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getTimeSinceLastClear"
                , getTimeSinceLastClear_function_type( &::osg::GraphicsContext::getTimeSinceLastClear ) );
        
        }
        { //::osg::GraphicsContext::getTraits
        
            typedef ::osg::GraphicsContext::Traits const * ( ::osg::GraphicsContext::*getTraits_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getTraits"
                , getTraits_function_type( &::osg::GraphicsContext::getTraits )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::getWindowingSystemInterface
        
            typedef ::osg::GraphicsContext::WindowingSystemInterface * ( *getWindowingSystemInterface_function_type )(  );
            
            GraphicsContext_exposer.def( 
                "getWindowingSystemInterface"
                , getWindowingSystemInterface_function_type( &::osg::GraphicsContext::getWindowingSystemInterface )
                    /* undefined call policies */ );
        
        }
        { //::osg::GraphicsContext::incrementContextIDUsageCount
        
            typedef void ( *incrementContextIDUsageCount_function_type )( unsigned int );
            
            GraphicsContext_exposer.def( 
                "incrementContextIDUsageCount"
                , incrementContextIDUsageCount_function_type( &::osg::GraphicsContext::incrementContextIDUsageCount )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::GraphicsContext::isCurrent
        
            typedef bool ( ::osg::GraphicsContext::*isCurrent_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "isCurrent"
                , isCurrent_function_type( &::osg::GraphicsContext::isCurrent ) );
        
        }
        { //::osg::GraphicsContext::isRealized
        
            typedef bool ( ::osg::GraphicsContext::*isRealized_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "isRealized"
                , isRealized_function_type( &::osg::GraphicsContext::isRealized ) );
        
        }
        { //::osg::GraphicsContext::isRealizedImplementation
        
            typedef bool ( ::osg::GraphicsContext::*isRealizedImplementation_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "isRealizedImplementation"
                , bp::pure_virtual( isRealizedImplementation_function_type(&::osg::GraphicsContext::isRealizedImplementation) ) );
        
        }
        { //::osg::GraphicsContext::isSameKindAs
        
            typedef bool ( ::osg::GraphicsContext::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( GraphicsContext_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            GraphicsContext_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::GraphicsContext::isSameKindAs)
                , default_isSameKindAs_function_type(&GraphicsContext_wrapper::default_isSameKindAs)
                , ( bp::arg("object") ) );
        
        }
        { //::osg::GraphicsContext::libraryName
        
            typedef char const * ( ::osg::GraphicsContext::*libraryName_function_type)(  ) const;
            typedef char const * ( GraphicsContext_wrapper::*default_libraryName_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::GraphicsContext::libraryName)
                , default_libraryName_function_type(&GraphicsContext_wrapper::default_libraryName) );
        
        }
        { //::osg::GraphicsContext::makeContextCurrent
        
            typedef bool ( ::osg::GraphicsContext::*makeContextCurrent_function_type)( ::osg::GraphicsContext * ) ;
            
            GraphicsContext_exposer.def( 
                "makeContextCurrent"
                , makeContextCurrent_function_type( &::osg::GraphicsContext::makeContextCurrent )
                , ( bp::arg("readContext") ) );
        
        }
        { //::osg::GraphicsContext::makeContextCurrentImplementation
        
            typedef bool ( ::osg::GraphicsContext::*makeContextCurrentImplementation_function_type)( ::osg::GraphicsContext * ) ;
            
            GraphicsContext_exposer.def( 
                "makeContextCurrentImplementation"
                , bp::pure_virtual( makeContextCurrentImplementation_function_type(&::osg::GraphicsContext::makeContextCurrentImplementation) )
                , ( bp::arg("readContext") ) );
        
        }
        { //::osg::GraphicsContext::makeCurrent
        
            typedef bool ( ::osg::GraphicsContext::*makeCurrent_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "makeCurrent"
                , makeCurrent_function_type( &::osg::GraphicsContext::makeCurrent ) );
        
        }
        { //::osg::GraphicsContext::makeCurrentImplementation
        
            typedef bool ( ::osg::GraphicsContext::*makeCurrentImplementation_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "makeCurrentImplementation"
                , bp::pure_virtual( makeCurrentImplementation_function_type(&::osg::GraphicsContext::makeCurrentImplementation) ) );
        
        }
        { //::osg::GraphicsContext::realize
        
            typedef bool ( ::osg::GraphicsContext::*realize_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "realize"
                , realize_function_type( &::osg::GraphicsContext::realize ) );
        
        }
        { //::osg::GraphicsContext::realizeImplementation
        
            typedef bool ( ::osg::GraphicsContext::*realizeImplementation_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "realizeImplementation"
                , bp::pure_virtual( realizeImplementation_function_type(&::osg::GraphicsContext::realizeImplementation) ) );
        
        }
        { //::osg::GraphicsContext::releaseContext
        
            typedef bool ( ::osg::GraphicsContext::*releaseContext_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "releaseContext"
                , releaseContext_function_type( &::osg::GraphicsContext::releaseContext ) );
        
        }
        { //::osg::GraphicsContext::releaseContextImplementation
        
            typedef bool ( ::osg::GraphicsContext::*releaseContextImplementation_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "releaseContextImplementation"
                , bp::pure_virtual( releaseContextImplementation_function_type(&::osg::GraphicsContext::releaseContextImplementation) ) );
        
        }
        { //::osg::GraphicsContext::remove
        
            typedef void ( ::osg::GraphicsContext::*remove_function_type)( ::osg::Operation * ) ;
            
            GraphicsContext_exposer.def( 
                "remove"
                , remove_function_type( &::osg::GraphicsContext::remove )
                , ( bp::arg("operation") ) );
        
        }
        { //::osg::GraphicsContext::remove
        
            typedef void ( ::osg::GraphicsContext::*remove_function_type)( ::std::string const & ) ;
            
            GraphicsContext_exposer.def( 
                "remove"
                , remove_function_type( &::osg::GraphicsContext::remove )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::GraphicsContext::removeAllOperations
        
            typedef void ( ::osg::GraphicsContext::*removeAllOperations_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "removeAllOperations"
                , removeAllOperations_function_type( &::osg::GraphicsContext::removeAllOperations ) );
        
        }
        { //::osg::GraphicsContext::resized
        
            typedef void ( ::osg::GraphicsContext::*resized_function_type)( int,int,int,int ) ;
            
            GraphicsContext_exposer.def( 
                "resized"
                , resized_function_type( &::osg::GraphicsContext::resized )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::osg::GraphicsContext::resizedImplementation
        
            typedef void ( ::osg::GraphicsContext::*resizedImplementation_function_type)( int,int,int,int ) ;
            typedef void ( GraphicsContext_wrapper::*default_resizedImplementation_function_type)( int,int,int,int ) ;
            
            GraphicsContext_exposer.def( 
                "resizedImplementation"
                , resizedImplementation_function_type(&::osg::GraphicsContext::resizedImplementation)
                , default_resizedImplementation_function_type(&GraphicsContext_wrapper::default_resizedImplementation)
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::osg::GraphicsContext::runOperations
        
            typedef void ( ::osg::GraphicsContext::*runOperations_function_type)(  ) ;
            typedef void ( GraphicsContext_wrapper::*default_runOperations_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "runOperations"
                , runOperations_function_type(&::osg::GraphicsContext::runOperations)
                , default_runOperations_function_type(&GraphicsContext_wrapper::default_runOperations) );
        
        }
        { //::osg::GraphicsContext::setClearColor
        
            typedef void ( ::osg::GraphicsContext::*setClearColor_function_type)( ::osg::Vec4 const & ) ;
            
            GraphicsContext_exposer.def( 
                "setClearColor"
                , setClearColor_function_type( &::osg::GraphicsContext::setClearColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osg::GraphicsContext::setClearMask
        
            typedef void ( ::osg::GraphicsContext::*setClearMask_function_type)( ::GLbitfield ) ;
            
            GraphicsContext_exposer.def( 
                "setClearMask"
                , setClearMask_function_type( &::osg::GraphicsContext::setClearMask )
                , ( bp::arg("mask") ) );
        
        }
        { //::osg::GraphicsContext::setCompileContext
        
            typedef void ( *setCompileContext_function_type )( unsigned int,::osg::GraphicsContext * );
            
            GraphicsContext_exposer.def( 
                "setCompileContext"
                , setCompileContext_function_type( &::osg::GraphicsContext::setCompileContext )
                , ( bp::arg("contextID"), bp::arg("gc") ) );
        
        }
        { //::osg::GraphicsContext::setDefaultFboId
        
            typedef void ( ::osg::GraphicsContext::*setDefaultFboId_function_type)( ::GLuint ) ;
            
            GraphicsContext_exposer.def( 
                "setDefaultFboId"
                , setDefaultFboId_function_type( &::osg::GraphicsContext::setDefaultFboId )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::GraphicsContext::setGraphicsThread
        
            typedef void ( ::osg::GraphicsContext::*setGraphicsThread_function_type)( ::osg::GraphicsThread * ) ;
            
            GraphicsContext_exposer.def( 
                "setGraphicsThread"
                , setGraphicsThread_function_type( &::osg::GraphicsContext::setGraphicsThread )
                , ( bp::arg("gt") ) );
        
        }
        { //::osg::GraphicsContext::setResizedCallback
        
            typedef void ( ::osg::GraphicsContext::*setResizedCallback_function_type)( ::osg::GraphicsContext::ResizedCallback * ) ;
            
            GraphicsContext_exposer.def( 
                "setResizedCallback"
                , setResizedCallback_function_type( &::osg::GraphicsContext::setResizedCallback )
                , ( bp::arg("rc") ) );
        
        }
        { //::osg::GraphicsContext::setState
        
            typedef void ( ::osg::GraphicsContext::*setState_function_type)( ::osg::State * ) ;
            
            GraphicsContext_exposer.def( 
                "setState"
                , setState_function_type( &::osg::GraphicsContext::setState )
                , ( bp::arg("state") ) );
        
        }
        { //::osg::GraphicsContext::setSwapCallback
        
            typedef void ( ::osg::GraphicsContext::*setSwapCallback_function_type)( ::osg::GraphicsContext::SwapCallback * ) ;
            
            GraphicsContext_exposer.def( 
                "setSwapCallback"
                , setSwapCallback_function_type( &::osg::GraphicsContext::setSwapCallback )
                , ( bp::arg("rc") ) );
        
        }
        { //::osg::GraphicsContext::setWindowingSystemInterface
        
            typedef void ( *setWindowingSystemInterface_function_type )( ::osg::GraphicsContext::WindowingSystemInterface * );
            
            GraphicsContext_exposer.def( 
                "setWindowingSystemInterface"
                , setWindowingSystemInterface_function_type( &::osg::GraphicsContext::setWindowingSystemInterface )
                , ( bp::arg("wsInterface") ) );
        
        }
        { //::osg::GraphicsContext::swapBuffers
        
            typedef void ( ::osg::GraphicsContext::*swapBuffers_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "swapBuffers"
                , swapBuffers_function_type( &::osg::GraphicsContext::swapBuffers ) );
        
        }
        { //::osg::GraphicsContext::swapBuffersCallbackOrImplemenation
        
            typedef void ( ::osg::GraphicsContext::*swapBuffersCallbackOrImplemenation_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "swapBuffersCallbackOrImplemenation"
                , swapBuffersCallbackOrImplemenation_function_type( &::osg::GraphicsContext::swapBuffersCallbackOrImplemenation ) );
        
        }
        { //::osg::GraphicsContext::swapBuffersImplementation
        
            typedef void ( ::osg::GraphicsContext::*swapBuffersImplementation_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "swapBuffersImplementation"
                , bp::pure_virtual( swapBuffersImplementation_function_type(&::osg::GraphicsContext::swapBuffersImplementation) ) );
        
        }
        { //::osg::GraphicsContext::valid
        
            typedef bool ( ::osg::GraphicsContext::*valid_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "valid"
                , bp::pure_virtual( valid_function_type(&::osg::GraphicsContext::valid) ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( GraphicsContext_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&GraphicsContext_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( GraphicsContext_wrapper::*default_getUserData_function_type)(  ) ;
            
            GraphicsContext_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&GraphicsContext_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( GraphicsContext_wrapper::*default_getUserData_function_type)(  ) const;
            
            GraphicsContext_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&GraphicsContext_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::resizeGLObjectBuffers
        
            typedef void ( ::osg::Object::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( GraphicsContext_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            GraphicsContext_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Object::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&GraphicsContext_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( GraphicsContext_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            GraphicsContext_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&GraphicsContext_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            GraphicsContext_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( GraphicsContext_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            GraphicsContext_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&GraphicsContext_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( GraphicsContext_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            GraphicsContext_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&GraphicsContext_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
        GraphicsContext_exposer.staticmethod( "createGraphicsContext" );
        GraphicsContext_exposer.staticmethod( "createNewContextID" );
        GraphicsContext_exposer.staticmethod( "decrementContextIDUsageCount" );
        GraphicsContext_exposer.staticmethod( "getAllRegisteredGraphicsContexts" );
        GraphicsContext_exposer.staticmethod( "getCompileContext" );
        GraphicsContext_exposer.staticmethod( "getMaxContextID" );
        GraphicsContext_exposer.staticmethod( "getOrCreateCompileContext" );
        GraphicsContext_exposer.staticmethod( "getRegisteredGraphicsContexts" );
        GraphicsContext_exposer.staticmethod( "getWindowingSystemInterface" );
        GraphicsContext_exposer.staticmethod( "incrementContextIDUsageCount" );
        GraphicsContext_exposer.staticmethod( "setCompileContext" );
        GraphicsContext_exposer.staticmethod( "setWindowingSystemInterface" );
    }

}
