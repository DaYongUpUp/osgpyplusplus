// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec3us.pypp.hpp"

namespace bp = boost::python;

void register_Vec3us_class(){

    { //::osg::Vec3us
        typedef bp::class_< osg::Vec3us > Vec3us_exposer_t;
        Vec3us_exposer_t Vec3us_exposer = Vec3us_exposer_t( "Vec3us", bp::init< >("\n Constructor that sets all components of the vector to zero\n") );
        bp::scope Vec3us_scope( Vec3us_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec3us::num_components;
        Vec3us_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int >(( bp::arg("r"), bp::arg("g"), bp::arg("b") )) );
        { //::osg::Vec3us::b
        
            typedef short unsigned int & ( ::osg::Vec3us::*b_function_type)(  ) ;
            
            Vec3us_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec3us::b )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3us::b
        
            typedef short unsigned int ( ::osg::Vec3us::*b_function_type)(  ) const;
            
            Vec3us_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec3us::b ) );
        
        }
        { //::osg::Vec3us::g
        
            typedef short unsigned int & ( ::osg::Vec3us::*g_function_type)(  ) ;
            
            Vec3us_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec3us::g )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3us::g
        
            typedef short unsigned int ( ::osg::Vec3us::*g_function_type)(  ) const;
            
            Vec3us_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec3us::g ) );
        
        }
        Vec3us_exposer.def( bp::self != bp::self );
        Vec3us_exposer.def( bp::self * bp::other< short unsigned int >() );
        Vec3us_exposer.def( bp::self * bp::self );
        Vec3us_exposer.def( bp::self *= bp::other< short unsigned int >() );
        Vec3us_exposer.def( bp::self + bp::self );
        Vec3us_exposer.def( bp::self += bp::self );
        Vec3us_exposer.def( bp::self - bp::self );
        Vec3us_exposer.def( bp::self -= bp::self );
        Vec3us_exposer.def( bp::self / bp::other< short unsigned int >() );
        Vec3us_exposer.def( bp::self /= bp::other< short unsigned int >() );
        Vec3us_exposer.def( bp::self < bp::self );
        Vec3us_exposer.def( bp::self == bp::self );
        { //::osg::Vec3us::operator[]
        
            typedef short unsigned int & ( ::osg::Vec3us::*__getitem___function_type)( unsigned int ) ;
            
            Vec3us_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec3us::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3us::operator[]
        
            typedef short unsigned int ( ::osg::Vec3us::*__getitem___function_type)( unsigned int ) const;
            
            Vec3us_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec3us::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec3us::r
        
            typedef short unsigned int & ( ::osg::Vec3us::*r_function_type)(  ) ;
            
            Vec3us_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec3us::r )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3us::r
        
            typedef short unsigned int ( ::osg::Vec3us::*r_function_type)(  ) const;
            
            Vec3us_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec3us::r ) );
        
        }
        { //::osg::Vec3us::set
        
            typedef void ( ::osg::Vec3us::*set_function_type)( short unsigned int,short unsigned int,short unsigned int ) ;
            
            Vec3us_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec3us::set )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
        
        }
        { //::osg::Vec3us::set
        
            typedef void ( ::osg::Vec3us::*set_function_type)( ::osg::Vec3us const & ) ;
            
            Vec3us_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec3us::set )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Vec3us::x
        
            typedef short unsigned int & ( ::osg::Vec3us::*x_function_type)(  ) ;
            
            Vec3us_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec3us::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3us::x
        
            typedef short unsigned int ( ::osg::Vec3us::*x_function_type)(  ) const;
            
            Vec3us_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec3us::x ) );
        
        }
        { //::osg::Vec3us::y
        
            typedef short unsigned int & ( ::osg::Vec3us::*y_function_type)(  ) ;
            
            Vec3us_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec3us::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3us::y
        
            typedef short unsigned int ( ::osg::Vec3us::*y_function_type)(  ) const;
            
            Vec3us_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec3us::y ) );
        
        }
        { //::osg::Vec3us::z
        
            typedef short unsigned int & ( ::osg::Vec3us::*z_function_type)(  ) ;
            
            Vec3us_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec3us::z )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3us::z
        
            typedef short unsigned int ( ::osg::Vec3us::*z_function_type)(  ) const;
            
            Vec3us_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec3us::z ) );
        
        }
    }

}
