// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "shader.pypp.hpp"

namespace bp = boost::python;

struct Shader_wrapper : osg::Shader, bp::wrapper< osg::Shader > {

    struct PerContextShader_wrapper : osg::Shader::PerContextShader, bp::wrapper< osg::Shader::PerContextShader > {
    
        PerContextShader_wrapper(::osg::Shader const * shader, unsigned int contextID )
        : osg::Shader::PerContextShader( boost::python::ptr(shader), contextID )
          , bp::wrapper< osg::Shader::PerContextShader >(){
            // constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    Shader_wrapper(::osg::Shader::Type type=::osg::Shader::UNDEFINED )
    : osg::Shader( type )
      , bp::wrapper< osg::Shader >(){
        // constructor
    
    }

    Shader_wrapper(::osg::Shader::Type type, ::std::string const & source )
    : osg::Shader( type, source )
      , bp::wrapper< osg::Shader >(){
        // constructor
    
    }

    Shader_wrapper(::osg::Shader::Type type, ::osg::ShaderBinary * shaderBinary )
    : osg::Shader( type, boost::python::ptr(shaderBinary) )
      , bp::wrapper< osg::Shader >(){
        // constructor
    
    }

    Shader_wrapper(::osg::Shader const & rhs, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::Shader( boost::ref(rhs), boost::ref(copyop) )
      , bp::wrapper< osg::Shader >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Shader::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Shader::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Shader::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Shader::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Shader::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Shader::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Shader::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Shader::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Shader::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Shader::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osg::Shader::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osg::Shader::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Shader::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Shader::resizeGLObjectBuffers( maxSize );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Shader_class(){

    { //::osg::Shader
        typedef bp::class_< Shader_wrapper, bp::bases< osg::Object >, boost::noncopyable > Shader_exposer_t;
        Shader_exposer_t Shader_exposer = Shader_exposer_t( "Shader", bp::no_init );
        bp::scope Shader_scope( Shader_exposer );
        bp::enum_< osg::Shader::Type>("Type")
            .value("VERTEX", osg::Shader::VERTEX)
            .value("TESSCONTROL", osg::Shader::TESSCONTROL)
            .value("TESSEVALUATION", osg::Shader::TESSEVALUATION)
            .value("GEOMETRY", osg::Shader::GEOMETRY)
            .value("FRAGMENT", osg::Shader::FRAGMENT)
            .value("COMPUTE", osg::Shader::COMPUTE)
            .value("UNDEFINED", osg::Shader::UNDEFINED)
            .export_values()
            ;
        bp::class_< Shader_wrapper::PerContextShader_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "PerContextShader", bp::no_init )    
            .def( bp::init< osg::Shader const *, unsigned int >(( bp::arg("shader"), bp::arg("contextID") )) )    
            .def( 
                "attachShader"
                , (void ( ::osg::Shader::PerContextShader::* )( ::GLuint )const)( &::osg::Shader::PerContextShader::attachShader )
                , ( bp::arg("program") ) )    
            .def( 
                "compileShader"
                , (void ( ::osg::Shader::PerContextShader::* )( ::osg::State & ))( &::osg::Shader::PerContextShader::compileShader )
                , ( bp::arg("state") ) )    
            .def( 
                "detachShader"
                , (void ( ::osg::Shader::PerContextShader::* )( ::GLuint )const)( &::osg::Shader::PerContextShader::detachShader )
                , ( bp::arg("program") ) )    
            .def( 
                "getHandle"
                , (::GLuint ( ::osg::Shader::PerContextShader::* )(  )const)( &::osg::Shader::PerContextShader::getHandle ) )    
            .def( 
                "getInfoLog"
                , (bool ( ::osg::Shader::PerContextShader::* )( ::std::string & )const)( &::osg::Shader::PerContextShader::getInfoLog )
                , ( bp::arg("infoLog") ) )    
            .def( 
                "isCompiled"
                , (bool ( ::osg::Shader::PerContextShader::* )(  )const)( &::osg::Shader::PerContextShader::isCompiled ) )    
            .def( 
                "needsCompile"
                , (bool ( ::osg::Shader::PerContextShader::* )(  )const)( &::osg::Shader::PerContextShader::needsCompile ) )    
            .def( 
                "requestCompile"
                , (void ( ::osg::Shader::PerContextShader::* )(  ))( &::osg::Shader::PerContextShader::requestCompile ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( Shader_wrapper::PerContextShader_wrapper::* )( bool ))(&Shader_wrapper::PerContextShader_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        Shader_exposer.def( bp::init< bp::optional< osg::Shader::Type > >(( bp::arg("type")=(long)(::osg::Shader::UNDEFINED) )) );
        bp::implicitly_convertible< osg::Shader::Type, osg::Shader >();
        Shader_exposer.def( bp::init< osg::Shader::Type, std::string const & >(( bp::arg("type"), bp::arg("source") )) );
        Shader_exposer.def( bp::init< osg::Shader::Type, osg::ShaderBinary * >(( bp::arg("type"), bp::arg("shaderBinary") )) );
        Shader_exposer.def( bp::init< osg::Shader const &, bp::optional< osg::CopyOp const & > >(( bp::arg("rhs"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::Shader const &, osg::Shader >();
        { //::osg::Shader::addCodeInjection
        
            typedef void ( ::osg::Shader::*addCodeInjection_function_type)( float,::std::string const & ) ;
            
            Shader_exposer.def( 
                "addCodeInjection"
                , addCodeInjection_function_type( &::osg::Shader::addCodeInjection )
                , ( bp::arg("position"), bp::arg("code") ) );
        
        }
        { //::osg::Shader::attachShader
        
            typedef void ( ::osg::Shader::*attachShader_function_type)( unsigned int,::GLuint ) const;
            
            Shader_exposer.def( 
                "attachShader"
                , attachShader_function_type( &::osg::Shader::attachShader )
                , ( bp::arg("contextID"), bp::arg("program") ) );
        
        }
        { //::osg::Shader::className
        
            typedef char const * ( ::osg::Shader::*className_function_type)(  ) const;
            typedef char const * ( Shader_wrapper::*default_className_function_type)(  ) const;
            
            Shader_exposer.def( 
                "className"
                , className_function_type(&::osg::Shader::className)
                , default_className_function_type(&Shader_wrapper::default_className) );
        
        }
        { //::osg::Shader::clone
        
            typedef ::osg::Object * ( ::osg::Shader::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Shader_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            Shader_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Shader::clone)
                , default_clone_function_type(&Shader_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Shader::cloneType
        
            typedef ::osg::Object * ( ::osg::Shader::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( Shader_wrapper::*default_cloneType_function_type)(  ) const;
            
            Shader_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Shader::cloneType)
                , default_cloneType_function_type(&Shader_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Shader::compare
        
            typedef int ( ::osg::Shader::*compare_function_type)( ::osg::Shader const & ) const;
            
            Shader_exposer.def( 
                "compare"
                , compare_function_type( &::osg::Shader::compare )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Shader::compileShader
        
            typedef void ( ::osg::Shader::*compileShader_function_type)( ::osg::State & ) const;
            
            Shader_exposer.def( 
                "compileShader"
                , compileShader_function_type( &::osg::Shader::compileShader )
                , ( bp::arg("state") ) );
        
        }
        { //::osg::Shader::deleteGlShader
        
            typedef void ( *deleteGlShader_function_type )( unsigned int,::GLuint );
            
            Shader_exposer.def( 
                "deleteGlShader"
                , deleteGlShader_function_type( &::osg::Shader::deleteGlShader )
                , ( bp::arg("contextID"), bp::arg("shader") ) );
        
        }
        { //::osg::Shader::detachShader
        
            typedef void ( ::osg::Shader::*detachShader_function_type)( unsigned int,::GLuint ) const;
            
            Shader_exposer.def( 
                "detachShader"
                , detachShader_function_type( &::osg::Shader::detachShader )
                , ( bp::arg("contextID"), bp::arg("program") ) );
        
        }
        { //::osg::Shader::dirtyShader
        
            typedef void ( ::osg::Shader::*dirtyShader_function_type)(  ) ;
            
            Shader_exposer.def( 
                "dirtyShader"
                , dirtyShader_function_type( &::osg::Shader::dirtyShader ) );
        
        }
        { //::osg::Shader::discardDeletedGlShaders
        
            typedef void ( *discardDeletedGlShaders_function_type )( unsigned int );
            
            Shader_exposer.def( 
                "discardDeletedGlShaders"
                , discardDeletedGlShaders_function_type( &::osg::Shader::discardDeletedGlShaders )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::Shader::flushDeletedGlShaders
        
            typedef void ( *flushDeletedGlShaders_function_type )( unsigned int,double,double & );
            
            Shader_exposer.def( 
                "flushDeletedGlShaders"
                , flushDeletedGlShaders_function_type( &::osg::Shader::flushDeletedGlShaders )
                , ( bp::arg("contextID"), bp::arg("currentTime"), bp::arg("availableTime") ) );
        
        }
        { //::osg::Shader::getCodeInjectionMap
        
            typedef ::std::multimap< float, std::string > & ( ::osg::Shader::*getCodeInjectionMap_function_type)(  ) ;
            
            Shader_exposer.def( 
                "getCodeInjectionMap"
                , getCodeInjectionMap_function_type( &::osg::Shader::getCodeInjectionMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Shader::getCodeInjectionMap
        
            typedef ::std::multimap< float, std::string > const & ( ::osg::Shader::*getCodeInjectionMap_function_type)(  ) const;
            
            Shader_exposer.def( 
                "getCodeInjectionMap"
                , getCodeInjectionMap_function_type( &::osg::Shader::getCodeInjectionMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Shader::getFileName
        
            typedef ::std::string const & ( ::osg::Shader::*getFileName_function_type)(  ) const;
            
            Shader_exposer.def( 
                "getFileName"
                , getFileName_function_type( &::osg::Shader::getFileName )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Shader::getGlShaderInfoLog
        
            typedef bool ( ::osg::Shader::*getGlShaderInfoLog_function_type)( unsigned int,::std::string & ) const;
            
            Shader_exposer.def( 
                "getGlShaderInfoLog"
                , getGlShaderInfoLog_function_type( &::osg::Shader::getGlShaderInfoLog )
                , ( bp::arg("contextID"), bp::arg("log") ) );
        
        }
        { //::osg::Shader::getPCS
        
            typedef ::osg::Shader::PerContextShader * ( ::osg::Shader::*getPCS_function_type)( unsigned int ) const;
            
            Shader_exposer.def( 
                "getPCS"
                , getPCS_function_type( &::osg::Shader::getPCS )
                , ( bp::arg("contextID") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Shader::getShaderBinary
        
            typedef ::osg::ShaderBinary * ( ::osg::Shader::*getShaderBinary_function_type)(  ) ;
            
            Shader_exposer.def( 
                "getShaderBinary"
                , getShaderBinary_function_type( &::osg::Shader::getShaderBinary )
                    /* undefined call policies */ );
        
        }
        { //::osg::Shader::getShaderBinary
        
            typedef ::osg::ShaderBinary const * ( ::osg::Shader::*getShaderBinary_function_type)(  ) const;
            
            Shader_exposer.def( 
                "getShaderBinary"
                , getShaderBinary_function_type( &::osg::Shader::getShaderBinary )
                    /* undefined call policies */ );
        
        }
        { //::osg::Shader::getShaderSource
        
            typedef ::std::string const & ( ::osg::Shader::*getShaderSource_function_type)(  ) const;
            
            Shader_exposer.def( 
                "getShaderSource"
                , getShaderSource_function_type( &::osg::Shader::getShaderSource )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Shader::getType
        
            typedef ::osg::Shader::Type ( ::osg::Shader::*getType_function_type)(  ) const;
            
            Shader_exposer.def( 
                "getType"
                , getType_function_type( &::osg::Shader::getType ) );
        
        }
        { //::osg::Shader::getTypeId
        
            typedef ::osg::Shader::Type ( *getTypeId_function_type )( ::std::string const & );
            
            Shader_exposer.def( 
                "getTypeId"
                , getTypeId_function_type( &::osg::Shader::getTypeId )
                , ( bp::arg("tname") ) );
        
        }
        { //::osg::Shader::getTypename
        
            typedef char const * ( ::osg::Shader::*getTypename_function_type)(  ) const;
            
            Shader_exposer.def( 
                "getTypename"
                , getTypename_function_type( &::osg::Shader::getTypename ) );
        
        }
        { //::osg::Shader::isSameKindAs
        
            typedef bool ( ::osg::Shader::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Shader_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Shader_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Shader::isSameKindAs)
                , default_isSameKindAs_function_type(&Shader_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Shader::libraryName
        
            typedef char const * ( ::osg::Shader::*libraryName_function_type)(  ) const;
            typedef char const * ( Shader_wrapper::*default_libraryName_function_type)(  ) const;
            
            Shader_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Shader::libraryName)
                , default_libraryName_function_type(&Shader_wrapper::default_libraryName) );
        
        }
        { //::osg::Shader::loadShaderSourceFromFile
        
            typedef bool ( ::osg::Shader::*loadShaderSourceFromFile_function_type)( ::std::string const & ) ;
            
            Shader_exposer.def( 
                "loadShaderSourceFromFile"
                , loadShaderSourceFromFile_function_type( &::osg::Shader::loadShaderSourceFromFile )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osg::Shader::readShaderFile
        
            typedef ::osg::Shader * ( *readShaderFile_function_type )( ::osg::Shader::Type,::std::string const & );
            
            Shader_exposer.def( 
                "readShaderFile"
                , readShaderFile_function_type( &::osg::Shader::readShaderFile )
                , ( bp::arg("type"), bp::arg("fileName") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Shader::releaseGLObjects
        
            typedef void ( ::osg::Shader::*releaseGLObjects_function_type)( ::osg::State * ) const;
            typedef void ( Shader_wrapper::*default_releaseGLObjects_function_type)( ::osg::State * ) const;
            
            Shader_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osg::Shader::releaseGLObjects)
                , default_releaseGLObjects_function_type(&Shader_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osg::Shader::resizeGLObjectBuffers
        
            typedef void ( ::osg::Shader::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Shader_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Shader_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Shader::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Shader_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Shader::setFileName
        
            typedef void ( ::osg::Shader::*setFileName_function_type)( ::std::string const & ) ;
            
            Shader_exposer.def( 
                "setFileName"
                , setFileName_function_type( &::osg::Shader::setFileName )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osg::Shader::setShaderBinary
        
            typedef void ( ::osg::Shader::*setShaderBinary_function_type)( ::osg::ShaderBinary * ) ;
            
            Shader_exposer.def( 
                "setShaderBinary"
                , setShaderBinary_function_type( &::osg::Shader::setShaderBinary )
                , ( bp::arg("shaderBinary") ) );
        
        }
        { //::osg::Shader::setShaderSource
        
            typedef void ( ::osg::Shader::*setShaderSource_function_type)( ::std::string const & ) ;
            
            Shader_exposer.def( 
                "setShaderSource"
                , setShaderSource_function_type( &::osg::Shader::setShaderSource )
                , ( bp::arg("sourceText") ) );
        
        }
        { //::osg::Shader::setType
        
            typedef bool ( ::osg::Shader::*setType_function_type)( ::osg::Shader::Type ) ;
            
            Shader_exposer.def( 
                "setType"
                , setType_function_type( &::osg::Shader::setType )
                , ( bp::arg("t") ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Shader_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Shader_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Shader_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Shader_wrapper::*default_getUserData_function_type)(  ) ;
            
            Shader_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Shader_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Shader_wrapper::*default_getUserData_function_type)(  ) const;
            
            Shader_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Shader_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Shader_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Shader_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Shader_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Shader_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Shader_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Shader_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Shader_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Shader_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Shader_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Shader_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
        Shader_exposer.staticmethod( "deleteGlShader" );
        Shader_exposer.staticmethod( "discardDeletedGlShaders" );
        Shader_exposer.staticmethod( "flushDeletedGlShaders" );
        Shader_exposer.staticmethod( "getTypeId" );
        Shader_exposer.staticmethod( "readShaderFile" );
    }

}
