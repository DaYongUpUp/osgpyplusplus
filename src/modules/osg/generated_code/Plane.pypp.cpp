// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "plane.pypp.hpp"

namespace bp = boost::python;

void register_Plane_class(){

    { //::osg::Plane
        typedef bp::class_< osg::Plane > Plane_exposer_t;
        Plane_exposer_t Plane_exposer = Plane_exposer_t( "Plane", bp::init< >() );
        bp::scope Plane_scope( Plane_exposer );
        bp::scope().attr("num_components") = (int)osg::Plane::num_components;
        Plane_exposer.def( bp::init< osg::Plane const & >(( bp::arg("pl") )) );
        Plane_exposer.def( bp::init< double, double, double, double >(( bp::arg("a"), bp::arg("b"), bp::arg("c"), bp::arg("d") )) );
        Plane_exposer.def( bp::init< osg::Vec4f const & >(( bp::arg("vec") )) );
        bp::implicitly_convertible< osg::Vec4f const &, osg::Plane >();
        Plane_exposer.def( bp::init< osg::Vec4d const & >(( bp::arg("vec") )) );
        bp::implicitly_convertible< osg::Vec4d const &, osg::Plane >();
        Plane_exposer.def( bp::init< osg::Vec3d const &, double >(( bp::arg("norm"), bp::arg("d") )) );
        Plane_exposer.def( bp::init< osg::Vec3d const &, osg::Vec3d const &, osg::Vec3d const & >(( bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Plane_exposer.def( bp::init< osg::Vec3d const &, osg::Vec3d const & >(( bp::arg("norm"), bp::arg("point") )) );
        { //::osg::Plane::asVec4
        
            typedef ::osg::Vec4d ( ::osg::Plane::*asVec4_function_type)(  ) const;
            
            Plane_exposer.def( 
                "asVec4"
                , asVec4_function_type( &::osg::Plane::asVec4 ) );
        
        }
        { //::osg::Plane::calculateUpperLowerBBCorners
        
            typedef void ( ::osg::Plane::*calculateUpperLowerBBCorners_function_type)(  ) ;
            
            Plane_exposer.def( 
                "calculateUpperLowerBBCorners"
                , calculateUpperLowerBBCorners_function_type( &::osg::Plane::calculateUpperLowerBBCorners ) );
        
        }
        { //::osg::Plane::distance
        
            typedef float ( ::osg::Plane::*distance_function_type)( ::osg::Vec3f const & ) const;
            
            Plane_exposer.def( 
                "distance"
                , distance_function_type( &::osg::Plane::distance )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Plane::distance
        
            typedef double ( ::osg::Plane::*distance_function_type)( ::osg::Vec3d const & ) const;
            
            Plane_exposer.def( 
                "distance"
                , distance_function_type( &::osg::Plane::distance )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Plane::dotProductNormal
        
            typedef float ( ::osg::Plane::*dotProductNormal_function_type)( ::osg::Vec3f const & ) const;
            
            Plane_exposer.def( 
                "dotProductNormal"
                , dotProductNormal_function_type( &::osg::Plane::dotProductNormal )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Plane::dotProductNormal
        
            typedef double ( ::osg::Plane::*dotProductNormal_function_type)( ::osg::Vec3d const & ) const;
            
            Plane_exposer.def( 
                "dotProductNormal"
                , dotProductNormal_function_type( &::osg::Plane::dotProductNormal )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Plane::flip
        
            typedef void ( ::osg::Plane::*flip_function_type)(  ) ;
            
            Plane_exposer.def( 
                "flip"
                , flip_function_type( &::osg::Plane::flip ) );
        
        }
        { //::osg::Plane::getNormal
        
            typedef ::osg::Vec3d ( ::osg::Plane::*getNormal_function_type)(  ) const;
            
            Plane_exposer.def( 
                "getNormal"
                , getNormal_function_type( &::osg::Plane::getNormal ) );
        
        }
        { //::osg::Plane::intersect
        
            typedef int ( ::osg::Plane::*intersect_function_type)( ::std::vector< osg::Vec3f > const & ) const;
            
            Plane_exposer.def( 
                "intersect"
                , intersect_function_type( &::osg::Plane::intersect )
                , ( bp::arg("vertices") ) );
        
        }
        { //::osg::Plane::intersect
        
            typedef int ( ::osg::Plane::*intersect_function_type)( ::std::vector< osg::Vec3d > const & ) const;
            
            Plane_exposer.def( 
                "intersect"
                , intersect_function_type( &::osg::Plane::intersect )
                , ( bp::arg("vertices") ) );
        
        }
        { //::osg::Plane::intersect
        
            typedef int ( ::osg::Plane::*intersect_function_type)( ::osg::BoundingSphere const & ) const;
            
            Plane_exposer.def( 
                "intersect"
                , intersect_function_type( &::osg::Plane::intersect )
                , ( bp::arg("bs") ) );
        
        }
        { //::osg::Plane::intersect
        
            typedef int ( ::osg::Plane::*intersect_function_type)( ::osg::BoundingBox const & ) const;
            
            Plane_exposer.def( 
                "intersect"
                , intersect_function_type( &::osg::Plane::intersect )
                , ( bp::arg("bb") ) );
        
        }
        { //::osg::Plane::isNaN
        
            typedef bool ( ::osg::Plane::*isNaN_function_type)(  ) const;
            
            Plane_exposer.def( 
                "isNaN"
                , isNaN_function_type( &::osg::Plane::isNaN ) );
        
        }
        { //::osg::Plane::makeUnitLength
        
            typedef void ( ::osg::Plane::*makeUnitLength_function_type)(  ) ;
            
            Plane_exposer.def( 
                "makeUnitLength"
                , makeUnitLength_function_type( &::osg::Plane::makeUnitLength ) );
        
        }
        Plane_exposer.def( bp::self != bp::self );
        Plane_exposer.def( bp::self < bp::self );
        { //::osg::Plane::operator=
        
            typedef ::osg::Plane & ( ::osg::Plane::*assign_function_type)( ::osg::Plane const & ) ;
            
            Plane_exposer.def( 
                "assign"
                , assign_function_type( &::osg::Plane::operator= )
                , ( bp::arg("pl") )
                , bp::return_self< >() );
        
        }
        Plane_exposer.def( bp::self == bp::self );
        { //::osg::Plane::operator[]
        
            typedef double & ( ::osg::Plane::*__getitem___function_type)( unsigned int ) ;
            
            Plane_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Plane::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Plane::operator[]
        
            typedef double ( ::osg::Plane::*__getitem___function_type)( unsigned int ) const;
            
            Plane_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Plane::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Plane::set
        
            typedef void ( ::osg::Plane::*set_function_type)( ::osg::Plane const & ) ;
            
            Plane_exposer.def( 
                "set"
                , set_function_type( &::osg::Plane::set )
                , ( bp::arg("pl") ) );
        
        }
        { //::osg::Plane::set
        
            typedef void ( ::osg::Plane::*set_function_type)( double,double,double,double ) ;
            
            Plane_exposer.def( 
                "set"
                , set_function_type( &::osg::Plane::set )
                , ( bp::arg("a"), bp::arg("b"), bp::arg("c"), bp::arg("d") ) );
        
        }
        { //::osg::Plane::set
        
            typedef void ( ::osg::Plane::*set_function_type)( ::osg::Vec4f const & ) ;
            
            Plane_exposer.def( 
                "set"
                , set_function_type( &::osg::Plane::set )
                , ( bp::arg("vec") ) );
        
        }
        { //::osg::Plane::set
        
            typedef void ( ::osg::Plane::*set_function_type)( ::osg::Vec4d const & ) ;
            
            Plane_exposer.def( 
                "set"
                , set_function_type( &::osg::Plane::set )
                , ( bp::arg("vec") ) );
        
        }
        { //::osg::Plane::set
        
            typedef void ( ::osg::Plane::*set_function_type)( ::osg::Vec3d const &,double ) ;
            
            Plane_exposer.def( 
                "set"
                , set_function_type( &::osg::Plane::set )
                , ( bp::arg("norm"), bp::arg("d") ) );
        
        }
        { //::osg::Plane::set
        
            typedef void ( ::osg::Plane::*set_function_type)( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const & ) ;
            
            Plane_exposer.def( 
                "set"
                , set_function_type( &::osg::Plane::set )
                , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3") ) );
        
        }
        { //::osg::Plane::set
        
            typedef void ( ::osg::Plane::*set_function_type)( ::osg::Vec3d const &,::osg::Vec3d const & ) ;
            
            Plane_exposer.def( 
                "set"
                , set_function_type( &::osg::Plane::set )
                , ( bp::arg("norm"), bp::arg("point") ) );
        
        }
        { //::osg::Plane::transform
        
            typedef void ( ::osg::Plane::*transform_function_type)( ::osg::Matrix const & ) ;
            
            Plane_exposer.def( 
                "transform"
                , transform_function_type( &::osg::Plane::transform )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osg::Plane::transformProvidingInverse
        
            typedef void ( ::osg::Plane::*transformProvidingInverse_function_type)( ::osg::Matrix const & ) ;
            
            Plane_exposer.def( 
                "transformProvidingInverse"
                , transformProvidingInverse_function_type( &::osg::Plane::transformProvidingInverse )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osg::Plane::valid
        
            typedef bool ( ::osg::Plane::*valid_function_type)(  ) const;
            
            Plane_exposer.def( 
                "valid"
                , valid_function_type( &::osg::Plane::valid ) );
        
        }
    }

}
