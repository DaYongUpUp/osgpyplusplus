// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec2s.pypp.hpp"

namespace bp = boost::python;

void register_Vec2s_class(){

    { //::osg::Vec2s
        typedef bp::class_< osg::Vec2s > Vec2s_exposer_t;
        Vec2s_exposer_t Vec2s_exposer = Vec2s_exposer_t( "Vec2s", bp::init< >() );
        bp::scope Vec2s_scope( Vec2s_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec2s::num_components;
        Vec2s_exposer.def( bp::init< short int, short int >(( bp::arg("x"), bp::arg("y") )) );
        { //::osg::Vec2s::g
        
            typedef short int & ( ::osg::Vec2s::*g_function_type)(  ) ;
            
            Vec2s_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec2s::g )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2s::g
        
            typedef short int ( ::osg::Vec2s::*g_function_type)(  ) const;
            
            Vec2s_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec2s::g ) );
        
        }
        Vec2s_exposer.def( bp::self != bp::self );
        Vec2s_exposer.def( bp::self * bp::other< short int >() );
        Vec2s_exposer.def( bp::self * bp::self );
        Vec2s_exposer.def( bp::self *= bp::other< short int >() );
        Vec2s_exposer.def( bp::self + bp::self );
        Vec2s_exposer.def( bp::self += bp::self );
        Vec2s_exposer.def( bp::self - bp::self );
        Vec2s_exposer.def( -bp::self );
        Vec2s_exposer.def( bp::self -= bp::self );
        Vec2s_exposer.def( bp::self / bp::other< short int >() );
        Vec2s_exposer.def( bp::self /= bp::other< short int >() );
        Vec2s_exposer.def( bp::self < bp::self );
        Vec2s_exposer.def( bp::self == bp::self );
        { //::osg::Vec2s::operator[]
        
            typedef short int & ( ::osg::Vec2s::*__getitem___function_type)( int ) ;
            
            Vec2s_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec2s::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2s::operator[]
        
            typedef short int ( ::osg::Vec2s::*__getitem___function_type)( int ) const;
            
            Vec2s_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec2s::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec2s::r
        
            typedef short int & ( ::osg::Vec2s::*r_function_type)(  ) ;
            
            Vec2s_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec2s::r )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2s::r
        
            typedef short int ( ::osg::Vec2s::*r_function_type)(  ) const;
            
            Vec2s_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec2s::r ) );
        
        }
        { //::osg::Vec2s::set
        
            typedef void ( ::osg::Vec2s::*set_function_type)( short int,short int ) ;
            
            Vec2s_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec2s::set )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osg::Vec2s::set
        
            typedef void ( ::osg::Vec2s::*set_function_type)( ::osg::Vec2s const & ) ;
            
            Vec2s_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec2s::set )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Vec2s::x
        
            typedef short int & ( ::osg::Vec2s::*x_function_type)(  ) ;
            
            Vec2s_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec2s::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2s::x
        
            typedef short int ( ::osg::Vec2s::*x_function_type)(  ) const;
            
            Vec2s_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec2s::x ) );
        
        }
        { //::osg::Vec2s::y
        
            typedef short int & ( ::osg::Vec2s::*y_function_type)(  ) ;
            
            Vec2s_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec2s::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2s::y
        
            typedef short int ( ::osg::Vec2s::*y_function_type)(  ) const;
            
            Vec2s_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec2s::y ) );
        
        }
    }

}
