// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "timer.pypp.hpp"

namespace bp = boost::python;

void register_Timer_class(){

    bp::class_< osg::Timer >( "Timer", bp::init< >() )    
        .def( 
            "delta_m"
            , (double ( ::osg::Timer::* )( ::osg::Timer_t,::osg::Timer_t )const)( &::osg::Timer::delta_m )
            , ( bp::arg("t1"), bp::arg("t2") ) )    
        .def( 
            "delta_n"
            , (double ( ::osg::Timer::* )( ::osg::Timer_t,::osg::Timer_t )const)( &::osg::Timer::delta_n )
            , ( bp::arg("t1"), bp::arg("t2") ) )    
        .def( 
            "delta_s"
            , (double ( ::osg::Timer::* )( ::osg::Timer_t,::osg::Timer_t )const)( &::osg::Timer::delta_s )
            , ( bp::arg("t1"), bp::arg("t2") ) )    
        .def( 
            "delta_u"
            , (double ( ::osg::Timer::* )( ::osg::Timer_t,::osg::Timer_t )const)( &::osg::Timer::delta_u )
            , ( bp::arg("t1"), bp::arg("t2") ) )    
        .def( 
            "getSecondsPerTick"
            , (double ( ::osg::Timer::* )(  )const)( &::osg::Timer::getSecondsPerTick ) )    
        .def( 
            "getStartTick"
            , (::osg::Timer_t ( ::osg::Timer::* )(  )const)( &::osg::Timer::getStartTick ) )    
        .def( 
            "instance"
            , (::osg::Timer * (*)(  ))( &::osg::Timer::instance )
                /* undefined call policies */ )    
        .def( 
            "setStartTick"
            , (void ( ::osg::Timer::* )(  ))( &::osg::Timer::setStartTick ) )    
        .def( 
            "setStartTick"
            , (void ( ::osg::Timer::* )( ::osg::Timer_t ))( &::osg::Timer::setStartTick )
            , ( bp::arg("t") ) )    
        .def( 
            "tick"
            , (::osg::Timer_t ( ::osg::Timer::* )(  )const)( &::osg::Timer::tick ) )    
        .def( 
            "time_m"
            , (double ( ::osg::Timer::* )(  )const)( &::osg::Timer::time_m ) )    
        .def( 
            "time_n"
            , (double ( ::osg::Timer::* )(  )const)( &::osg::Timer::time_n ) )    
        .def( 
            "time_s"
            , (double ( ::osg::Timer::* )(  )const)( &::osg::Timer::time_s ) )    
        .def( 
            "time_u"
            , (double ( ::osg::Timer::* )(  )const)( &::osg::Timer::time_u ) )    
        .staticmethod( "instance" );

}
