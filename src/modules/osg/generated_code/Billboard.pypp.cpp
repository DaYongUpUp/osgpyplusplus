// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "billboard.pypp.hpp"

namespace bp = boost::python;

struct Billboard_wrapper : osg::Billboard, bp::wrapper< osg::Billboard > {

    Billboard_wrapper( )
    : osg::Billboard( )
      , bp::wrapper< osg::Billboard >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::Billboard::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::Billboard::accept( boost::ref(nv) );
    }

    virtual bool addDrawable( ::osg::Drawable * gset ) {
        if( bp::override func_addDrawable = this->get_override( "addDrawable" ) )
            return func_addDrawable( boost::python::ptr(gset) );
        else{
            return this->osg::Billboard::addDrawable( boost::python::ptr(gset) );
        }
    }
    
    bool default_addDrawable( ::osg::Drawable * gset ) {
        return osg::Billboard::addDrawable( boost::python::ptr(gset) );
    }

    virtual bool addDrawable( ::osg::Drawable * gset, ::osg::Vec3 const & pos ) {
        if( bp::override func_addDrawable = this->get_override( "addDrawable" ) )
            return func_addDrawable( boost::python::ptr(gset), boost::ref(pos) );
        else{
            return this->osg::Billboard::addDrawable( boost::python::ptr(gset), boost::ref(pos) );
        }
    }
    
    bool default_addDrawable( ::osg::Drawable * gset, ::osg::Vec3 const & pos ) {
        return osg::Billboard::addDrawable( boost::python::ptr(gset), boost::ref(pos) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Billboard::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Billboard::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Billboard::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Billboard::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Billboard::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Billboard::cloneType( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Billboard::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Billboard::computeBound( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Billboard::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Billboard::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Billboard::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Billboard::libraryName( );
    }

    virtual bool removeDrawable( ::osg::Drawable * gset ) {
        if( bp::override func_removeDrawable = this->get_override( "removeDrawable" ) )
            return func_removeDrawable( boost::python::ptr(gset) );
        else{
            return this->osg::Billboard::removeDrawable( boost::python::ptr(gset) );
        }
    }
    
    bool default_removeDrawable( ::osg::Drawable * gset ) {
        return osg::Billboard::removeDrawable( boost::python::ptr(gset) );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Geode::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Geode::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Geode::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Geode::asGeode( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool removeDrawables( unsigned int i, unsigned int numDrawablesToRemove=1 ) {
        if( bp::override func_removeDrawables = this->get_override( "removeDrawables" ) )
            return func_removeDrawables( i, numDrawablesToRemove );
        else{
            return this->osg::Geode::removeDrawables( i, numDrawablesToRemove );
        }
    }
    
    bool default_removeDrawables( unsigned int i, unsigned int numDrawablesToRemove=1 ) {
        return osg::Geode::removeDrawables( i, numDrawablesToRemove );
    }

    virtual bool replaceDrawable( ::osg::Drawable * origDraw, ::osg::Drawable * newDraw ) {
        if( bp::override func_replaceDrawable = this->get_override( "replaceDrawable" ) )
            return func_replaceDrawable( boost::python::ptr(origDraw), boost::python::ptr(newDraw) );
        else{
            return this->osg::Geode::replaceDrawable( boost::python::ptr(origDraw), boost::python::ptr(newDraw) );
        }
    }
    
    bool default_replaceDrawable( ::osg::Drawable * origDraw, ::osg::Drawable * newDraw ) {
        return osg::Geode::replaceDrawable( boost::python::ptr(origDraw), boost::python::ptr(newDraw) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Geode::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Geode::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setDrawable( unsigned int i, ::osg::Drawable * drawable ) {
        if( bp::override func_setDrawable = this->get_override( "setDrawable" ) )
            return func_setDrawable( i, boost::python::ptr(drawable) );
        else{
            return this->osg::Geode::setDrawable( i, boost::python::ptr(drawable) );
        }
    }
    
    bool default_setDrawable( unsigned int i, ::osg::Drawable * drawable ) {
        return osg::Geode::setDrawable( i, boost::python::ptr(drawable) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Geode::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Geode::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Billboard_class(){

    { //::osg::Billboard
        typedef bp::class_< Billboard_wrapper, bp::bases< osg::Geode >, osg::ref_ptr< ::osg::Billboard >, boost::noncopyable > Billboard_exposer_t;
        Billboard_exposer_t Billboard_exposer = Billboard_exposer_t( "Billboard", bp::no_init );
        bp::scope Billboard_scope( Billboard_exposer );
        bp::enum_< osg::Billboard::Mode>("Mode")
            .value("POINT_ROT_EYE", osg::Billboard::POINT_ROT_EYE)
            .value("POINT_ROT_WORLD", osg::Billboard::POINT_ROT_WORLD)
            .value("AXIAL_ROT", osg::Billboard::AXIAL_ROT)
            .export_values()
            ;
        Billboard_exposer.def( bp::init< >() );
        { //::osg::Billboard::accept
        
            typedef void ( ::osg::Billboard::*accept_function_type)( ::osg::NodeVisitor & ) ;
            typedef void ( Billboard_wrapper::*default_accept_function_type)( ::osg::NodeVisitor & ) ;
            
            Billboard_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Billboard::accept)
                , default_accept_function_type(&Billboard_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Billboard::addDrawable
        
            typedef bool ( ::osg::Billboard::*addDrawable_function_type)( ::osg::Drawable * ) ;
            typedef bool ( Billboard_wrapper::*default_addDrawable_function_type)( ::osg::Drawable * ) ;
            
            Billboard_exposer.def( 
                "addDrawable"
                , addDrawable_function_type(&::osg::Billboard::addDrawable)
                , default_addDrawable_function_type(&Billboard_wrapper::default_addDrawable)
                , ( bp::arg("gset") ) );
        
        }
        { //::osg::Billboard::addDrawable
        
            typedef bool ( ::osg::Billboard::*addDrawable_function_type)( ::osg::Drawable *,::osg::Vec3 const & ) ;
            typedef bool ( Billboard_wrapper::*default_addDrawable_function_type)( ::osg::Drawable *,::osg::Vec3 const & ) ;
            
            Billboard_exposer.def( 
                "addDrawable"
                , addDrawable_function_type(&::osg::Billboard::addDrawable)
                , default_addDrawable_function_type(&Billboard_wrapper::default_addDrawable)
                , ( bp::arg("gset"), bp::arg("pos") ) );
        
        }
        { //::osg::Billboard::className
        
            typedef char const * ( ::osg::Billboard::*className_function_type)(  ) const;
            typedef char const * ( Billboard_wrapper::*default_className_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "className"
                , className_function_type(&::osg::Billboard::className)
                , default_className_function_type(&Billboard_wrapper::default_className) );
        
        }
        { //::osg::Billboard::clone
        
            typedef ::osg::Object * ( ::osg::Billboard::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Billboard_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            Billboard_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Billboard::clone)
                , default_clone_function_type(&Billboard_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Billboard::cloneType
        
            typedef ::osg::Object * ( ::osg::Billboard::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( Billboard_wrapper::*default_cloneType_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Billboard::cloneType)
                , default_cloneType_function_type(&Billboard_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Billboard::computeBound
        
            typedef ::osg::BoundingSphere ( ::osg::Billboard::*computeBound_function_type)(  ) const;
            typedef ::osg::BoundingSphere ( Billboard_wrapper::*default_computeBound_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::Billboard::computeBound)
                , default_computeBound_function_type(&Billboard_wrapper::default_computeBound) );
        
        }
        { //::osg::Billboard::computeMatrix
        
            typedef bool ( ::osg::Billboard::*computeMatrix_function_type)( ::osg::Matrix &,::osg::Vec3 const &,::osg::Vec3 const & ) const;
            
            Billboard_exposer.def( 
                "computeMatrix"
                , computeMatrix_function_type( &::osg::Billboard::computeMatrix )
                , ( bp::arg("modelview"), bp::arg("eye_local"), bp::arg("pos_local") ) );
        
        }
        { //::osg::Billboard::getAxis
        
            typedef ::osg::Vec3 const & ( ::osg::Billboard::*getAxis_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "getAxis"
                , getAxis_function_type( &::osg::Billboard::getAxis )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Billboard::getMode
        
            typedef ::osg::Billboard::Mode ( ::osg::Billboard::*getMode_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "getMode"
                , getMode_function_type( &::osg::Billboard::getMode ) );
        
        }
        { //::osg::Billboard::getNormal
        
            typedef ::osg::Vec3 const & ( ::osg::Billboard::*getNormal_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "getNormal"
                , getNormal_function_type( &::osg::Billboard::getNormal )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Billboard::getPosition
        
            typedef ::osg::Vec3 const & ( ::osg::Billboard::*getPosition_function_type)( unsigned int ) const;
            
            Billboard_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::osg::Billboard::getPosition )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Billboard::getPositionList
        
            typedef ::std::vector< osg::Vec3f > & ( ::osg::Billboard::*getPositionList_function_type)(  ) ;
            
            Billboard_exposer.def( 
                "getPositionList"
                , getPositionList_function_type( &::osg::Billboard::getPositionList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Billboard::getPositionList
        
            typedef ::std::vector< osg::Vec3f > const & ( ::osg::Billboard::*getPositionList_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "getPositionList"
                , getPositionList_function_type( &::osg::Billboard::getPositionList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Billboard::isSameKindAs
        
            typedef bool ( ::osg::Billboard::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Billboard_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Billboard_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Billboard::isSameKindAs)
                , default_isSameKindAs_function_type(&Billboard_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Billboard::libraryName
        
            typedef char const * ( ::osg::Billboard::*libraryName_function_type)(  ) const;
            typedef char const * ( Billboard_wrapper::*default_libraryName_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Billboard::libraryName)
                , default_libraryName_function_type(&Billboard_wrapper::default_libraryName) );
        
        }
        { //::osg::Billboard::removeDrawable
        
            typedef bool ( ::osg::Billboard::*removeDrawable_function_type)( ::osg::Drawable * ) ;
            typedef bool ( Billboard_wrapper::*default_removeDrawable_function_type)( ::osg::Drawable * ) ;
            
            Billboard_exposer.def( 
                "removeDrawable"
                , removeDrawable_function_type(&::osg::Billboard::removeDrawable)
                , default_removeDrawable_function_type(&Billboard_wrapper::default_removeDrawable)
                , ( bp::arg("gset") ) );
        
        }
        { //::osg::Billboard::setAxis
        
            typedef void ( ::osg::Billboard::*setAxis_function_type)( ::osg::Vec3 const & ) ;
            
            Billboard_exposer.def( 
                "setAxis"
                , setAxis_function_type( &::osg::Billboard::setAxis )
                , ( bp::arg("axis") ) );
        
        }
        { //::osg::Billboard::setMode
        
            typedef void ( ::osg::Billboard::*setMode_function_type)( ::osg::Billboard::Mode ) ;
            
            Billboard_exposer.def( 
                "setMode"
                , setMode_function_type( &::osg::Billboard::setMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::Billboard::setNormal
        
            typedef void ( ::osg::Billboard::*setNormal_function_type)( ::osg::Vec3 const & ) ;
            
            Billboard_exposer.def( 
                "setNormal"
                , setNormal_function_type( &::osg::Billboard::setNormal )
                , ( bp::arg("normal") ) );
        
        }
        { //::osg::Billboard::setPosition
        
            typedef void ( ::osg::Billboard::*setPosition_function_type)( unsigned int,::osg::Vec3 const & ) ;
            
            Billboard_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::osg::Billboard::setPosition )
                , ( bp::arg("i"), bp::arg("pos") ) );
        
        }
        { //::osg::Billboard::setPositionList
        
            typedef void ( ::osg::Billboard::*setPositionList_function_type)( ::std::vector< osg::Vec3f > & ) ;
            
            Billboard_exposer.def( 
                "setPositionList"
                , setPositionList_function_type( &::osg::Billboard::setPositionList )
                , ( bp::arg("pl") ) );
        
        }
        { //::osg::Geode::asGeode
        
            typedef ::osg::Geode * ( ::osg::Geode::*asGeode_function_type)(  ) ;
            typedef ::osg::Geode * ( Billboard_wrapper::*default_asGeode_function_type)(  ) ;
            
            Billboard_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Geode::asGeode)
                , default_asGeode_function_type(&Billboard_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geode::asGeode
        
            typedef ::osg::Geode const * ( ::osg::Geode::*asGeode_function_type)(  ) const;
            typedef ::osg::Geode const * ( Billboard_wrapper::*default_asGeode_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Geode::asGeode)
                , default_asGeode_function_type(&Billboard_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Billboard_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Billboard_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Billboard_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Billboard_wrapper::*default_getUserData_function_type)(  ) ;
            
            Billboard_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Billboard_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Billboard_wrapper::*default_getUserData_function_type)(  ) const;
            
            Billboard_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Billboard_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geode::removeDrawables
        
            typedef bool ( ::osg::Geode::*removeDrawables_function_type)( unsigned int,unsigned int ) ;
            typedef bool ( Billboard_wrapper::*default_removeDrawables_function_type)( unsigned int,unsigned int ) ;
            
            Billboard_exposer.def( 
                "removeDrawables"
                , removeDrawables_function_type(&::osg::Geode::removeDrawables)
                , default_removeDrawables_function_type(&Billboard_wrapper::default_removeDrawables)
                , ( bp::arg("i"), bp::arg("numDrawablesToRemove")=(unsigned int)(1) ) );
        
        }
        { //::osg::Geode::replaceDrawable
        
            typedef bool ( ::osg::Geode::*replaceDrawable_function_type)( ::osg::Drawable *,::osg::Drawable * ) ;
            typedef bool ( Billboard_wrapper::*default_replaceDrawable_function_type)( ::osg::Drawable *,::osg::Drawable * ) ;
            
            Billboard_exposer.def( 
                "replaceDrawable"
                , replaceDrawable_function_type(&::osg::Geode::replaceDrawable)
                , default_replaceDrawable_function_type(&Billboard_wrapper::default_replaceDrawable)
                , ( bp::arg("origDraw"), bp::arg("newDraw") ) );
        
        }
        { //::osg::Geode::resizeGLObjectBuffers
        
            typedef void ( ::osg::Geode::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Billboard_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Billboard_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Geode::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Billboard_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Geode::setDrawable
        
            typedef bool ( ::osg::Geode::*setDrawable_function_type)( unsigned int,::osg::Drawable * ) ;
            typedef bool ( Billboard_wrapper::*default_setDrawable_function_type)( unsigned int,::osg::Drawable * ) ;
            
            Billboard_exposer.def( 
                "setDrawable"
                , setDrawable_function_type(&::osg::Geode::setDrawable)
                , default_setDrawable_function_type(&Billboard_wrapper::default_setDrawable)
                , ( bp::arg("i"), bp::arg("drawable") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Billboard_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Billboard_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Billboard_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Billboard_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Geode::setThreadSafeRefUnref
        
            typedef void ( ::osg::Geode::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Billboard_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Billboard_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Geode::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Billboard_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Billboard_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Billboard_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Billboard_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
