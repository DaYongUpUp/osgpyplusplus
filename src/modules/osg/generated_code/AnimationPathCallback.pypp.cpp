// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "animationpathcallback.pypp.hpp"

namespace bp = boost::python;

struct AnimationPathCallback_wrapper : osg::AnimationPathCallback, bp::wrapper< osg::AnimationPathCallback > {

    AnimationPathCallback_wrapper( )
    : osg::AnimationPathCallback( )
      , bp::wrapper< osg::AnimationPathCallback >(){
        // null constructor
    
    }

    AnimationPathCallback_wrapper(::osg::AnimationPath * ap, double timeOffset=0.0, double timeMultiplier=1.0e+0 )
    : osg::AnimationPathCallback( boost::python::ptr(ap), timeOffset, timeMultiplier )
      , bp::wrapper< osg::AnimationPathCallback >(){
        // constructor
    
    }

    AnimationPathCallback_wrapper(::osg::Vec3d const & pivot, ::osg::Vec3d const & axis, float angularVelocity )
    : osg::AnimationPathCallback( boost::ref(pivot), boost::ref(axis), angularVelocity )
      , bp::wrapper< osg::AnimationPathCallback >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::AnimationPathCallback::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::AnimationPathCallback::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::AnimationPathCallback::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::AnimationPathCallback::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::AnimationPathCallback::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::AnimationPathCallback::cloneType( );
    }

    virtual double getAnimationTime(  ) const  {
        if( bp::override func_getAnimationTime = this->get_override( "getAnimationTime" ) )
            return func_getAnimationTime(  );
        else{
            return this->osg::AnimationPathCallback::getAnimationTime(  );
        }
    }
    
    double default_getAnimationTime(  ) const  {
        return osg::AnimationPathCallback::getAnimationTime( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::AnimationPathCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::AnimationPathCallback::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::AnimationPathCallback::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::AnimationPathCallback::libraryName( );
    }

    virtual void operator()( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        if( bp::override func___call__ = this->get_override( "__call__" ) )
            func___call__( boost::python::ptr(node), boost::python::ptr(nv) );
        else{
            this->osg::AnimationPathCallback::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
        }
    }
    
    void default___call__( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        osg::AnimationPathCallback::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osg::AnimationPathCallback::reset(  );
        }
    }
    
    void default_reset(  ) {
        osg::AnimationPathCallback::reset( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_AnimationPathCallback_class(){

    { //::osg::AnimationPathCallback
        typedef bp::class_< AnimationPathCallback_wrapper, bp::bases< osg::NodeCallback >, osg::ref_ptr< AnimationPathCallback_wrapper >, boost::noncopyable > AnimationPathCallback_exposer_t;
        AnimationPathCallback_exposer_t AnimationPathCallback_exposer = AnimationPathCallback_exposer_t( "AnimationPathCallback", bp::no_init );
        bp::scope AnimationPathCallback_scope( AnimationPathCallback_exposer );
        AnimationPathCallback_exposer.def( bp::init< >() );
        AnimationPathCallback_exposer.def( bp::init< osg::AnimationPath *, bp::optional< double, double > >(( bp::arg("ap"), bp::arg("timeOffset")=0.0, bp::arg("timeMultiplier")=1.0e+0 ), "\n Construct an AnimationPathCallback with a specified animation path.\n") );
        bp::implicitly_convertible< osg::AnimationPath *, osg::AnimationPathCallback >();
        AnimationPathCallback_exposer.def( bp::init< osg::Vec3d const &, osg::Vec3d const &, float >(( bp::arg("pivot"), bp::arg("axis"), bp::arg("angularVelocity") ), "\n Construct an AnimationPathCallback and automatically create an animation path to produce a rotation about a point.\n") );
        { //::osg::AnimationPathCallback::className
        
            typedef char const * ( ::osg::AnimationPathCallback::*className_function_type)(  ) const;
            typedef char const * ( AnimationPathCallback_wrapper::*default_className_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "className"
                , className_function_type(&::osg::AnimationPathCallback::className)
                , default_className_function_type(&AnimationPathCallback_wrapper::default_className) );
        
        }
        { //::osg::AnimationPathCallback::clone
        
            typedef ::osg::Object * ( ::osg::AnimationPathCallback::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( AnimationPathCallback_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            AnimationPathCallback_exposer.def( 
                "clone"
                , clone_function_type(&::osg::AnimationPathCallback::clone)
                , default_clone_function_type(&AnimationPathCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::AnimationPathCallback::cloneType
        
            typedef ::osg::Object * ( ::osg::AnimationPathCallback::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( AnimationPathCallback_wrapper::*default_cloneType_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::AnimationPathCallback::cloneType)
                , default_cloneType_function_type(&AnimationPathCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::AnimationPathCallback::getAnimationPath
        
            typedef ::osg::AnimationPath * ( ::osg::AnimationPathCallback::*getAnimationPath_function_type)(  ) ;
            
            AnimationPathCallback_exposer.def( 
                "getAnimationPath"
                , getAnimationPath_function_type( &::osg::AnimationPathCallback::getAnimationPath )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::AnimationPathCallback::getAnimationPath
        
            typedef ::osg::AnimationPath const * ( ::osg::AnimationPathCallback::*getAnimationPath_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getAnimationPath"
                , getAnimationPath_function_type( &::osg::AnimationPathCallback::getAnimationPath )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::AnimationPathCallback::getAnimationTime
        
            typedef double ( ::osg::AnimationPathCallback::*getAnimationTime_function_type)(  ) const;
            typedef double ( AnimationPathCallback_wrapper::*default_getAnimationTime_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getAnimationTime"
                , getAnimationTime_function_type(&::osg::AnimationPathCallback::getAnimationTime)
                , default_getAnimationTime_function_type(&AnimationPathCallback_wrapper::default_getAnimationTime) );
        
        }
        { //::osg::AnimationPathCallback::getPause
        
            typedef bool ( ::osg::AnimationPathCallback::*getPause_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getPause"
                , getPause_function_type( &::osg::AnimationPathCallback::getPause ) );
        
        }
        { //::osg::AnimationPathCallback::getPivotPoint
        
            typedef ::osg::Vec3d const & ( ::osg::AnimationPathCallback::*getPivotPoint_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getPivotPoint"
                , getPivotPoint_function_type( &::osg::AnimationPathCallback::getPivotPoint )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::AnimationPathCallback::getTimeMultiplier
        
            typedef double ( ::osg::AnimationPathCallback::*getTimeMultiplier_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getTimeMultiplier"
                , getTimeMultiplier_function_type( &::osg::AnimationPathCallback::getTimeMultiplier ) );
        
        }
        { //::osg::AnimationPathCallback::getTimeOffset
        
            typedef double ( ::osg::AnimationPathCallback::*getTimeOffset_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getTimeOffset"
                , getTimeOffset_function_type( &::osg::AnimationPathCallback::getTimeOffset ) );
        
        }
        { //::osg::AnimationPathCallback::getUseInverseMatrix
        
            typedef bool ( ::osg::AnimationPathCallback::*getUseInverseMatrix_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getUseInverseMatrix"
                , getUseInverseMatrix_function_type( &::osg::AnimationPathCallback::getUseInverseMatrix ) );
        
        }
        { //::osg::AnimationPathCallback::isSameKindAs
        
            typedef bool ( ::osg::AnimationPathCallback::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( AnimationPathCallback_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            AnimationPathCallback_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::AnimationPathCallback::isSameKindAs)
                , default_isSameKindAs_function_type(&AnimationPathCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::AnimationPathCallback::libraryName
        
            typedef char const * ( ::osg::AnimationPathCallback::*libraryName_function_type)(  ) const;
            typedef char const * ( AnimationPathCallback_wrapper::*default_libraryName_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::AnimationPathCallback::libraryName)
                , default_libraryName_function_type(&AnimationPathCallback_wrapper::default_libraryName) );
        
        }
        { //::osg::AnimationPathCallback::operator()
        
            typedef void ( ::osg::AnimationPathCallback::*__call___function_type)( ::osg::Node *,::osg::NodeVisitor * ) ;
            typedef void ( AnimationPathCallback_wrapper::*default___call___function_type)( ::osg::Node *,::osg::NodeVisitor * ) ;
            
            AnimationPathCallback_exposer.def( 
                "__call__"
                , __call___function_type(&::osg::AnimationPathCallback::operator())
                , default___call___function_type(&AnimationPathCallback_wrapper::default___call__)
                , ( bp::arg("node"), bp::arg("nv") ) );
        
        }
        { //::osg::AnimationPathCallback::reset
        
            typedef void ( ::osg::AnimationPathCallback::*reset_function_type)(  ) ;
            typedef void ( AnimationPathCallback_wrapper::*default_reset_function_type)(  ) ;
            
            AnimationPathCallback_exposer.def( 
                "reset"
                , reset_function_type(&::osg::AnimationPathCallback::reset)
                , default_reset_function_type(&AnimationPathCallback_wrapper::default_reset) );
        
        }
        { //::osg::AnimationPathCallback::setAnimationPath
        
            typedef void ( ::osg::AnimationPathCallback::*setAnimationPath_function_type)( ::osg::AnimationPath * ) ;
            
            AnimationPathCallback_exposer.def( 
                "setAnimationPath"
                , setAnimationPath_function_type( &::osg::AnimationPathCallback::setAnimationPath )
                , ( bp::arg("path") ) );
        
        }
        { //::osg::AnimationPathCallback::setPause
        
            typedef void ( ::osg::AnimationPathCallback::*setPause_function_type)( bool ) ;
            
            AnimationPathCallback_exposer.def( 
                "setPause"
                , setPause_function_type( &::osg::AnimationPathCallback::setPause )
                , ( bp::arg("pause") ) );
        
        }
        { //::osg::AnimationPathCallback::setPivotPoint
        
            typedef void ( ::osg::AnimationPathCallback::*setPivotPoint_function_type)( ::osg::Vec3d const & ) ;
            
            AnimationPathCallback_exposer.def( 
                "setPivotPoint"
                , setPivotPoint_function_type( &::osg::AnimationPathCallback::setPivotPoint )
                , ( bp::arg("pivot") ) );
        
        }
        { //::osg::AnimationPathCallback::setTimeMultiplier
        
            typedef void ( ::osg::AnimationPathCallback::*setTimeMultiplier_function_type)( double ) ;
            
            AnimationPathCallback_exposer.def( 
                "setTimeMultiplier"
                , setTimeMultiplier_function_type( &::osg::AnimationPathCallback::setTimeMultiplier )
                , ( bp::arg("multiplier") ) );
        
        }
        { //::osg::AnimationPathCallback::setTimeOffset
        
            typedef void ( ::osg::AnimationPathCallback::*setTimeOffset_function_type)( double ) ;
            
            AnimationPathCallback_exposer.def( 
                "setTimeOffset"
                , setTimeOffset_function_type( &::osg::AnimationPathCallback::setTimeOffset )
                , ( bp::arg("offset") ) );
        
        }
        { //::osg::AnimationPathCallback::setUseInverseMatrix
        
            typedef void ( ::osg::AnimationPathCallback::*setUseInverseMatrix_function_type)( bool ) ;
            
            AnimationPathCallback_exposer.def( 
                "setUseInverseMatrix"
                , setUseInverseMatrix_function_type( &::osg::AnimationPathCallback::setUseInverseMatrix )
                , ( bp::arg("useInverseMatrix") ) );
        
        }
        { //::osg::AnimationPathCallback::update
        
            typedef void ( ::osg::AnimationPathCallback::*update_function_type)( ::osg::Node & ) ;
            
            AnimationPathCallback_exposer.def( 
                "update"
                , update_function_type( &::osg::AnimationPathCallback::update )
                , ( bp::arg("node") ) );
        
        }
        AnimationPathCallback_exposer.def_readwrite( "_animationPath", &osg::AnimationPathCallback::_animationPath );
        AnimationPathCallback_exposer.def_readwrite( "_firstTime", &osg::AnimationPathCallback::_firstTime );
        AnimationPathCallback_exposer.def_readwrite( "_latestTime", &osg::AnimationPathCallback::_latestTime );
        AnimationPathCallback_exposer.def_readwrite( "_pause", &osg::AnimationPathCallback::_pause );
        AnimationPathCallback_exposer.def_readwrite( "_pauseTime", &osg::AnimationPathCallback::_pauseTime );
        AnimationPathCallback_exposer.def_readwrite( "_pivotPoint", &osg::AnimationPathCallback::_pivotPoint );
        AnimationPathCallback_exposer.def_readwrite( "_timeMultiplier", &osg::AnimationPathCallback::_timeMultiplier );
        AnimationPathCallback_exposer.def_readwrite( "_timeOffset", &osg::AnimationPathCallback::_timeOffset );
        AnimationPathCallback_exposer.def_readwrite( "_useInverseMatrix", &osg::AnimationPathCallback::_useInverseMatrix );
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( AnimationPathCallback_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            AnimationPathCallback_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&AnimationPathCallback_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( AnimationPathCallback_wrapper::*default_getUserData_function_type)(  ) ;
            
            AnimationPathCallback_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&AnimationPathCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( AnimationPathCallback_wrapper::*default_getUserData_function_type)(  ) const;
            
            AnimationPathCallback_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&AnimationPathCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::resizeGLObjectBuffers
        
            typedef void ( ::osg::Object::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( AnimationPathCallback_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            AnimationPathCallback_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Object::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&AnimationPathCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( AnimationPathCallback_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            AnimationPathCallback_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&AnimationPathCallback_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            AnimationPathCallback_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") )
                , " Set the name of object using a C style string." );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( AnimationPathCallback_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            AnimationPathCallback_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&AnimationPathCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( AnimationPathCallback_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            AnimationPathCallback_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&AnimationPathCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
