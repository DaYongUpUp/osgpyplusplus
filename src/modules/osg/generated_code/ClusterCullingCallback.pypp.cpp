// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "clustercullingcallback.pypp.hpp"

namespace bp = boost::python;

struct ClusterCullingCallback_wrapper : osg::ClusterCullingCallback, bp::wrapper< osg::ClusterCullingCallback > {

    ClusterCullingCallback_wrapper( )
    : osg::ClusterCullingCallback( )
      , bp::wrapper< osg::ClusterCullingCallback >(){
        // null constructor
    
    }

    ClusterCullingCallback_wrapper(::osg::Vec3 const & controlPoint, ::osg::Vec3 const & normal, float deviation )
    : osg::ClusterCullingCallback( boost::ref(controlPoint), boost::ref(normal), deviation )
      , bp::wrapper< osg::ClusterCullingCallback >(){
        // constructor
    
    }

    ClusterCullingCallback_wrapper(::osg::Drawable const * drawable )
    : osg::ClusterCullingCallback( boost::python::ptr(drawable) )
      , bp::wrapper< osg::ClusterCullingCallback >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::ClusterCullingCallback::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::ClusterCullingCallback::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::ClusterCullingCallback::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::ClusterCullingCallback::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::ClusterCullingCallback::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::ClusterCullingCallback::cloneType( );
    }

    virtual bool cull( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1, ::osg::State * arg2 ) const  {
        if( bp::override func_cull = this->get_override( "cull" ) )
            return func_cull( boost::python::ptr(arg0), boost::python::ptr(arg1), boost::python::ptr(arg2) );
        else{
            return this->osg::ClusterCullingCallback::cull( boost::python::ptr(arg0), boost::python::ptr(arg1), boost::python::ptr(arg2) );
        }
    }
    
    bool default_cull( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1, ::osg::State * arg2 ) const  {
        return osg::ClusterCullingCallback::cull( boost::python::ptr(arg0), boost::python::ptr(arg1), boost::python::ptr(arg2) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::ClusterCullingCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::ClusterCullingCallback::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::ClusterCullingCallback::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::ClusterCullingCallback::libraryName( );
    }

    virtual void operator()( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        if( bp::override func___call__ = this->get_override( "__call__" ) )
            func___call__( boost::python::ptr(node), boost::python::ptr(nv) );
        else{
            this->osg::ClusterCullingCallback::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
        }
    }
    
    void default___call__( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        osg::ClusterCullingCallback::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual bool cull( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable, ::osg::RenderInfo * renderInfo ) const  {
        if( bp::override func_cull = this->get_override( "cull" ) )
            return func_cull( boost::python::ptr(nv), boost::python::ptr(drawable), boost::python::ptr(renderInfo) );
        else{
            return this->osg::Drawable::CullCallback::cull( boost::python::ptr(nv), boost::python::ptr(drawable), boost::python::ptr(renderInfo) );
        }
    }
    
    bool default_cull( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable, ::osg::RenderInfo * renderInfo ) const  {
        return osg::Drawable::CullCallback::cull( boost::python::ptr(nv), boost::python::ptr(drawable), boost::python::ptr(renderInfo) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ClusterCullingCallback_class(){

    { //::osg::ClusterCullingCallback
        typedef bp::class_< ClusterCullingCallback_wrapper, bp::bases< osg::Drawable::CullCallback, osg::NodeCallback >, osg::ref_ptr< ::osg::ClusterCullingCallback >, boost::noncopyable > ClusterCullingCallback_exposer_t;
        ClusterCullingCallback_exposer_t ClusterCullingCallback_exposer = ClusterCullingCallback_exposer_t( "ClusterCullingCallback", "\n Implements cluster culling to cull back facing drawables. Derived from\n Drawable::CullCallback.\n", bp::no_init );
        bp::scope ClusterCullingCallback_scope( ClusterCullingCallback_exposer );
        ClusterCullingCallback_exposer.def( bp::init< >("\n Implements cluster culling to cull back facing drawables. Derived from\n Drawable::CullCallback.\n") );
        ClusterCullingCallback_exposer.def( bp::init< osg::Vec3 const &, osg::Vec3 const &, float >(( bp::arg("controlPoint"), bp::arg("normal"), bp::arg("deviation") )) );
        ClusterCullingCallback_exposer.def( bp::init< osg::Drawable const * >(( bp::arg("drawable") )) );
        bp::implicitly_convertible< osg::Drawable const *, osg::ClusterCullingCallback >();
        { //::osg::ClusterCullingCallback::className
        
            typedef char const * ( ::osg::ClusterCullingCallback::*className_function_type)(  ) const;
            typedef char const * ( ClusterCullingCallback_wrapper::*default_className_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "className"
                , className_function_type(&::osg::ClusterCullingCallback::className)
                , default_className_function_type(&ClusterCullingCallback_wrapper::default_className) );
        
        }
        { //::osg::ClusterCullingCallback::clone
        
            typedef ::osg::Object * ( ::osg::ClusterCullingCallback::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ClusterCullingCallback_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            ClusterCullingCallback_exposer.def( 
                "clone"
                , clone_function_type(&::osg::ClusterCullingCallback::clone)
                , default_clone_function_type(&ClusterCullingCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ClusterCullingCallback::cloneType
        
            typedef ::osg::Object * ( ::osg::ClusterCullingCallback::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( ClusterCullingCallback_wrapper::*default_cloneType_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::ClusterCullingCallback::cloneType)
                , default_cloneType_function_type(&ClusterCullingCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ClusterCullingCallback::computeFrom
        
            typedef void ( ::osg::ClusterCullingCallback::*computeFrom_function_type)( ::osg::Drawable const * ) ;
            
            ClusterCullingCallback_exposer.def( 
                "computeFrom"
                , computeFrom_function_type( &::osg::ClusterCullingCallback::computeFrom )
                , ( bp::arg("drawable") )
                , " Computes the control point, normal, and deviation from the\n given drawable contents." );
        
        }
        { //::osg::ClusterCullingCallback::cull
        
            typedef bool ( ::osg::ClusterCullingCallback::*cull_function_type)( ::osg::NodeVisitor *,::osg::Drawable *,::osg::State * ) const;
            typedef bool ( ClusterCullingCallback_wrapper::*default_cull_function_type)( ::osg::NodeVisitor *,::osg::Drawable *,::osg::State * ) const;
            
            ClusterCullingCallback_exposer.def( 
                "cull"
                , cull_function_type(&::osg::ClusterCullingCallback::cull)
                , default_cull_function_type(&ClusterCullingCallback_wrapper::default_cull)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osg::ClusterCullingCallback::getControlPoint
        
            typedef ::osg::Vec3 const & ( ::osg::ClusterCullingCallback::*getControlPoint_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "getControlPoint"
                , getControlPoint_function_type( &::osg::ClusterCullingCallback::getControlPoint )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ClusterCullingCallback::getDeviation
        
            typedef float ( ::osg::ClusterCullingCallback::*getDeviation_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "getDeviation"
                , getDeviation_function_type( &::osg::ClusterCullingCallback::getDeviation ) );
        
        }
        { //::osg::ClusterCullingCallback::getNormal
        
            typedef ::osg::Vec3 const & ( ::osg::ClusterCullingCallback::*getNormal_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "getNormal"
                , getNormal_function_type( &::osg::ClusterCullingCallback::getNormal )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ClusterCullingCallback::getRadius
        
            typedef float ( ::osg::ClusterCullingCallback::*getRadius_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "getRadius"
                , getRadius_function_type( &::osg::ClusterCullingCallback::getRadius ) );
        
        }
        { //::osg::ClusterCullingCallback::isSameKindAs
        
            typedef bool ( ::osg::ClusterCullingCallback::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( ClusterCullingCallback_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            ClusterCullingCallback_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::ClusterCullingCallback::isSameKindAs)
                , default_isSameKindAs_function_type(&ClusterCullingCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::ClusterCullingCallback::libraryName
        
            typedef char const * ( ::osg::ClusterCullingCallback::*libraryName_function_type)(  ) const;
            typedef char const * ( ClusterCullingCallback_wrapper::*default_libraryName_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::ClusterCullingCallback::libraryName)
                , default_libraryName_function_type(&ClusterCullingCallback_wrapper::default_libraryName) );
        
        }
        { //::osg::ClusterCullingCallback::operator()
        
            typedef void ( ::osg::ClusterCullingCallback::*__call___function_type)( ::osg::Node *,::osg::NodeVisitor * ) ;
            typedef void ( ClusterCullingCallback_wrapper::*default___call___function_type)( ::osg::Node *,::osg::NodeVisitor * ) ;
            
            ClusterCullingCallback_exposer.def( 
                "__call__"
                , __call___function_type(&::osg::ClusterCullingCallback::operator())
                , default___call___function_type(&ClusterCullingCallback_wrapper::default___call__)
                , ( bp::arg("node"), bp::arg("nv") ) );
        
        }
        { //::osg::ClusterCullingCallback::set
        
            typedef void ( ::osg::ClusterCullingCallback::*set_function_type)( ::osg::Vec3 const &,::osg::Vec3 const &,float,float ) ;
            
            ClusterCullingCallback_exposer.def( 
                "set"
                , set_function_type( &::osg::ClusterCullingCallback::set )
                , ( bp::arg("controlPoint"), bp::arg("normal"), bp::arg("deviation"), bp::arg("radius") ) );
        
        }
        { //::osg::ClusterCullingCallback::setControlPoint
        
            typedef void ( ::osg::ClusterCullingCallback::*setControlPoint_function_type)( ::osg::Vec3 const & ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setControlPoint"
                , setControlPoint_function_type( &::osg::ClusterCullingCallback::setControlPoint )
                , ( bp::arg("controlPoint") ) );
        
        }
        { //::osg::ClusterCullingCallback::setDeviation
        
            typedef void ( ::osg::ClusterCullingCallback::*setDeviation_function_type)( float ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setDeviation"
                , setDeviation_function_type( &::osg::ClusterCullingCallback::setDeviation )
                , ( bp::arg("deviation") ) );
        
        }
        { //::osg::ClusterCullingCallback::setNormal
        
            typedef void ( ::osg::ClusterCullingCallback::*setNormal_function_type)( ::osg::Vec3 const & ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setNormal"
                , setNormal_function_type( &::osg::ClusterCullingCallback::setNormal )
                , ( bp::arg("normal") ) );
        
        }
        { //::osg::ClusterCullingCallback::setRadius
        
            typedef void ( ::osg::ClusterCullingCallback::*setRadius_function_type)( float ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setRadius"
                , setRadius_function_type( &::osg::ClusterCullingCallback::setRadius )
                , ( bp::arg("radius") ) );
        
        }
        { //::osg::ClusterCullingCallback::transform
        
            typedef void ( ::osg::ClusterCullingCallback::*transform_function_type)( ::osg::Matrixd const & ) ;
            
            ClusterCullingCallback_exposer.def( 
                "transform"
                , transform_function_type( &::osg::ClusterCullingCallback::transform )
                , ( bp::arg("matrix") )
                , " Transform the ClusterCullingCallbacks positional members to a new coordinate frame." );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( ClusterCullingCallback_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            ClusterCullingCallback_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&ClusterCullingCallback_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Drawable::CullCallback::cull
        
            typedef bool ( ::osg::Drawable::CullCallback::*cull_function_type)( ::osg::NodeVisitor *,::osg::Drawable *,::osg::RenderInfo * ) const;
            typedef bool ( ClusterCullingCallback_wrapper::*default_cull_function_type)( ::osg::NodeVisitor *,::osg::Drawable *,::osg::RenderInfo * ) const;
            
            ClusterCullingCallback_exposer.def( 
                "cull"
                , cull_function_type(&::osg::Drawable::CullCallback::cull)
                , default_cull_function_type(&ClusterCullingCallback_wrapper::default_cull)
                , ( bp::arg("nv"), bp::arg("drawable"), bp::arg("renderInfo") ) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( ClusterCullingCallback_wrapper::*default_getUserData_function_type)(  ) ;
            
            ClusterCullingCallback_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&ClusterCullingCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( ClusterCullingCallback_wrapper::*default_getUserData_function_type)(  ) const;
            
            ClusterCullingCallback_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&ClusterCullingCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::resizeGLObjectBuffers
        
            typedef void ( ::osg::Object::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( ClusterCullingCallback_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            ClusterCullingCallback_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Object::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&ClusterCullingCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( ClusterCullingCallback_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&ClusterCullingCallback_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") )
                , " Set the name of object using a C style string." );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( ClusterCullingCallback_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&ClusterCullingCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( ClusterCullingCallback_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            ClusterCullingCallback_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&ClusterCullingCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
