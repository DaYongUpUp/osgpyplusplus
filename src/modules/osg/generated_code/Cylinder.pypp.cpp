// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "cylinder.pypp.hpp"

namespace bp = boost::python;

struct Cylinder_wrapper : osg::Cylinder, bp::wrapper< osg::Cylinder > {

    Cylinder_wrapper( )
    : osg::Cylinder( )
      , bp::wrapper< osg::Cylinder >(){
        // null constructor
    
    }

    Cylinder_wrapper(::osg::Vec3 const & center, float radius, float height )
    : osg::Cylinder( boost::ref(center), radius, height )
      , bp::wrapper< osg::Cylinder >(){
        // constructor
    
    }

    Cylinder_wrapper(::osg::Cylinder const & cylinder, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::Cylinder( boost::ref(cylinder), boost::ref(copyop) )
      , bp::wrapper< osg::Cylinder >(){
        // constructor
    
    }

    virtual void accept( ::osg::ShapeVisitor & sv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(sv) );
        else{
            this->osg::Cylinder::accept( boost::ref(sv) );
        }
    }
    
    void default_accept( ::osg::ShapeVisitor & sv ) {
        osg::Cylinder::accept( boost::ref(sv) );
    }

    virtual void accept( ::osg::ConstShapeVisitor & csv ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(csv) );
        else{
            this->osg::Cylinder::accept( boost::ref(csv) );
        }
    }
    
    void default_accept( ::osg::ConstShapeVisitor & csv ) const  {
        osg::Cylinder::accept( boost::ref(csv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Cylinder::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Cylinder::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Cylinder::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Cylinder::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Cylinder::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Cylinder::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Cylinder::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Cylinder::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Cylinder::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Cylinder::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Cylinder_class(){

    { //::osg::Cylinder
        typedef bp::class_< Cylinder_wrapper, bp::bases< osg::Shape >, boost::noncopyable > Cylinder_exposer_t;
        Cylinder_exposer_t Cylinder_exposer = Cylinder_exposer_t( "Cylinder", bp::no_init );
        bp::scope Cylinder_scope( Cylinder_exposer );
        Cylinder_exposer.def( bp::init< >() );
        Cylinder_exposer.def( bp::init< osg::Vec3 const &, float, float >(( bp::arg("center"), bp::arg("radius"), bp::arg("height") )) );
        Cylinder_exposer.def( bp::init< osg::Cylinder const &, bp::optional< osg::CopyOp const & > >(( bp::arg("cylinder"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::Cylinder const &, osg::Cylinder >();
        { //::osg::Cylinder::accept
        
            typedef void ( ::osg::Cylinder::*accept_function_type)( ::osg::ShapeVisitor & ) ;
            typedef void ( Cylinder_wrapper::*default_accept_function_type)( ::osg::ShapeVisitor & ) ;
            
            Cylinder_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Cylinder::accept)
                , default_accept_function_type(&Cylinder_wrapper::default_accept)
                , ( bp::arg("sv") ) );
        
        }
        { //::osg::Cylinder::accept
        
            typedef void ( ::osg::Cylinder::*accept_function_type)( ::osg::ConstShapeVisitor & ) const;
            typedef void ( Cylinder_wrapper::*default_accept_function_type)( ::osg::ConstShapeVisitor & ) const;
            
            Cylinder_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Cylinder::accept)
                , default_accept_function_type(&Cylinder_wrapper::default_accept)
                , ( bp::arg("csv") ) );
        
        }
        { //::osg::Cylinder::className
        
            typedef char const * ( ::osg::Cylinder::*className_function_type)(  ) const;
            typedef char const * ( Cylinder_wrapper::*default_className_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "className"
                , className_function_type(&::osg::Cylinder::className)
                , default_className_function_type(&Cylinder_wrapper::default_className) );
        
        }
        { //::osg::Cylinder::clone
        
            typedef ::osg::Object * ( ::osg::Cylinder::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Cylinder_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            Cylinder_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Cylinder::clone)
                , default_clone_function_type(&Cylinder_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Cylinder::cloneType
        
            typedef ::osg::Object * ( ::osg::Cylinder::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( Cylinder_wrapper::*default_cloneType_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Cylinder::cloneType)
                , default_cloneType_function_type(&Cylinder_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Cylinder::computeRotationMatrix
        
            typedef ::osg::Matrix ( ::osg::Cylinder::*computeRotationMatrix_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "computeRotationMatrix"
                , computeRotationMatrix_function_type( &::osg::Cylinder::computeRotationMatrix ) );
        
        }
        { //::osg::Cylinder::getCenter
        
            typedef ::osg::Vec3 const & ( ::osg::Cylinder::*getCenter_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::osg::Cylinder::getCenter )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Cylinder::getHeight
        
            typedef float ( ::osg::Cylinder::*getHeight_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::osg::Cylinder::getHeight ) );
        
        }
        { //::osg::Cylinder::getRadius
        
            typedef float ( ::osg::Cylinder::*getRadius_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "getRadius"
                , getRadius_function_type( &::osg::Cylinder::getRadius ) );
        
        }
        { //::osg::Cylinder::getRotation
        
            typedef ::osg::Quat const & ( ::osg::Cylinder::*getRotation_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "getRotation"
                , getRotation_function_type( &::osg::Cylinder::getRotation )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Cylinder::isSameKindAs
        
            typedef bool ( ::osg::Cylinder::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Cylinder_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Cylinder_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Cylinder::isSameKindAs)
                , default_isSameKindAs_function_type(&Cylinder_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Cylinder::libraryName
        
            typedef char const * ( ::osg::Cylinder::*libraryName_function_type)(  ) const;
            typedef char const * ( Cylinder_wrapper::*default_libraryName_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Cylinder::libraryName)
                , default_libraryName_function_type(&Cylinder_wrapper::default_libraryName) );
        
        }
        { //::osg::Cylinder::set
        
            typedef void ( ::osg::Cylinder::*set_function_type)( ::osg::Vec3 const &,float,float ) ;
            
            Cylinder_exposer.def( 
                "set"
                , set_function_type( &::osg::Cylinder::set )
                , ( bp::arg("center"), bp::arg("radius"), bp::arg("height") ) );
        
        }
        { //::osg::Cylinder::setCenter
        
            typedef void ( ::osg::Cylinder::*setCenter_function_type)( ::osg::Vec3 const & ) ;
            
            Cylinder_exposer.def( 
                "setCenter"
                , setCenter_function_type( &::osg::Cylinder::setCenter )
                , ( bp::arg("center") ) );
        
        }
        { //::osg::Cylinder::setHeight
        
            typedef void ( ::osg::Cylinder::*setHeight_function_type)( float ) ;
            
            Cylinder_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::osg::Cylinder::setHeight )
                , ( bp::arg("height") ) );
        
        }
        { //::osg::Cylinder::setRadius
        
            typedef void ( ::osg::Cylinder::*setRadius_function_type)( float ) ;
            
            Cylinder_exposer.def( 
                "setRadius"
                , setRadius_function_type( &::osg::Cylinder::setRadius )
                , ( bp::arg("radius") ) );
        
        }
        { //::osg::Cylinder::setRotation
        
            typedef void ( ::osg::Cylinder::*setRotation_function_type)( ::osg::Quat const & ) ;
            
            Cylinder_exposer.def( 
                "setRotation"
                , setRotation_function_type( &::osg::Cylinder::setRotation )
                , ( bp::arg("quat") ) );
        
        }
        { //::osg::Cylinder::valid
        
            typedef bool ( ::osg::Cylinder::*valid_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "valid"
                , valid_function_type( &::osg::Cylinder::valid ) );
        
        }
        { //::osg::Cylinder::zeroRotation
        
            typedef bool ( ::osg::Cylinder::*zeroRotation_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "zeroRotation"
                , zeroRotation_function_type( &::osg::Cylinder::zeroRotation ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( Cylinder_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Cylinder_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&Cylinder_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Cylinder_wrapper::*default_getUserData_function_type)(  ) ;
            
            Cylinder_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Cylinder_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Cylinder_wrapper::*default_getUserData_function_type)(  ) const;
            
            Cylinder_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Cylinder_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::resizeGLObjectBuffers
        
            typedef void ( ::osg::Object::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Cylinder_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Cylinder_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Object::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Cylinder_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Cylinder_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Cylinder_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Cylinder_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Cylinder_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Cylinder_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Cylinder_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Cylinder_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Cylinder_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Cylinder_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Cylinder_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
