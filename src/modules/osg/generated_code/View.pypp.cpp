// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "view.pypp.hpp"

namespace bp = boost::python;

struct View_wrapper : osg::View, bp::wrapper< osg::View > {

    struct Slave_wrapper : osg::View::Slave, bp::wrapper< osg::View::Slave > {
    
        struct UpdateSlaveCallback_wrapper : osg::View::Slave::UpdateSlaveCallback, bp::wrapper< osg::View::Slave::UpdateSlaveCallback > {
        
            UpdateSlaveCallback_wrapper()
            : osg::View::Slave::UpdateSlaveCallback()
              , bp::wrapper< osg::View::Slave::UpdateSlaveCallback >(){
                // null constructor
                
            }
        
            virtual void updateSlave( ::osg::View & view, ::osg::View::Slave & slave ){
                bp::override func_updateSlave = this->get_override( "updateSlave" );
                func_updateSlave( boost::ref(view), boost::ref(slave) );
            }
        
            virtual void setThreadSafeRefUnref( bool threadSafe ) {
                if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                    func_setThreadSafeRefUnref( threadSafe );
                else{
                    this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
                }
            }
            
            void default_setThreadSafeRefUnref( bool threadSafe ) {
                osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        
        };
    
        Slave_wrapper(bool useMastersSceneData=true )
        : osg::View::Slave( useMastersSceneData )
          , bp::wrapper< osg::View::Slave >(){
            // constructor
        
        }
    
        Slave_wrapper(::osg::Camera * camera, ::osg::Matrixd const & projectionOffset, ::osg::Matrixd const & viewOffset, bool useMastersSceneData=true )
        : osg::View::Slave( boost::python::ptr(camera), boost::ref(projectionOffset), boost::ref(viewOffset), useMastersSceneData )
          , bp::wrapper< osg::View::Slave >(){
            // constructor
        
        }
    
        Slave_wrapper(::osg::View::Slave const & rhs )
        : osg::View::Slave( boost::ref(rhs) )
          , bp::wrapper< osg::View::Slave >(){
            // copy constructor
        
        }
    
        virtual void updateSlaveImplementation( ::osg::View & view ) {
            if( bp::override func_updateSlaveImplementation = this->get_override( "updateSlaveImplementation" ) )
                func_updateSlaveImplementation( boost::ref(view) );
            else{
                this->osg::View::Slave::updateSlaveImplementation( boost::ref(view) );
            }
        }
        
        void default_updateSlaveImplementation( ::osg::View & view ) {
            osg::View::Slave::updateSlaveImplementation( boost::ref(view) );
        }
    
    };

    View_wrapper( )
    : osg::View( )
      , bp::wrapper< osg::View >(){
        // null constructor
    
    }

    View_wrapper(::osg::View const & view, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::View( boost::ref(view), boost::ref(copyop) )
      , bp::wrapper< osg::View >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::View::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::View::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::View::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::View::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::View::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::View::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::View::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::View::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::View::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::View::libraryName( );
    }

    virtual void take( ::osg::View & rhs ) {
        if( bp::override func_take = this->get_override( "take" ) )
            func_take( boost::ref(rhs) );
        else{
            this->osg::View::take( boost::ref(rhs) );
        }
    }
    
    void default_take( ::osg::View & rhs ) {
        osg::View::take( boost::ref(rhs) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_View_class(){

    { //::osg::View
        typedef bp::class_< View_wrapper, bp::bases< osg::Object >, boost::noncopyable > View_exposer_t;
        View_exposer_t View_exposer = View_exposer_t( "View", bp::no_init );
        bp::scope View_scope( View_exposer );
        bp::enum_< osg::View::LightingMode>("LightingMode")
            .value("NO_LIGHT", osg::View::NO_LIGHT)
            .value("HEADLIGHT", osg::View::HEADLIGHT)
            .value("SKY_LIGHT", osg::View::SKY_LIGHT)
            .export_values()
            ;
        { //::osg::View::Slave
            typedef bp::class_< View_wrapper::Slave_wrapper > Slave_exposer_t;
            Slave_exposer_t Slave_exposer = Slave_exposer_t( "Slave", bp::init< bp::optional< bool > >(( bp::arg("useMastersSceneData")=(bool)(true) )) );
            bp::scope Slave_scope( Slave_exposer );
            bp::class_< View_wrapper::Slave_wrapper::UpdateSlaveCallback_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "UpdateSlaveCallback" )    
                .def( 
                    "updateSlave"
                    , bp::pure_virtual( (void ( ::osg::View::Slave::UpdateSlaveCallback::* )( ::osg::View &,::osg::View::Slave & ))(&::osg::View::Slave::UpdateSlaveCallback::updateSlave) )
                    , ( bp::arg("view"), bp::arg("slave") ) )    
                .def( 
                    "setThreadSafeRefUnref"
                    , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                    , (void ( View_wrapper::Slave_wrapper::UpdateSlaveCallback_wrapper::* )( bool ))(&View_wrapper::Slave_wrapper::UpdateSlaveCallback_wrapper::default_setThreadSafeRefUnref)
                    , ( bp::arg("threadSafe") ) );
            bp::implicitly_convertible< bool, osg::View::Slave >();
            Slave_exposer.def( bp::init< osg::Camera *, osg::Matrixd const &, osg::Matrixd const &, bp::optional< bool > >(( bp::arg("camera"), bp::arg("projectionOffset"), bp::arg("viewOffset"), bp::arg("useMastersSceneData")=(bool)(true) )) );
            Slave_exposer.def( bp::init< osg::View::Slave const & >(( bp::arg("rhs") )) );
            { //::osg::View::Slave::operator=
            
                typedef ::osg::View::Slave & ( ::osg::View::Slave::*assign_function_type)( ::osg::View::Slave const & ) ;
                
                Slave_exposer.def( 
                    "assign"
                    , assign_function_type( &::osg::View::Slave::operator= )
                    , ( bp::arg("rhs") )
                    , bp::return_self< >() );
            
            }
            { //::osg::View::Slave::updateSlave
            
                typedef void ( ::osg::View::Slave::*updateSlave_function_type)( ::osg::View & ) ;
                
                Slave_exposer.def( 
                    "updateSlave"
                    , updateSlave_function_type( &::osg::View::Slave::updateSlave )
                    , ( bp::arg("view") ) );
            
            }
            { //::osg::View::Slave::updateSlaveImplementation
            
                typedef void ( ::osg::View::Slave::*updateSlaveImplementation_function_type)( ::osg::View & ) ;
                typedef void ( View_wrapper::Slave_wrapper::*default_updateSlaveImplementation_function_type)( ::osg::View & ) ;
                
                Slave_exposer.def( 
                    "updateSlaveImplementation"
                    , updateSlaveImplementation_function_type(&::osg::View::Slave::updateSlaveImplementation)
                    , default_updateSlaveImplementation_function_type(&View_wrapper::Slave_wrapper::default_updateSlaveImplementation)
                    , ( bp::arg("view") ) );
            
            }
            Slave_exposer.def_readwrite( "_camera", &osg::View::Slave::_camera );
            Slave_exposer.def_readwrite( "_projectionOffset", &osg::View::Slave::_projectionOffset );
            Slave_exposer.def_readwrite( "_updateSlaveCallback", &osg::View::Slave::_updateSlaveCallback );
            Slave_exposer.def_readwrite( "_useMastersSceneData", &osg::View::Slave::_useMastersSceneData );
            Slave_exposer.def_readwrite( "_viewOffset", &osg::View::Slave::_viewOffset );
        }
        View_exposer.def( bp::init< >() );
        View_exposer.def( bp::init< osg::View const &, bp::optional< osg::CopyOp const & > >(( bp::arg("view"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::View const &, osg::View >();
        { //::osg::View::addSlave
        
            typedef bool ( ::osg::View::*addSlave_function_type)( ::osg::Camera *,bool ) ;
            
            View_exposer.def( 
                "addSlave"
                , addSlave_function_type( &::osg::View::addSlave )
                , ( bp::arg("camera"), bp::arg("useMastersSceneData")=(bool)(true) ) );
        
        }
        { //::osg::View::addSlave
        
            typedef bool ( ::osg::View::*addSlave_function_type)( ::osg::Camera *,::osg::Matrix const &,::osg::Matrix const &,bool ) ;
            
            View_exposer.def( 
                "addSlave"
                , addSlave_function_type( &::osg::View::addSlave )
                , ( bp::arg("camera"), bp::arg("projectionOffset"), bp::arg("viewOffset"), bp::arg("useMastersSceneData")=(bool)(true) ) );
        
        }
        { //::osg::View::className
        
            typedef char const * ( ::osg::View::*className_function_type)(  ) const;
            typedef char const * ( View_wrapper::*default_className_function_type)(  ) const;
            
            View_exposer.def( 
                "className"
                , className_function_type(&::osg::View::className)
                , default_className_function_type(&View_wrapper::default_className) );
        
        }
        { //::osg::View::clone
        
            typedef ::osg::Object * ( ::osg::View::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( View_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            View_exposer.def( 
                "clone"
                , clone_function_type(&::osg::View::clone)
                , default_clone_function_type(&View_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::View::cloneType
        
            typedef ::osg::Object * ( ::osg::View::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( View_wrapper::*default_cloneType_function_type)(  ) const;
            
            View_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::View::cloneType)
                , default_cloneType_function_type(&View_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::View::findSlaveForCamera
        
            typedef ::osg::View::Slave * ( ::osg::View::*findSlaveForCamera_function_type)( ::osg::Camera * ) ;
            
            View_exposer.def( 
                "findSlaveForCamera"
                , findSlaveForCamera_function_type( &::osg::View::findSlaveForCamera )
                , ( bp::arg("camera") )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::findSlaveIndexForCamera
        
            typedef unsigned int ( ::osg::View::*findSlaveIndexForCamera_function_type)( ::osg::Camera * ) const;
            
            View_exposer.def( 
                "findSlaveIndexForCamera"
                , findSlaveIndexForCamera_function_type( &::osg::View::findSlaveIndexForCamera )
                , ( bp::arg("camera") ) );
        
        }
        { //::osg::View::getCamera
        
            typedef ::osg::Camera * ( ::osg::View::*getCamera_function_type)(  ) ;
            
            View_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osg::View::getCamera )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::getCamera
        
            typedef ::osg::Camera const * ( ::osg::View::*getCamera_function_type)(  ) const;
            
            View_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osg::View::getCamera )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::getFrameStamp
        
            typedef ::osg::FrameStamp * ( ::osg::View::*getFrameStamp_function_type)(  ) ;
            
            View_exposer.def( 
                "getFrameStamp"
                , getFrameStamp_function_type( &::osg::View::getFrameStamp )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::getFrameStamp
        
            typedef ::osg::FrameStamp const * ( ::osg::View::*getFrameStamp_function_type)(  ) const;
            
            View_exposer.def( 
                "getFrameStamp"
                , getFrameStamp_function_type( &::osg::View::getFrameStamp )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::getLight
        
            typedef ::osg::Light * ( ::osg::View::*getLight_function_type)(  ) ;
            
            View_exposer.def( 
                "getLight"
                , getLight_function_type( &::osg::View::getLight )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::getLight
        
            typedef ::osg::Light const * ( ::osg::View::*getLight_function_type)(  ) const;
            
            View_exposer.def( 
                "getLight"
                , getLight_function_type( &::osg::View::getLight )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::getLightingMode
        
            typedef ::osg::View::LightingMode ( ::osg::View::*getLightingMode_function_type)(  ) const;
            
            View_exposer.def( 
                "getLightingMode"
                , getLightingMode_function_type( &::osg::View::getLightingMode ) );
        
        }
        { //::osg::View::getNumSlaves
        
            typedef unsigned int ( ::osg::View::*getNumSlaves_function_type)(  ) const;
            
            View_exposer.def( 
                "getNumSlaves"
                , getNumSlaves_function_type( &::osg::View::getNumSlaves ) );
        
        }
        { //::osg::View::getSlave
        
            typedef ::osg::View::Slave & ( ::osg::View::*getSlave_function_type)( unsigned int ) ;
            
            View_exposer.def( 
                "getSlave"
                , getSlave_function_type( &::osg::View::getSlave )
                , ( bp::arg("pos") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::View::getSlave
        
            typedef ::osg::View::Slave const & ( ::osg::View::*getSlave_function_type)( unsigned int ) const;
            
            View_exposer.def( 
                "getSlave"
                , getSlave_function_type( &::osg::View::getSlave )
                , ( bp::arg("pos") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::View::getStats
        
            typedef ::osg::Stats * ( ::osg::View::*getStats_function_type)(  ) ;
            
            View_exposer.def( 
                "getStats"
                , getStats_function_type( &::osg::View::getStats )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::getStats
        
            typedef ::osg::Stats const * ( ::osg::View::*getStats_function_type)(  ) const;
            
            View_exposer.def( 
                "getStats"
                , getStats_function_type( &::osg::View::getStats )
                    /* undefined call policies */ );
        
        }
        { //::osg::View::isSameKindAs
        
            typedef bool ( ::osg::View::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( View_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            View_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::View::isSameKindAs)
                , default_isSameKindAs_function_type(&View_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::View::libraryName
        
            typedef char const * ( ::osg::View::*libraryName_function_type)(  ) const;
            typedef char const * ( View_wrapper::*default_libraryName_function_type)(  ) const;
            
            View_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::View::libraryName)
                , default_libraryName_function_type(&View_wrapper::default_libraryName) );
        
        }
        { //::osg::View::removeSlave
        
            typedef bool ( ::osg::View::*removeSlave_function_type)( unsigned int ) ;
            
            View_exposer.def( 
                "removeSlave"
                , removeSlave_function_type( &::osg::View::removeSlave )
                , ( bp::arg("pos") ) );
        
        }
        { //::osg::View::setCamera
        
            typedef void ( ::osg::View::*setCamera_function_type)( ::osg::Camera * ) ;
            
            View_exposer.def( 
                "setCamera"
                , setCamera_function_type( &::osg::View::setCamera )
                , ( bp::arg("camera") ) );
        
        }
        { //::osg::View::setFrameStamp
        
            typedef void ( ::osg::View::*setFrameStamp_function_type)( ::osg::FrameStamp * ) ;
            
            View_exposer.def( 
                "setFrameStamp"
                , setFrameStamp_function_type( &::osg::View::setFrameStamp )
                , ( bp::arg("fs") ) );
        
        }
        { //::osg::View::setLight
        
            typedef void ( ::osg::View::*setLight_function_type)( ::osg::Light * ) ;
            
            View_exposer.def( 
                "setLight"
                , setLight_function_type( &::osg::View::setLight )
                , ( bp::arg("light") ) );
        
        }
        { //::osg::View::setLightingMode
        
            typedef void ( ::osg::View::*setLightingMode_function_type)( ::osg::View::LightingMode ) ;
            
            View_exposer.def( 
                "setLightingMode"
                , setLightingMode_function_type( &::osg::View::setLightingMode )
                , ( bp::arg("lightingMode") ) );
        
        }
        { //::osg::View::setStats
        
            typedef void ( ::osg::View::*setStats_function_type)( ::osg::Stats * ) ;
            
            View_exposer.def( 
                "setStats"
                , setStats_function_type( &::osg::View::setStats )
                , ( bp::arg("stats") ) );
        
        }
        { //::osg::View::take
        
            typedef void ( ::osg::View::*take_function_type)( ::osg::View & ) ;
            typedef void ( View_wrapper::*default_take_function_type)( ::osg::View & ) ;
            
            View_exposer.def( 
                "take"
                , take_function_type(&::osg::View::take)
                , default_take_function_type(&View_wrapper::default_take)
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::View::updateSlaves
        
            typedef void ( ::osg::View::*updateSlaves_function_type)(  ) ;
            
            View_exposer.def( 
                "updateSlaves"
                , updateSlaves_function_type( &::osg::View::updateSlaves ) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( View_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            View_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&View_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( View_wrapper::*default_getUserData_function_type)(  ) ;
            
            View_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&View_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( View_wrapper::*default_getUserData_function_type)(  ) const;
            
            View_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&View_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::resizeGLObjectBuffers
        
            typedef void ( ::osg::Object::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( View_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            View_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Object::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&View_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( View_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            View_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&View_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            View_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( View_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            View_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&View_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( View_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            View_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&View_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
