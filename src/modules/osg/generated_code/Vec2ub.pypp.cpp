// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec2ub.pypp.hpp"

namespace bp = boost::python;

void register_Vec2ub_class(){

    { //::osg::Vec2ub
        typedef bp::class_< osg::Vec2ub > Vec2ub_exposer_t;
        Vec2ub_exposer_t Vec2ub_exposer = Vec2ub_exposer_t( "Vec2ub", bp::init< >() );
        bp::scope Vec2ub_scope( Vec2ub_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec2ub::num_components;
        Vec2ub_exposer.def( bp::init< unsigned char, unsigned char >(( bp::arg("r"), bp::arg("g") )) );
        { //::osg::Vec2ub::g
        
            typedef unsigned char & ( ::osg::Vec2ub::*g_function_type)(  ) ;
            
            Vec2ub_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec2ub::g )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2ub::g
        
            typedef unsigned char ( ::osg::Vec2ub::*g_function_type)(  ) const;
            
            Vec2ub_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec2ub::g ) );
        
        }
        Vec2ub_exposer.def( bp::self != bp::self );
        Vec2ub_exposer.def( bp::self * bp::other< float >() );
        Vec2ub_exposer.def( bp::self *= bp::other< float >() );
        Vec2ub_exposer.def( bp::self + bp::self );
        Vec2ub_exposer.def( bp::self += bp::self );
        Vec2ub_exposer.def( bp::self - bp::self );
        Vec2ub_exposer.def( bp::self -= bp::self );
        Vec2ub_exposer.def( bp::self / bp::other< float >() );
        Vec2ub_exposer.def( bp::self /= bp::other< float >() );
        Vec2ub_exposer.def( bp::self < bp::self );
        Vec2ub_exposer.def( bp::self == bp::self );
        { //::osg::Vec2ub::operator[]
        
            typedef unsigned char & ( ::osg::Vec2ub::*__getitem___function_type)( int ) ;
            
            Vec2ub_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec2ub::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2ub::operator[]
        
            typedef unsigned char ( ::osg::Vec2ub::*__getitem___function_type)( int ) const;
            
            Vec2ub_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec2ub::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec2ub::r
        
            typedef unsigned char & ( ::osg::Vec2ub::*r_function_type)(  ) ;
            
            Vec2ub_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec2ub::r )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2ub::r
        
            typedef unsigned char ( ::osg::Vec2ub::*r_function_type)(  ) const;
            
            Vec2ub_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec2ub::r ) );
        
        }
        { //::osg::Vec2ub::set
        
            typedef void ( ::osg::Vec2ub::*set_function_type)( unsigned char,unsigned char ) ;
            
            Vec2ub_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec2ub::set )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osg::Vec2ub::set
        
            typedef void ( ::osg::Vec2ub::*set_function_type)( ::osg::Vec2ub const & ) ;
            
            Vec2ub_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec2ub::set )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Vec2ub::x
        
            typedef unsigned char & ( ::osg::Vec2ub::*x_function_type)(  ) ;
            
            Vec2ub_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec2ub::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2ub::x
        
            typedef unsigned char ( ::osg::Vec2ub::*x_function_type)(  ) const;
            
            Vec2ub_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec2ub::x ) );
        
        }
        { //::osg::Vec2ub::y
        
            typedef unsigned char & ( ::osg::Vec2ub::*y_function_type)(  ) ;
            
            Vec2ub_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec2ub::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec2ub::y
        
            typedef unsigned char ( ::osg::Vec2ub::*y_function_type)(  ) const;
            
            Vec2ub_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec2ub::y ) );
        
        }
    }

}
