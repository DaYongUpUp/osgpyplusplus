// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "nodevisitor.pypp.hpp"

namespace bp = boost::python;

struct NodeVisitor_wrapper : osg::NodeVisitor, bp::wrapper< osg::NodeVisitor > {

    struct DatabaseRequestHandler_wrapper : osg::NodeVisitor::DatabaseRequestHandler, bp::wrapper< osg::NodeVisitor::DatabaseRequestHandler > {
    
        DatabaseRequestHandler_wrapper( )
        : osg::NodeVisitor::DatabaseRequestHandler( )
          , bp::wrapper< osg::NodeVisitor::DatabaseRequestHandler >(){
            // null constructor
        
        }
    
        virtual void requestNodeFile( ::std::string const & fileName, ::osg::NodePath & nodePath, float priority, ::osg::FrameStamp const * framestamp, ::osg::ref_ptr< osg::Referenced > & databaseRequest, ::osg::Referenced const * options=0 ){
            bp::override func_requestNodeFile = this->get_override( "requestNodeFile" );
            func_requestNodeFile( fileName, boost::ref(nodePath), priority, boost::python::ptr(framestamp), boost::ref(databaseRequest), boost::python::ptr(options) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct ImageRequestHandler_wrapper : osg::NodeVisitor::ImageRequestHandler, bp::wrapper< osg::NodeVisitor::ImageRequestHandler > {
    
        ImageRequestHandler_wrapper( )
        : osg::NodeVisitor::ImageRequestHandler( )
          , bp::wrapper< osg::NodeVisitor::ImageRequestHandler >(){
            // null constructor
        
        }
    
        virtual double getPreLoadTime(  ) const {
            bp::override func_getPreLoadTime = this->get_override( "getPreLoadTime" );
            return func_getPreLoadTime(  );
        }
    
        virtual ::osg::Image * readImageFile( ::std::string const & fileName, ::osg::Referenced const * options=0 ){
            bp::override func_readImageFile = this->get_override( "readImageFile" );
            return func_readImageFile( fileName, boost::python::ptr(options) );
        }
    
        virtual void requestImageFile( ::std::string const & fileName, ::osg::Object * attachmentPoint, int attachmentIndex, double timeToMergeBy, ::osg::FrameStamp const * framestamp, ::osg::ref_ptr< osg::Referenced > & imageRequest, ::osg::Referenced const * options=0 ){
            bp::override func_requestImageFile = this->get_override( "requestImageFile" );
            func_requestImageFile( fileName, boost::python::ptr(attachmentPoint), attachmentIndex, timeToMergeBy, boost::python::ptr(framestamp), boost::ref(imageRequest), boost::python::ptr(options) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    NodeVisitor_wrapper(::osg::NodeVisitor::TraversalMode tm=::osg::NodeVisitor::TRAVERSE_NONE )
    : osg::NodeVisitor( tm )
      , bp::wrapper< osg::NodeVisitor >(){
        // constructor
    
    }

    NodeVisitor_wrapper(::osg::NodeVisitor::VisitorType type, ::osg::NodeVisitor::TraversalMode tm=::osg::NodeVisitor::TRAVERSE_NONE )
    : osg::NodeVisitor( type, tm )
      , bp::wrapper< osg::NodeVisitor >(){
        // constructor
    
    }

    virtual void apply( ::osg::Node & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Node & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Geode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Geode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Billboard & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Billboard & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Group & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Group & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ProxyNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ProxyNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Projection & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Projection & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CoordinateSystemNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CoordinateSystemNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClipNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClipNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::TexGenNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::TexGenNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LightSource & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LightSource & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Transform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Transform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Camera & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Camera & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CameraView & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CameraView & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::MatrixTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::MatrixTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PositionAttitudeTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PositionAttitudeTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Switch & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Switch & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Sequence & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Sequence & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PagedLOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PagedLOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClearNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClearNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OccluderNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OccluderNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OcclusionQueryNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OcclusionQueryNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::NodeVisitor::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::NodeVisitor::className( );
    }

    virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
            return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
            return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
            return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
    }

    virtual ::osg::Vec3 getEyePoint(  ) const  {
        if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
            return func_getEyePoint(  );
        else{
            return this->osg::NodeVisitor::getEyePoint(  );
        }
    }
    
    ::osg::Vec3 default_getEyePoint(  ) const  {
        return osg::NodeVisitor::getEyePoint( );
    }

    virtual ::osg::Vec3 getViewPoint(  ) const  {
        if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
            return func_getViewPoint(  );
        else{
            return this->osg::NodeVisitor::getViewPoint(  );
        }
    }
    
    ::osg::Vec3 default_getViewPoint(  ) const  {
        return osg::NodeVisitor::getViewPoint( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::NodeVisitor::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::NodeVisitor::libraryName( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osg::NodeVisitor::reset(  );
        }
    }
    
    void default_reset(  ) {
        osg::NodeVisitor::reset( );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_NodeVisitor_class(){

    { //::osg::NodeVisitor
        typedef bp::class_< NodeVisitor_wrapper, bp::bases< osg::Referenced >, boost::noncopyable > NodeVisitor_exposer_t;
        NodeVisitor_exposer_t NodeVisitor_exposer = NodeVisitor_exposer_t( "NodeVisitor", bp::init< bp::optional< osg::NodeVisitor::TraversalMode > >(( bp::arg("tm")=(long)(::osg::NodeVisitor::TRAVERSE_NONE) )) );
        bp::scope NodeVisitor_scope( NodeVisitor_exposer );
        bp::enum_< osg::NodeVisitor::TraversalMode>("TraversalMode")
            .value("TRAVERSE_NONE", osg::NodeVisitor::TRAVERSE_NONE)
            .value("TRAVERSE_PARENTS", osg::NodeVisitor::TRAVERSE_PARENTS)
            .value("TRAVERSE_ALL_CHILDREN", osg::NodeVisitor::TRAVERSE_ALL_CHILDREN)
            .value("TRAVERSE_ACTIVE_CHILDREN", osg::NodeVisitor::TRAVERSE_ACTIVE_CHILDREN)
            .export_values()
            ;
        bp::enum_< osg::NodeVisitor::VisitorType>("VisitorType")
            .value("NODE_VISITOR", osg::NodeVisitor::NODE_VISITOR)
            .value("UPDATE_VISITOR", osg::NodeVisitor::UPDATE_VISITOR)
            .value("EVENT_VISITOR", osg::NodeVisitor::EVENT_VISITOR)
            .value("COLLECT_OCCLUDER_VISITOR", osg::NodeVisitor::COLLECT_OCCLUDER_VISITOR)
            .value("CULL_VISITOR", osg::NodeVisitor::CULL_VISITOR)
            .export_values()
            ;
        bp::class_< NodeVisitor_wrapper::DatabaseRequestHandler_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "DatabaseRequestHandler", bp::no_init )    
            .def( bp::init< >() )    
            .def( 
                "requestNodeFile"
                , bp::pure_virtual( (void ( ::osg::NodeVisitor::DatabaseRequestHandler::* )( ::std::string const &,::osg::NodePath &,float,::osg::FrameStamp const *,::osg::ref_ptr< osg::Referenced > &,::osg::Referenced const * ))(&::osg::NodeVisitor::DatabaseRequestHandler::requestNodeFile) )
                , ( bp::arg("fileName"), bp::arg("nodePath"), bp::arg("priority"), bp::arg("framestamp"), bp::arg("databaseRequest"), bp::arg("options")=bp::object() ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( NodeVisitor_wrapper::DatabaseRequestHandler_wrapper::* )( bool ))(&NodeVisitor_wrapper::DatabaseRequestHandler_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        bp::class_< NodeVisitor_wrapper::ImageRequestHandler_wrapper, bp::bases< osg::Referenced >, boost::noncopyable >( "ImageRequestHandler", bp::no_init )    
            .def( bp::init< >() )    
            .def( 
                "getPreLoadTime"
                , bp::pure_virtual( (double ( ::osg::NodeVisitor::ImageRequestHandler::* )(  )const)(&::osg::NodeVisitor::ImageRequestHandler::getPreLoadTime) ) )    
            .def( 
                "readImageFile"
                , bp::pure_virtual( (::osg::Image * ( ::osg::NodeVisitor::ImageRequestHandler::* )( ::std::string const &,::osg::Referenced const * ))(&::osg::NodeVisitor::ImageRequestHandler::readImageFile) )
                , ( bp::arg("fileName"), bp::arg("options")=bp::object() )
                    /* undefined call policies */ )    
            .def( 
                "requestImageFile"
                , bp::pure_virtual( (void ( ::osg::NodeVisitor::ImageRequestHandler::* )( ::std::string const &,::osg::Object *,int,double,::osg::FrameStamp const *,::osg::ref_ptr< osg::Referenced > &,::osg::Referenced const * ))(&::osg::NodeVisitor::ImageRequestHandler::requestImageFile) )
                , ( bp::arg("fileName"), bp::arg("attachmentPoint"), bp::arg("attachmentIndex"), bp::arg("timeToMergeBy"), bp::arg("framestamp"), bp::arg("imageRequest"), bp::arg("options")=bp::object() ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
                , (void ( NodeVisitor_wrapper::ImageRequestHandler_wrapper::* )( bool ))(&NodeVisitor_wrapper::ImageRequestHandler_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        bp::implicitly_convertible< osg::NodeVisitor::TraversalMode, osg::NodeVisitor >();
        NodeVisitor_exposer.def( bp::init< osg::NodeVisitor::VisitorType, bp::optional< osg::NodeVisitor::TraversalMode > >(( bp::arg("type"), bp::arg("tm")=(long)(::osg::NodeVisitor::TRAVERSE_NONE) )) );
        bp::implicitly_convertible< osg::NodeVisitor::VisitorType, osg::NodeVisitor >();
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Node & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Node & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Geode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Geode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Billboard & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Billboard & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Group & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Group & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::ProxyNode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::ProxyNode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Projection & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Projection & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::CoordinateSystemNode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::CoordinateSystemNode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::ClipNode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::ClipNode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::TexGenNode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::TexGenNode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::LightSource & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::LightSource & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Transform & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Transform & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Camera & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Camera & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::CameraView & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::CameraView & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::MatrixTransform & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::MatrixTransform & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::PositionAttitudeTransform & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::PositionAttitudeTransform & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Switch & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Switch & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::Sequence & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::Sequence & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::LOD & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::LOD & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::PagedLOD & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::PagedLOD & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::ClearNode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::ClearNode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::OccluderNode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::OccluderNode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type)( ::osg::OcclusionQueryNode & ) ;
            typedef void ( NodeVisitor_wrapper::*default_apply_function_type)( ::osg::OcclusionQueryNode & ) ;
            
            NodeVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&NodeVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::className
        
            typedef char const * ( ::osg::NodeVisitor::*className_function_type)(  ) const;
            typedef char const * ( NodeVisitor_wrapper::*default_className_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "className"
                , className_function_type(&::osg::NodeVisitor::className)
                , default_className_function_type(&NodeVisitor_wrapper::default_className) );
        
        }
        { //::osg::NodeVisitor::getDatabaseRequestHandler
        
            typedef ::osg::NodeVisitor::DatabaseRequestHandler * ( ::osg::NodeVisitor::*getDatabaseRequestHandler_function_type)(  ) ;
            
            NodeVisitor_exposer.def( 
                "getDatabaseRequestHandler"
                , getDatabaseRequestHandler_function_type( &::osg::NodeVisitor::getDatabaseRequestHandler )
                    /* undefined call policies */ );
        
        }
        { //::osg::NodeVisitor::getDatabaseRequestHandler
        
            typedef ::osg::NodeVisitor::DatabaseRequestHandler const * ( ::osg::NodeVisitor::*getDatabaseRequestHandler_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getDatabaseRequestHandler"
                , getDatabaseRequestHandler_function_type( &::osg::NodeVisitor::getDatabaseRequestHandler )
                    /* undefined call policies */ );
        
        }
        { //::osg::NodeVisitor::getDistanceFromEyePoint
        
            typedef float ( ::osg::NodeVisitor::*getDistanceFromEyePoint_function_type)( ::osg::Vec3 const &,bool ) const;
            typedef float ( NodeVisitor_wrapper::*default_getDistanceFromEyePoint_function_type)( ::osg::Vec3 const &,bool ) const;
            
            NodeVisitor_exposer.def( 
                "getDistanceFromEyePoint"
                , getDistanceFromEyePoint_function_type(&::osg::NodeVisitor::getDistanceFromEyePoint)
                , default_getDistanceFromEyePoint_function_type(&NodeVisitor_wrapper::default_getDistanceFromEyePoint)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osg::NodeVisitor::getDistanceToEyePoint
        
            typedef float ( ::osg::NodeVisitor::*getDistanceToEyePoint_function_type)( ::osg::Vec3 const &,bool ) const;
            typedef float ( NodeVisitor_wrapper::*default_getDistanceToEyePoint_function_type)( ::osg::Vec3 const &,bool ) const;
            
            NodeVisitor_exposer.def( 
                "getDistanceToEyePoint"
                , getDistanceToEyePoint_function_type(&::osg::NodeVisitor::getDistanceToEyePoint)
                , default_getDistanceToEyePoint_function_type(&NodeVisitor_wrapper::default_getDistanceToEyePoint)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osg::NodeVisitor::getDistanceToViewPoint
        
            typedef float ( ::osg::NodeVisitor::*getDistanceToViewPoint_function_type)( ::osg::Vec3 const &,bool ) const;
            typedef float ( NodeVisitor_wrapper::*default_getDistanceToViewPoint_function_type)( ::osg::Vec3 const &,bool ) const;
            
            NodeVisitor_exposer.def( 
                "getDistanceToViewPoint"
                , getDistanceToViewPoint_function_type(&::osg::NodeVisitor::getDistanceToViewPoint)
                , default_getDistanceToViewPoint_function_type(&NodeVisitor_wrapper::default_getDistanceToViewPoint)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osg::NodeVisitor::getEyePoint
        
            typedef ::osg::Vec3 ( ::osg::NodeVisitor::*getEyePoint_function_type)(  ) const;
            typedef ::osg::Vec3 ( NodeVisitor_wrapper::*default_getEyePoint_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getEyePoint"
                , getEyePoint_function_type(&::osg::NodeVisitor::getEyePoint)
                , default_getEyePoint_function_type(&NodeVisitor_wrapper::default_getEyePoint) );
        
        }
        { //::osg::NodeVisitor::getFrameStamp
        
            typedef ::osg::FrameStamp const * ( ::osg::NodeVisitor::*getFrameStamp_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getFrameStamp"
                , getFrameStamp_function_type( &::osg::NodeVisitor::getFrameStamp )
                    /* undefined call policies */ );
        
        }
        { //::osg::NodeVisitor::getImageRequestHandler
        
            typedef ::osg::NodeVisitor::ImageRequestHandler * ( ::osg::NodeVisitor::*getImageRequestHandler_function_type)(  ) ;
            
            NodeVisitor_exposer.def( 
                "getImageRequestHandler"
                , getImageRequestHandler_function_type( &::osg::NodeVisitor::getImageRequestHandler )
                    /* undefined call policies */ );
        
        }
        { //::osg::NodeVisitor::getImageRequestHandler
        
            typedef ::osg::NodeVisitor::ImageRequestHandler const * ( ::osg::NodeVisitor::*getImageRequestHandler_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getImageRequestHandler"
                , getImageRequestHandler_function_type( &::osg::NodeVisitor::getImageRequestHandler )
                    /* undefined call policies */ );
        
        }
        { //::osg::NodeVisitor::getNodeMaskOverride
        
            typedef unsigned int ( ::osg::NodeVisitor::*getNodeMaskOverride_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getNodeMaskOverride"
                , getNodeMaskOverride_function_type( &::osg::NodeVisitor::getNodeMaskOverride ) );
        
        }
        { //::osg::NodeVisitor::getNodePath
        
            typedef ::osg::NodePath & ( ::osg::NodeVisitor::*getNodePath_function_type)(  ) ;
            
            NodeVisitor_exposer.def( 
                "getNodePath"
                , getNodePath_function_type( &::osg::NodeVisitor::getNodePath )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::NodeVisitor::getNodePath
        
            typedef ::osg::NodePath const & ( ::osg::NodeVisitor::*getNodePath_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getNodePath"
                , getNodePath_function_type( &::osg::NodeVisitor::getNodePath )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::NodeVisitor::getTraversalMask
        
            typedef unsigned int ( ::osg::NodeVisitor::*getTraversalMask_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getTraversalMask"
                , getTraversalMask_function_type( &::osg::NodeVisitor::getTraversalMask ) );
        
        }
        { //::osg::NodeVisitor::getTraversalMode
        
            typedef ::osg::NodeVisitor::TraversalMode ( ::osg::NodeVisitor::*getTraversalMode_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getTraversalMode"
                , getTraversalMode_function_type( &::osg::NodeVisitor::getTraversalMode ) );
        
        }
        { //::osg::NodeVisitor::getTraversalNumber
        
            typedef unsigned int ( ::osg::NodeVisitor::*getTraversalNumber_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getTraversalNumber"
                , getTraversalNumber_function_type( &::osg::NodeVisitor::getTraversalNumber ) );
        
        }
        { //::osg::NodeVisitor::getUserData
        
            typedef ::osg::Referenced * ( ::osg::NodeVisitor::*getUserData_function_type)(  ) ;
            
            NodeVisitor_exposer.def( 
                "getUserData"
                , getUserData_function_type( &::osg::NodeVisitor::getUserData )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::NodeVisitor::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::NodeVisitor::*getUserData_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getUserData"
                , getUserData_function_type( &::osg::NodeVisitor::getUserData )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::NodeVisitor::getViewPoint
        
            typedef ::osg::Vec3 ( ::osg::NodeVisitor::*getViewPoint_function_type)(  ) const;
            typedef ::osg::Vec3 ( NodeVisitor_wrapper::*default_getViewPoint_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getViewPoint"
                , getViewPoint_function_type(&::osg::NodeVisitor::getViewPoint)
                , default_getViewPoint_function_type(&NodeVisitor_wrapper::default_getViewPoint) );
        
        }
        { //::osg::NodeVisitor::getVisitorType
        
            typedef ::osg::NodeVisitor::VisitorType ( ::osg::NodeVisitor::*getVisitorType_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "getVisitorType"
                , getVisitorType_function_type( &::osg::NodeVisitor::getVisitorType ) );
        
        }
        { //::osg::NodeVisitor::libraryName
        
            typedef char const * ( ::osg::NodeVisitor::*libraryName_function_type)(  ) const;
            typedef char const * ( NodeVisitor_wrapper::*default_libraryName_function_type)(  ) const;
            
            NodeVisitor_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::NodeVisitor::libraryName)
                , default_libraryName_function_type(&NodeVisitor_wrapper::default_libraryName) );
        
        }
        { //::osg::NodeVisitor::popFromNodePath
        
            typedef void ( ::osg::NodeVisitor::*popFromNodePath_function_type)(  ) ;
            
            NodeVisitor_exposer.def( 
                "popFromNodePath"
                , popFromNodePath_function_type( &::osg::NodeVisitor::popFromNodePath ) );
        
        }
        { //::osg::NodeVisitor::pushOntoNodePath
        
            typedef void ( ::osg::NodeVisitor::*pushOntoNodePath_function_type)( ::osg::Node * ) ;
            
            NodeVisitor_exposer.def( 
                "pushOntoNodePath"
                , pushOntoNodePath_function_type( &::osg::NodeVisitor::pushOntoNodePath )
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::reset
        
            typedef void ( ::osg::NodeVisitor::*reset_function_type)(  ) ;
            typedef void ( NodeVisitor_wrapper::*default_reset_function_type)(  ) ;
            
            NodeVisitor_exposer.def( 
                "reset"
                , reset_function_type(&::osg::NodeVisitor::reset)
                , default_reset_function_type(&NodeVisitor_wrapper::default_reset) );
        
        }
        { //::osg::NodeVisitor::setDatabaseRequestHandler
        
            typedef void ( ::osg::NodeVisitor::*setDatabaseRequestHandler_function_type)( ::osg::NodeVisitor::DatabaseRequestHandler * ) ;
            
            NodeVisitor_exposer.def( 
                "setDatabaseRequestHandler"
                , setDatabaseRequestHandler_function_type( &::osg::NodeVisitor::setDatabaseRequestHandler )
                , ( bp::arg("handler") ) );
        
        }
        { //::osg::NodeVisitor::setFrameStamp
        
            typedef void ( ::osg::NodeVisitor::*setFrameStamp_function_type)( ::osg::FrameStamp * ) ;
            
            NodeVisitor_exposer.def( 
                "setFrameStamp"
                , setFrameStamp_function_type( &::osg::NodeVisitor::setFrameStamp )
                , ( bp::arg("fs") ) );
        
        }
        { //::osg::NodeVisitor::setImageRequestHandler
        
            typedef void ( ::osg::NodeVisitor::*setImageRequestHandler_function_type)( ::osg::NodeVisitor::ImageRequestHandler * ) ;
            
            NodeVisitor_exposer.def( 
                "setImageRequestHandler"
                , setImageRequestHandler_function_type( &::osg::NodeVisitor::setImageRequestHandler )
                , ( bp::arg("handler") ) );
        
        }
        { //::osg::NodeVisitor::setNodeMaskOverride
        
            typedef void ( ::osg::NodeVisitor::*setNodeMaskOverride_function_type)( unsigned int ) ;
            
            NodeVisitor_exposer.def( 
                "setNodeMaskOverride"
                , setNodeMaskOverride_function_type( &::osg::NodeVisitor::setNodeMaskOverride )
                , ( bp::arg("mask") ) );
        
        }
        { //::osg::NodeVisitor::setTraversalMask
        
            typedef void ( ::osg::NodeVisitor::*setTraversalMask_function_type)( unsigned int ) ;
            
            NodeVisitor_exposer.def( 
                "setTraversalMask"
                , setTraversalMask_function_type( &::osg::NodeVisitor::setTraversalMask )
                , ( bp::arg("mask") ) );
        
        }
        { //::osg::NodeVisitor::setTraversalMode
        
            typedef void ( ::osg::NodeVisitor::*setTraversalMode_function_type)( ::osg::NodeVisitor::TraversalMode ) ;
            
            NodeVisitor_exposer.def( 
                "setTraversalMode"
                , setTraversalMode_function_type( &::osg::NodeVisitor::setTraversalMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::NodeVisitor::setTraversalNumber
        
            typedef void ( ::osg::NodeVisitor::*setTraversalNumber_function_type)( unsigned int ) ;
            
            NodeVisitor_exposer.def( 
                "setTraversalNumber"
                , setTraversalNumber_function_type( &::osg::NodeVisitor::setTraversalNumber )
                , ( bp::arg("fn") ) );
        
        }
        { //::osg::NodeVisitor::setUserData
        
            typedef void ( ::osg::NodeVisitor::*setUserData_function_type)( ::osg::Referenced * ) ;
            
            NodeVisitor_exposer.def( 
                "setUserData"
                , setUserData_function_type( &::osg::NodeVisitor::setUserData )
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::NodeVisitor::setVisitorType
        
            typedef void ( ::osg::NodeVisitor::*setVisitorType_function_type)( ::osg::NodeVisitor::VisitorType ) ;
            
            NodeVisitor_exposer.def( 
                "setVisitorType"
                , setVisitorType_function_type( &::osg::NodeVisitor::setVisitorType )
                , ( bp::arg("type") ) );
        
        }
        { //::osg::NodeVisitor::traverse
        
            typedef void ( ::osg::NodeVisitor::*traverse_function_type)( ::osg::Node & ) ;
            
            NodeVisitor_exposer.def( 
                "traverse"
                , traverse_function_type( &::osg::NodeVisitor::traverse )
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::validNodeMask
        
            typedef bool ( ::osg::NodeVisitor::*validNodeMask_function_type)( ::osg::Node const & ) const;
            
            NodeVisitor_exposer.def( 
                "validNodeMask"
                , validNodeMask_function_type( &::osg::NodeVisitor::validNodeMask )
                , ( bp::arg("node") ) );
        
        }
        { //::osg::Referenced::setThreadSafeRefUnref
        
            typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( NodeVisitor_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            NodeVisitor_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&NodeVisitor_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
    }

}
