// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "vec3ub.pypp.hpp"

namespace bp = boost::python;

void register_Vec3ub_class(){

    { //::osg::Vec3ub
        typedef bp::class_< osg::Vec3ub > Vec3ub_exposer_t;
        Vec3ub_exposer_t Vec3ub_exposer = Vec3ub_exposer_t( "Vec3ub", "\n General purpose float triple.\n Uses include representation of color coordinates.\n No support yet added for float * Vec3ub - is it necessary?\n Need to define a non-member non-friend operator*  etc.\n Vec3ub * float is okay\n", bp::init< >("\n Constructor that sets all components of the vector to zero\n") );
        bp::scope Vec3ub_scope( Vec3ub_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec3ub::num_components;
        Vec3ub_exposer.def( bp::init< unsigned char, unsigned char, unsigned char >(( bp::arg("r"), bp::arg("g"), bp::arg("b") )) );
        { //::osg::Vec3ub::b
        
            typedef unsigned char & ( ::osg::Vec3ub::*b_function_type)(  ) ;
            
            Vec3ub_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec3ub::b )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3ub::b
        
            typedef unsigned char ( ::osg::Vec3ub::*b_function_type)(  ) const;
            
            Vec3ub_exposer.def( 
                "b"
                , b_function_type( &::osg::Vec3ub::b ) );
        
        }
        { //::osg::Vec3ub::g
        
            typedef unsigned char & ( ::osg::Vec3ub::*g_function_type)(  ) ;
            
            Vec3ub_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec3ub::g )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3ub::g
        
            typedef unsigned char ( ::osg::Vec3ub::*g_function_type)(  ) const;
            
            Vec3ub_exposer.def( 
                "g"
                , g_function_type( &::osg::Vec3ub::g ) );
        
        }
        Vec3ub_exposer.def( bp::self != bp::self );
        Vec3ub_exposer.def( bp::self * bp::other< float >() );
        Vec3ub_exposer.def( bp::self *= bp::other< float >() );
        Vec3ub_exposer.def( bp::self + bp::self );
        Vec3ub_exposer.def( bp::self += bp::self );
        Vec3ub_exposer.def( bp::self - bp::self );
        Vec3ub_exposer.def( bp::self -= bp::self );
        Vec3ub_exposer.def( bp::self / bp::other< float >() );
        Vec3ub_exposer.def( bp::self /= bp::other< float >() );
        Vec3ub_exposer.def( bp::self < bp::self );
        Vec3ub_exposer.def( bp::self == bp::self );
        { //::osg::Vec3ub::operator[]
        
            typedef unsigned char & ( ::osg::Vec3ub::*__getitem___function_type)( unsigned int ) ;
            
            Vec3ub_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec3ub::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3ub::operator[]
        
            typedef unsigned char ( ::osg::Vec3ub::*__getitem___function_type)( unsigned int ) const;
            
            Vec3ub_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec3ub::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec3ub::r
        
            typedef unsigned char & ( ::osg::Vec3ub::*r_function_type)(  ) ;
            
            Vec3ub_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec3ub::r )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3ub::r
        
            typedef unsigned char ( ::osg::Vec3ub::*r_function_type)(  ) const;
            
            Vec3ub_exposer.def( 
                "r"
                , r_function_type( &::osg::Vec3ub::r ) );
        
        }
        { //::osg::Vec3ub::set
        
            typedef void ( ::osg::Vec3ub::*set_function_type)( unsigned char,unsigned char,unsigned char ) ;
            
            Vec3ub_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec3ub::set )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
        
        }
        { //::osg::Vec3ub::set
        
            typedef void ( ::osg::Vec3ub::*set_function_type)( ::osg::Vec3ub const & ) ;
            
            Vec3ub_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec3ub::set )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Vec3ub::x
        
            typedef unsigned char & ( ::osg::Vec3ub::*x_function_type)(  ) ;
            
            Vec3ub_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec3ub::x )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3ub::x
        
            typedef unsigned char ( ::osg::Vec3ub::*x_function_type)(  ) const;
            
            Vec3ub_exposer.def( 
                "x"
                , x_function_type( &::osg::Vec3ub::x ) );
        
        }
        { //::osg::Vec3ub::y
        
            typedef unsigned char & ( ::osg::Vec3ub::*y_function_type)(  ) ;
            
            Vec3ub_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec3ub::y )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3ub::y
        
            typedef unsigned char ( ::osg::Vec3ub::*y_function_type)(  ) const;
            
            Vec3ub_exposer.def( 
                "y"
                , y_function_type( &::osg::Vec3ub::y ) );
        
        }
        { //::osg::Vec3ub::z
        
            typedef unsigned char & ( ::osg::Vec3ub::*z_function_type)(  ) ;
            
            Vec3ub_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec3ub::z )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec3ub::z
        
            typedef unsigned char ( ::osg::Vec3ub::*z_function_type)(  ) const;
            
            Vec3ub_exposer.def( 
                "z"
                , z_function_type( &::osg::Vec3ub::z ) );
        
        }
    }

}
