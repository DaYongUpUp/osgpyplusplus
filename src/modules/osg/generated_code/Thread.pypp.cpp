// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "thread.pypp.hpp"

namespace bp = boost::python;

struct Thread_wrapper : OpenThreads::Thread, bp::wrapper< OpenThreads::Thread > {

    Thread_wrapper( )
    : OpenThreads::Thread( )
      , bp::wrapper< OpenThreads::Thread >(){
        // null constructor
    
    }

    virtual int cancel(  ) {
        if( bp::override func_cancel = this->get_override( "cancel" ) )
            return func_cancel(  );
        else{
            return this->OpenThreads::Thread::cancel(  );
        }
    }
    
    int default_cancel(  ) {
        return OpenThreads::Thread::cancel( );
    }

    virtual void cancelCleanup(  ) {
        if( bp::override func_cancelCleanup = this->get_override( "cancelCleanup" ) )
            func_cancelCleanup(  );
        else{
            this->OpenThreads::Thread::cancelCleanup(  );
        }
    }
    
    void default_cancelCleanup(  ) {
        OpenThreads::Thread::cancelCleanup( );
    }

    virtual void run(  ){
        bp::override func_run = this->get_override( "run" );
        func_run(  );
    }

};

void register_Thread_class(){

    { //::OpenThreads::Thread
        typedef bp::class_< Thread_wrapper, boost::noncopyable > Thread_exposer_t;
        Thread_exposer_t Thread_exposer = Thread_exposer_t( "Thread", bp::init< >() );
        bp::scope Thread_scope( Thread_exposer );
        bp::enum_< OpenThreads::Thread::ThreadPolicy>("ThreadPolicy")
            .value("THREAD_SCHEDULE_FIFO", OpenThreads::Thread::THREAD_SCHEDULE_FIFO)
            .value("THREAD_SCHEDULE_ROUND_ROBIN", OpenThreads::Thread::THREAD_SCHEDULE_ROUND_ROBIN)
            .value("THREAD_SCHEDULE_TIME_SHARE", OpenThreads::Thread::THREAD_SCHEDULE_TIME_SHARE)
            .value("THREAD_SCHEDULE_DEFAULT", OpenThreads::Thread::THREAD_SCHEDULE_DEFAULT)
            .export_values()
            ;
        bp::enum_< OpenThreads::Thread::ThreadPriority>("ThreadPriority")
            .value("THREAD_PRIORITY_MAX", OpenThreads::Thread::THREAD_PRIORITY_MAX)
            .value("THREAD_PRIORITY_HIGH", OpenThreads::Thread::THREAD_PRIORITY_HIGH)
            .value("THREAD_PRIORITY_NOMINAL", OpenThreads::Thread::THREAD_PRIORITY_NOMINAL)
            .value("THREAD_PRIORITY_LOW", OpenThreads::Thread::THREAD_PRIORITY_LOW)
            .value("THREAD_PRIORITY_MIN", OpenThreads::Thread::THREAD_PRIORITY_MIN)
            .value("THREAD_PRIORITY_DEFAULT", OpenThreads::Thread::THREAD_PRIORITY_DEFAULT)
            .export_values()
            ;
        { //::OpenThreads::Thread::CurrentThread
        
            typedef ::OpenThreads::Thread * ( *CurrentThread_function_type )(  );
            
            Thread_exposer.def( 
                "CurrentThread"
                , CurrentThread_function_type( &::OpenThreads::Thread::CurrentThread )
                    /* undefined call policies */ );
        
        }
        { //::OpenThreads::Thread::GetConcurrency
        
            typedef int ( *GetConcurrency_function_type )(  );
            
            Thread_exposer.def( 
                "GetConcurrency"
                , GetConcurrency_function_type( &::OpenThreads::Thread::GetConcurrency ) );
        
        }
        { //::OpenThreads::Thread::GetMasterPriority
        
            typedef ::OpenThreads::Thread::ThreadPriority ( *GetMasterPriority_function_type )(  );
            
            Thread_exposer.def( 
                "GetMasterPriority"
                , GetMasterPriority_function_type( &::OpenThreads::Thread::GetMasterPriority ) );
        
        }
        { //::OpenThreads::Thread::Init
        
            typedef void ( *Init_function_type )(  );
            
            Thread_exposer.def( 
                "Init"
                , Init_function_type( &::OpenThreads::Thread::Init ) );
        
        }
        { //::OpenThreads::Thread::SetConcurrency
        
            typedef int ( *SetConcurrency_function_type )( int );
            
            Thread_exposer.def( 
                "SetConcurrency"
                , SetConcurrency_function_type( &::OpenThreads::Thread::SetConcurrency )
                , ( bp::arg("concurrencyLevel") ) );
        
        }
        { //::OpenThreads::Thread::YieldCurrentThread
        
            typedef int ( *YieldCurrentThread_function_type )(  );
            
            Thread_exposer.def( 
                "YieldCurrentThread"
                , YieldCurrentThread_function_type( &::OpenThreads::Thread::YieldCurrentThread ) );
        
        }
        { //::OpenThreads::Thread::cancel
        
            typedef int ( ::OpenThreads::Thread::*cancel_function_type)(  ) ;
            typedef int ( Thread_wrapper::*default_cancel_function_type)(  ) ;
            
            Thread_exposer.def( 
                "cancel"
                , cancel_function_type(&::OpenThreads::Thread::cancel)
                , default_cancel_function_type(&Thread_wrapper::default_cancel) );
        
        }
        { //::OpenThreads::Thread::cancelCleanup
        
            typedef void ( ::OpenThreads::Thread::*cancelCleanup_function_type)(  ) ;
            typedef void ( Thread_wrapper::*default_cancelCleanup_function_type)(  ) ;
            
            Thread_exposer.def( 
                "cancelCleanup"
                , cancelCleanup_function_type(&::OpenThreads::Thread::cancelCleanup)
                , default_cancelCleanup_function_type(&Thread_wrapper::default_cancelCleanup) );
        
        }
        { //::OpenThreads::Thread::detach
        
            typedef int ( ::OpenThreads::Thread::*detach_function_type)(  ) ;
            
            Thread_exposer.def( 
                "detach"
                , detach_function_type( &::OpenThreads::Thread::detach ) );
        
        }
        { //::OpenThreads::Thread::getImplementation
        
            typedef void * ( ::OpenThreads::Thread::*getImplementation_function_type)(  ) ;
            
            Thread_exposer.def( 
                "getImplementation"
                , getImplementation_function_type( &::OpenThreads::Thread::getImplementation )
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::OpenThreads::Thread::getProcessId
        
            typedef ::size_t ( ::OpenThreads::Thread::*getProcessId_function_type)(  ) ;
            
            Thread_exposer.def( 
                "getProcessId"
                , getProcessId_function_type( &::OpenThreads::Thread::getProcessId ) );
        
        }
        { //::OpenThreads::Thread::getSchedulePolicy
        
            typedef int ( ::OpenThreads::Thread::*getSchedulePolicy_function_type)(  ) ;
            
            Thread_exposer.def( 
                "getSchedulePolicy"
                , getSchedulePolicy_function_type( &::OpenThreads::Thread::getSchedulePolicy ) );
        
        }
        { //::OpenThreads::Thread::getSchedulePriority
        
            typedef int ( ::OpenThreads::Thread::*getSchedulePriority_function_type)(  ) ;
            
            Thread_exposer.def( 
                "getSchedulePriority"
                , getSchedulePriority_function_type( &::OpenThreads::Thread::getSchedulePriority ) );
        
        }
        { //::OpenThreads::Thread::getStackSize
        
            typedef ::size_t ( ::OpenThreads::Thread::*getStackSize_function_type)(  ) ;
            
            Thread_exposer.def( 
                "getStackSize"
                , getStackSize_function_type( &::OpenThreads::Thread::getStackSize ) );
        
        }
        { //::OpenThreads::Thread::getThreadId
        
            typedef int ( ::OpenThreads::Thread::*getThreadId_function_type)(  ) ;
            
            Thread_exposer.def( 
                "getThreadId"
                , getThreadId_function_type( &::OpenThreads::Thread::getThreadId ) );
        
        }
        { //::OpenThreads::Thread::isRunning
        
            typedef bool ( ::OpenThreads::Thread::*isRunning_function_type)(  ) ;
            
            Thread_exposer.def( 
                "isRunning"
                , isRunning_function_type( &::OpenThreads::Thread::isRunning ) );
        
        }
        { //::OpenThreads::Thread::join
        
            typedef int ( ::OpenThreads::Thread::*join_function_type)(  ) ;
            
            Thread_exposer.def( 
                "join"
                , join_function_type( &::OpenThreads::Thread::join ) );
        
        }
        { //::OpenThreads::Thread::microSleep
        
            typedef int ( *microSleep_function_type )( unsigned int );
            
            Thread_exposer.def( 
                "microSleep"
                , microSleep_function_type( &::OpenThreads::Thread::microSleep )
                , ( bp::arg("microsec") ) );
        
        }
        { //::OpenThreads::Thread::printSchedulingInfo
        
            typedef void ( ::OpenThreads::Thread::*printSchedulingInfo_function_type)(  ) ;
            
            Thread_exposer.def( 
                "printSchedulingInfo"
                , printSchedulingInfo_function_type( &::OpenThreads::Thread::printSchedulingInfo ) );
        
        }
        { //::OpenThreads::Thread::run
        
            typedef void ( ::OpenThreads::Thread::*run_function_type)(  ) ;
            
            Thread_exposer.def( 
                "run"
                , bp::pure_virtual( run_function_type(&::OpenThreads::Thread::run) ) );
        
        }
        { //::OpenThreads::Thread::setCancelModeAsynchronous
        
            typedef int ( ::OpenThreads::Thread::*setCancelModeAsynchronous_function_type)(  ) ;
            
            Thread_exposer.def( 
                "setCancelModeAsynchronous"
                , setCancelModeAsynchronous_function_type( &::OpenThreads::Thread::setCancelModeAsynchronous ) );
        
        }
        { //::OpenThreads::Thread::setCancelModeDeferred
        
            typedef int ( ::OpenThreads::Thread::*setCancelModeDeferred_function_type)(  ) ;
            
            Thread_exposer.def( 
                "setCancelModeDeferred"
                , setCancelModeDeferred_function_type( &::OpenThreads::Thread::setCancelModeDeferred ) );
        
        }
        { //::OpenThreads::Thread::setCancelModeDisable
        
            typedef int ( ::OpenThreads::Thread::*setCancelModeDisable_function_type)(  ) ;
            
            Thread_exposer.def( 
                "setCancelModeDisable"
                , setCancelModeDisable_function_type( &::OpenThreads::Thread::setCancelModeDisable ) );
        
        }
        { //::OpenThreads::Thread::setProcessorAffinity
        
            typedef int ( ::OpenThreads::Thread::*setProcessorAffinity_function_type)( unsigned int ) ;
            
            Thread_exposer.def( 
                "setProcessorAffinity"
                , setProcessorAffinity_function_type( &::OpenThreads::Thread::setProcessorAffinity )
                , ( bp::arg("cpunum") ) );
        
        }
        { //::OpenThreads::Thread::setSchedulePolicy
        
            typedef int ( ::OpenThreads::Thread::*setSchedulePolicy_function_type)( ::OpenThreads::Thread::ThreadPolicy ) ;
            
            Thread_exposer.def( 
                "setSchedulePolicy"
                , setSchedulePolicy_function_type( &::OpenThreads::Thread::setSchedulePolicy )
                , ( bp::arg("policy") ) );
        
        }
        { //::OpenThreads::Thread::setSchedulePriority
        
            typedef int ( ::OpenThreads::Thread::*setSchedulePriority_function_type)( ::OpenThreads::Thread::ThreadPriority ) ;
            
            Thread_exposer.def( 
                "setSchedulePriority"
                , setSchedulePriority_function_type( &::OpenThreads::Thread::setSchedulePriority )
                , ( bp::arg("priority") ) );
        
        }
        { //::OpenThreads::Thread::setStackSize
        
            typedef int ( ::OpenThreads::Thread::*setStackSize_function_type)( ::size_t ) ;
            
            Thread_exposer.def( 
                "setStackSize"
                , setStackSize_function_type( &::OpenThreads::Thread::setStackSize )
                , ( bp::arg("size") ) );
        
        }
        { //::OpenThreads::Thread::start
        
            typedef int ( ::OpenThreads::Thread::*start_function_type)(  ) ;
            
            Thread_exposer.def( 
                "start"
                , start_function_type( &::OpenThreads::Thread::start ) );
        
        }
        { //::OpenThreads::Thread::startThread
        
            typedef int ( ::OpenThreads::Thread::*startThread_function_type)(  ) ;
            
            Thread_exposer.def( 
                "startThread"
                , startThread_function_type( &::OpenThreads::Thread::startThread ) );
        
        }
        { //::OpenThreads::Thread::testCancel
        
            typedef int ( ::OpenThreads::Thread::*testCancel_function_type)(  ) ;
            
            Thread_exposer.def( 
                "testCancel"
                , testCancel_function_type( &::OpenThreads::Thread::testCancel ) );
        
        }
        Thread_exposer.staticmethod( "CurrentThread" );
        Thread_exposer.staticmethod( "GetConcurrency" );
        Thread_exposer.staticmethod( "GetMasterPriority" );
        Thread_exposer.staticmethod( "Init" );
        Thread_exposer.staticmethod( "SetConcurrency" );
        Thread_exposer.staticmethod( "YieldCurrentThread" );
        Thread_exposer.staticmethod( "microSleep" );
    }

}
