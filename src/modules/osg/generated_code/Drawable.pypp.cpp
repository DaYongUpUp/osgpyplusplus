// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "drawable.pypp.hpp"

namespace bp = boost::python;

struct Drawable_wrapper : osg::Drawable, bp::wrapper< osg::Drawable > {

    struct AttributeFunctor_wrapper : osg::Drawable::AttributeFunctor, bp::wrapper< osg::Drawable::AttributeFunctor > {
    
        AttributeFunctor_wrapper(osg::Drawable::AttributeFunctor const & arg )
        : osg::Drawable::AttributeFunctor( arg )
          , bp::wrapper< osg::Drawable::AttributeFunctor >(){
            // copy constructor
            
        }
    
        AttributeFunctor_wrapper()
        : osg::Drawable::AttributeFunctor()
          , bp::wrapper< osg::Drawable::AttributeFunctor >(){
            // null constructor
            
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLbyte * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLbyte * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLshort * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLshort * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLint * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLint * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLubyte * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLubyte * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLushort * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLushort * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLuint * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLuint * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, float * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, float * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2 * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2 * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3 * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3 * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4 * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4 * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4ub * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4ub * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, double * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, double * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2d * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2d * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3d * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3d * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4d * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4d * arg2 ) {
            osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
    };

    struct ComputeBoundingBoxCallback_wrapper : osg::Drawable::ComputeBoundingBoxCallback, bp::wrapper< osg::Drawable::ComputeBoundingBoxCallback > {
    
        ComputeBoundingBoxCallback_wrapper( )
        : osg::Drawable::ComputeBoundingBoxCallback( )
          , bp::wrapper< osg::Drawable::ComputeBoundingBoxCallback >(){
            // null constructor
        
        }
    
        ComputeBoundingBoxCallback_wrapper(::osg::Drawable::ComputeBoundingBoxCallback const & arg0, ::osg::CopyOp const & arg1 )
        : osg::Drawable::ComputeBoundingBoxCallback( boost::ref(arg0), boost::ref(arg1) )
          , bp::wrapper< osg::Drawable::ComputeBoundingBoxCallback >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::Drawable::ComputeBoundingBoxCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::Drawable::ComputeBoundingBoxCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::Drawable::ComputeBoundingBoxCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::Drawable::ComputeBoundingBoxCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::Drawable::ComputeBoundingBoxCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::Drawable::ComputeBoundingBoxCallback::cloneType( );
        }
    
        virtual ::osg::BoundingBox computeBound( ::osg::Drawable const & arg0 ) const  {
            if( bp::override func_computeBound = this->get_override( "computeBound" ) )
                return func_computeBound( boost::ref(arg0) );
            else{
                return this->osg::Drawable::ComputeBoundingBoxCallback::computeBound( boost::ref(arg0) );
            }
        }
        
        ::osg::BoundingBox default_computeBound( ::osg::Drawable const & arg0 ) const  {
            return osg::Drawable::ComputeBoundingBoxCallback::computeBound( boost::ref(arg0) );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::Drawable::ComputeBoundingBoxCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::Drawable::ComputeBoundingBoxCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::Drawable::ComputeBoundingBoxCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::Drawable::ComputeBoundingBoxCallback::libraryName( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    struct ConstAttributeFunctor_wrapper : osg::Drawable::ConstAttributeFunctor, bp::wrapper< osg::Drawable::ConstAttributeFunctor > {
    
        ConstAttributeFunctor_wrapper(osg::Drawable::ConstAttributeFunctor const & arg )
        : osg::Drawable::ConstAttributeFunctor( arg )
          , bp::wrapper< osg::Drawable::ConstAttributeFunctor >(){
            // copy constructor
            
        }
    
        ConstAttributeFunctor_wrapper()
        : osg::Drawable::ConstAttributeFunctor()
          , bp::wrapper< osg::Drawable::ConstAttributeFunctor >(){
            // null constructor
            
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLbyte const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLbyte const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLshort const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLshort const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLint const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLint const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLubyte const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLubyte const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLushort const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLushort const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::GLuint const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::GLuint const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, float const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, float const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2 const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2 const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3 const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3 const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4 const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4 const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4ub const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4ub const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, double const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, arg2 );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, double const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, arg2 );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2d const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2d const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3d const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec3d const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4d const * arg2 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0, arg1, boost::python::ptr(arg2) );
            else{
                this->osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4d const * arg2 ) {
            osg::Drawable::ConstAttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    
    };

    struct CullCallback_wrapper : osg::Drawable::CullCallback, bp::wrapper< osg::Drawable::CullCallback > {
    
        CullCallback_wrapper( )
        : osg::Drawable::CullCallback( )
          , bp::wrapper< osg::Drawable::CullCallback >(){
            // null constructor
        
        }
    
        CullCallback_wrapper(::osg::Drawable::CullCallback const & arg0, ::osg::CopyOp const & arg1 )
        : osg::Drawable::CullCallback( boost::ref(arg0), boost::ref(arg1) )
          , bp::wrapper< osg::Drawable::CullCallback >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::Drawable::CullCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::Drawable::CullCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::Drawable::CullCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::Drawable::CullCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::Drawable::CullCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::Drawable::CullCallback::cloneType( );
        }
    
        virtual bool cull( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1, ::osg::State * arg2 ) const  {
            if( bp::override func_cull = this->get_override( "cull" ) )
                return func_cull( boost::python::ptr(arg0), boost::python::ptr(arg1), boost::python::ptr(arg2) );
            else{
                return this->osg::Drawable::CullCallback::cull( boost::python::ptr(arg0), boost::python::ptr(arg1), boost::python::ptr(arg2) );
            }
        }
        
        bool default_cull( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1, ::osg::State * arg2 ) const  {
            return osg::Drawable::CullCallback::cull( boost::python::ptr(arg0), boost::python::ptr(arg1), boost::python::ptr(arg2) );
        }
    
        virtual bool cull( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable, ::osg::RenderInfo * renderInfo ) const  {
            if( bp::override func_cull = this->get_override( "cull" ) )
                return func_cull( boost::python::ptr(nv), boost::python::ptr(drawable), boost::python::ptr(renderInfo) );
            else{
                return this->osg::Drawable::CullCallback::cull( boost::python::ptr(nv), boost::python::ptr(drawable), boost::python::ptr(renderInfo) );
            }
        }
        
        bool default_cull( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable, ::osg::RenderInfo * renderInfo ) const  {
            return osg::Drawable::CullCallback::cull( boost::python::ptr(nv), boost::python::ptr(drawable), boost::python::ptr(renderInfo) );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::Drawable::CullCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::Drawable::CullCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::Drawable::CullCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::Drawable::CullCallback::libraryName( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    struct DrawCallback_wrapper : osg::Drawable::DrawCallback, bp::wrapper< osg::Drawable::DrawCallback > {
    
        DrawCallback_wrapper( )
        : osg::Drawable::DrawCallback( )
          , bp::wrapper< osg::Drawable::DrawCallback >(){
            // null constructor
        
        }
    
        DrawCallback_wrapper(::osg::Drawable::DrawCallback const & arg0, ::osg::CopyOp const & arg1 )
        : osg::Drawable::DrawCallback( boost::ref(arg0), boost::ref(arg1) )
          , bp::wrapper< osg::Drawable::DrawCallback >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::Drawable::DrawCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::Drawable::DrawCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::Drawable::DrawCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::Drawable::DrawCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::Drawable::DrawCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::Drawable::DrawCallback::cloneType( );
        }
    
        virtual void drawImplementation( ::osg::RenderInfo & arg0, ::osg::Drawable const * arg1 ) const  {
            if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
                func_drawImplementation( boost::ref(arg0), boost::python::ptr(arg1) );
            else{
                this->osg::Drawable::DrawCallback::drawImplementation( boost::ref(arg0), boost::python::ptr(arg1) );
            }
        }
        
        void default_drawImplementation( ::osg::RenderInfo & arg0, ::osg::Drawable const * arg1 ) const  {
            osg::Drawable::DrawCallback::drawImplementation( boost::ref(arg0), boost::python::ptr(arg1) );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::Drawable::DrawCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::Drawable::DrawCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::Drawable::DrawCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::Drawable::DrawCallback::libraryName( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    struct EventCallback_wrapper : osg::Drawable::EventCallback, bp::wrapper< osg::Drawable::EventCallback > {
    
        EventCallback_wrapper( )
        : osg::Drawable::EventCallback( )
          , bp::wrapper< osg::Drawable::EventCallback >(){
            // null constructor
        
        }
    
        EventCallback_wrapper(::osg::Drawable::EventCallback const & arg0, ::osg::CopyOp const & arg1 )
        : osg::Drawable::EventCallback( boost::ref(arg0), boost::ref(arg1) )
          , bp::wrapper< osg::Drawable::EventCallback >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::Drawable::EventCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::Drawable::EventCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::Drawable::EventCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::Drawable::EventCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::Drawable::EventCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::Drawable::EventCallback::cloneType( );
        }
    
        virtual void event( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1 ) {
            if( bp::override func_event = this->get_override( "event" ) )
                func_event( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            else{
                this->osg::Drawable::EventCallback::event( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            }
        }
        
        void default_event( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1 ) {
            osg::Drawable::EventCallback::event( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::Drawable::EventCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::Drawable::EventCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::Drawable::EventCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::Drawable::EventCallback::libraryName( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    struct Extensions_wrapper : osg::Drawable::Extensions, bp::wrapper< osg::Drawable::Extensions > {
    
        Extensions_wrapper(unsigned int contextID )
        : osg::Drawable::Extensions( contextID )
          , bp::wrapper< osg::Drawable::Extensions >(){
            // constructor
        
        }
    
        Extensions_wrapper(::osg::Drawable::Extensions const & rhs )
        : osg::Drawable::Extensions( boost::ref(rhs) )
          , bp::wrapper< osg::Drawable::Extensions >(){
            // copy constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct UpdateCallback_wrapper : osg::Drawable::UpdateCallback, bp::wrapper< osg::Drawable::UpdateCallback > {
    
        UpdateCallback_wrapper( )
        : osg::Drawable::UpdateCallback( )
          , bp::wrapper< osg::Drawable::UpdateCallback >(){
            // null constructor
        
        }
    
        UpdateCallback_wrapper(::osg::Drawable::UpdateCallback const & arg0, ::osg::CopyOp const & arg1 )
        : osg::Drawable::UpdateCallback( boost::ref(arg0), boost::ref(arg1) )
          , bp::wrapper< osg::Drawable::UpdateCallback >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::Drawable::UpdateCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::Drawable::UpdateCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::Drawable::UpdateCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::Drawable::UpdateCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::Drawable::UpdateCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::Drawable::UpdateCallback::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::Drawable::UpdateCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::Drawable::UpdateCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::Drawable::UpdateCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::Drawable::UpdateCallback::libraryName( );
        }
    
        virtual void update( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1 ) {
            if( bp::override func_update = this->get_override( "update" ) )
                func_update( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            else{
                this->osg::Drawable::UpdateCallback::update( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            }
        }
        
        void default_update( ::osg::NodeVisitor * arg0, ::osg::Drawable * arg1 ) {
            osg::Drawable::UpdateCallback::update( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    Drawable_wrapper( )
    : osg::Drawable( )
      , bp::wrapper< osg::Drawable >(){
        // null constructor
    
    }

    Drawable_wrapper(::osg::Drawable const & drawable, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::Drawable( boost::ref(drawable), boost::ref(copyop) )
      , bp::wrapper< osg::Drawable >(){
        // constructor
    
    }

    virtual void accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual ::osg::Geometry * asGeometry(  ) {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry * default_asGeometry(  ) {
        return osg::Drawable::asGeometry( );
    }

    virtual ::osg::Geometry const * asGeometry(  ) const  {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry const * default_asGeometry(  ) const  {
        return osg::Drawable::asGeometry( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Drawable::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Drawable::className( );
    }

    virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(renderInfo) );
        else{
            this->osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
        }
    }
    
    void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
    }

    virtual ::osg::BoundingBox computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Drawable::computeBound(  );
        }
    }
    
    ::osg::BoundingBox default_computeBound(  ) const  {
        return osg::Drawable::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Drawable::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Drawable::computeDataVariance( );
    }

    virtual void dirtyDisplayList(  ) {
        if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
            func_dirtyDisplayList(  );
        else{
            this->osg::Drawable::dirtyDisplayList(  );
        }
    }
    
    void default_dirtyDisplayList(  ) {
        osg::Drawable::dirtyDisplayList( );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const {
        bp::override func_drawImplementation = this->get_override( "drawImplementation" );
        func_drawImplementation( boost::ref(renderInfo) );
    }

    virtual unsigned int getGLObjectSizeHint(  ) const  {
        if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
            return func_getGLObjectSizeHint(  );
        else{
            return this->osg::Drawable::getGLObjectSizeHint(  );
        }
    }
    
    unsigned int default_getGLObjectSizeHint(  ) const  {
        return osg::Drawable::getGLObjectSizeHint( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Drawable::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Drawable::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Drawable::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Drawable::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osg::Drawable::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osg::Drawable::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Drawable::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Drawable::resizeGLObjectBuffers( maxSize );
    }

    virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
            func_setCullCallback( boost::python::ptr(cc) );
        else{
            this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    }
    
    void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        osg::Drawable::setCullCallback( boost::python::ptr(cc) );
    }

    virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
            func_setDrawCallback( boost::python::ptr(dc) );
        else{
            this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    }
    
    void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
    }

    virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
            func_setEventCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        osg::Drawable::setEventCallback( boost::python::ptr(ac) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Drawable::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
            func_setUpdateCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
    }

    virtual void setUseVertexBufferObjects( bool flag ) {
        if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
            func_setUseVertexBufferObjects( flag );
        else{
            this->osg::Drawable::setUseVertexBufferObjects( flag );
        }
    }
    
    void default_setUseVertexBufferObjects( bool flag ) {
        osg::Drawable::setUseVertexBufferObjects( flag );
    }

    virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Drawable_class(){

    { //::osg::Drawable
        typedef bp::class_< Drawable_wrapper, bp::bases< osg::Object >, boost::noncopyable > Drawable_exposer_t;
        Drawable_exposer_t Drawable_exposer = Drawable_exposer_t( "Drawable", bp::no_init );
        bp::scope Drawable_scope( Drawable_exposer );
        bp::enum_< osg::Drawable::AttributeTypes>("AttributeTypes")
            .value("VERTICES", osg::Drawable::VERTICES)
            .value("WEIGHTS", osg::Drawable::WEIGHTS)
            .value("NORMALS", osg::Drawable::NORMALS)
            .value("COLORS", osg::Drawable::COLORS)
            .value("SECONDARY_COLORS", osg::Drawable::SECONDARY_COLORS)
            .value("FOG_COORDS", osg::Drawable::FOG_COORDS)
            .value("ATTRIBUTE_6", osg::Drawable::ATTRIBUTE_6)
            .value("ATTRIBUTE_7", osg::Drawable::ATTRIBUTE_7)
            .value("TEXTURE_COORDS", osg::Drawable::TEXTURE_COORDS)
            .value("TEXTURE_COORDS_0", osg::Drawable::TEXTURE_COORDS_0)
            .value("TEXTURE_COORDS_1", osg::Drawable::TEXTURE_COORDS_1)
            .value("TEXTURE_COORDS_2", osg::Drawable::TEXTURE_COORDS_2)
            .value("TEXTURE_COORDS_3", osg::Drawable::TEXTURE_COORDS_3)
            .value("TEXTURE_COORDS_4", osg::Drawable::TEXTURE_COORDS_4)
            .value("TEXTURE_COORDS_5", osg::Drawable::TEXTURE_COORDS_5)
            .value("TEXTURE_COORDS_6", osg::Drawable::TEXTURE_COORDS_6)
            .value("TEXTURE_COORDS_7", osg::Drawable::TEXTURE_COORDS_7)
            .export_values()
            ;
        bp::class_< Drawable_wrapper::AttributeFunctor_wrapper >( "AttributeFunctor" )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::GLbyte * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLbyte * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::GLshort * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLshort * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::GLint * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLint * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::GLubyte * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLubyte * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::GLushort * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLushort * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::GLuint * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLuint * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,float * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,float * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec2 * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec2 * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec3 * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec3 * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec4 * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec4 * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec4ub * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec4ub * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,double * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,double * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec2d * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec2d * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec3d * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec3d * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::AttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec4d * ))(&::osg::Drawable::AttributeFunctor::apply)
                , (void ( Drawable_wrapper::AttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec4d * ))(&Drawable_wrapper::AttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        bp::class_< Drawable_wrapper::ComputeBoundingBoxCallback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "ComputeBoundingBoxCallback", bp::init< >() )    
            .def( bp::init< osg::Drawable::ComputeBoundingBoxCallback const &, osg::CopyOp const & >(( bp::arg("arg0"), bp::arg("arg1") )) )    
            .def( 
                "className"
                , (char const * ( ::osg::Drawable::ComputeBoundingBoxCallback::* )(  )const)(&::osg::Drawable::ComputeBoundingBoxCallback::className)
                , (char const * ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )(  )const)(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::Drawable::ComputeBoundingBoxCallback::* )( ::osg::CopyOp const & )const)(&::osg::Drawable::ComputeBoundingBoxCallback::clone)
                , (::osg::Object * ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )( ::osg::CopyOp const & )const)(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::Drawable::ComputeBoundingBoxCallback::* )(  )const)(&::osg::Drawable::ComputeBoundingBoxCallback::cloneType)
                , (::osg::Object * ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )(  )const)(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "computeBound"
                , (::osg::BoundingBox ( ::osg::Drawable::ComputeBoundingBoxCallback::* )( ::osg::Drawable const & )const)(&::osg::Drawable::ComputeBoundingBoxCallback::computeBound)
                , (::osg::BoundingBox ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )( ::osg::Drawable const & )const)(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_computeBound)
                , ( bp::arg("arg0") ) )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::Drawable::ComputeBoundingBoxCallback::* )( ::osg::Object const * )const)(&::osg::Drawable::ComputeBoundingBoxCallback::isSameKindAs)
                , (bool ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )( ::osg::Object const * )const)(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::Drawable::ComputeBoundingBoxCallback::* )(  )const)(&::osg::Drawable::ComputeBoundingBoxCallback::libraryName)
                , (char const * ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )(  )const)(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_libraryName) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )(  ))(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )(  ))(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )(  )const)(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )( unsigned int ))(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )( ::std::string const & ))(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )( bool ))(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::* )( ::osg::Referenced * ))(&Drawable_wrapper::ComputeBoundingBoxCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        bp::class_< Drawable_wrapper::ConstAttributeFunctor_wrapper >( "ConstAttributeFunctor" )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::GLbyte const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLbyte const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::GLshort const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLshort const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::GLint const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLint const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::GLubyte const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLubyte const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::GLushort const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLushort const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::GLuint const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::GLuint const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,float const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,float const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec2 const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec2 const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec3 const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec3 const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec4 const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec4 const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec4ub const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec4ub const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,double const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,double const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec2d const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec2d const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec3d const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec3d const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "apply"
                , (void ( ::osg::Drawable::ConstAttributeFunctor::* )( unsigned int,unsigned int,::osg::Vec4d const * ))(&::osg::Drawable::ConstAttributeFunctor::apply)
                , (void ( Drawable_wrapper::ConstAttributeFunctor_wrapper::* )( unsigned int,unsigned int,::osg::Vec4d const * ))(&Drawable_wrapper::ConstAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        bp::class_< Drawable_wrapper::CullCallback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "CullCallback", bp::init< >() )    
            .def( bp::init< osg::Drawable::CullCallback const &, osg::CopyOp const & >(( bp::arg("arg0"), bp::arg("arg1") )) )    
            .def( 
                "className"
                , (char const * ( ::osg::Drawable::CullCallback::* )(  )const)(&::osg::Drawable::CullCallback::className)
                , (char const * ( Drawable_wrapper::CullCallback_wrapper::* )(  )const)(&Drawable_wrapper::CullCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::Drawable::CullCallback::* )( ::osg::CopyOp const & )const)(&::osg::Drawable::CullCallback::clone)
                , (::osg::Object * ( Drawable_wrapper::CullCallback_wrapper::* )( ::osg::CopyOp const & )const)(&Drawable_wrapper::CullCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::Drawable::CullCallback::* )(  )const)(&::osg::Drawable::CullCallback::cloneType)
                , (::osg::Object * ( Drawable_wrapper::CullCallback_wrapper::* )(  )const)(&Drawable_wrapper::CullCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cull"
                , (bool ( ::osg::Drawable::CullCallback::* )( ::osg::NodeVisitor *,::osg::Drawable *,::osg::State * )const)(&::osg::Drawable::CullCallback::cull)
                , (bool ( Drawable_wrapper::CullCallback_wrapper::* )( ::osg::NodeVisitor *,::osg::Drawable *,::osg::State * )const)(&Drawable_wrapper::CullCallback_wrapper::default_cull)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
            .def( 
                "cull"
                , (bool ( ::osg::Drawable::CullCallback::* )( ::osg::NodeVisitor *,::osg::Drawable *,::osg::RenderInfo * )const)(&::osg::Drawable::CullCallback::cull)
                , (bool ( Drawable_wrapper::CullCallback_wrapper::* )( ::osg::NodeVisitor *,::osg::Drawable *,::osg::RenderInfo * )const)(&Drawable_wrapper::CullCallback_wrapper::default_cull)
                , ( bp::arg("nv"), bp::arg("drawable"), bp::arg("renderInfo") ) )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::Drawable::CullCallback::* )( ::osg::Object const * )const)(&::osg::Drawable::CullCallback::isSameKindAs)
                , (bool ( Drawable_wrapper::CullCallback_wrapper::* )( ::osg::Object const * )const)(&Drawable_wrapper::CullCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::Drawable::CullCallback::* )(  )const)(&::osg::Drawable::CullCallback::libraryName)
                , (char const * ( Drawable_wrapper::CullCallback_wrapper::* )(  )const)(&Drawable_wrapper::CullCallback_wrapper::default_libraryName) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( Drawable_wrapper::CullCallback_wrapper::* )(  ))(&Drawable_wrapper::CullCallback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( Drawable_wrapper::CullCallback_wrapper::* )(  ))(&Drawable_wrapper::CullCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( Drawable_wrapper::CullCallback_wrapper::* )(  )const)(&Drawable_wrapper::CullCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( Drawable_wrapper::CullCallback_wrapper::* )( unsigned int ))(&Drawable_wrapper::CullCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( Drawable_wrapper::CullCallback_wrapper::* )( ::std::string const & ))(&Drawable_wrapper::CullCallback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( Drawable_wrapper::CullCallback_wrapper::* )( bool ))(&Drawable_wrapper::CullCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( Drawable_wrapper::CullCallback_wrapper::* )( ::osg::Referenced * ))(&Drawable_wrapper::CullCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        bp::class_< Drawable_wrapper::DrawCallback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "DrawCallback", bp::init< >() )    
            .def( bp::init< osg::Drawable::DrawCallback const &, osg::CopyOp const & >(( bp::arg("arg0"), bp::arg("arg1") )) )    
            .def( 
                "className"
                , (char const * ( ::osg::Drawable::DrawCallback::* )(  )const)(&::osg::Drawable::DrawCallback::className)
                , (char const * ( Drawable_wrapper::DrawCallback_wrapper::* )(  )const)(&Drawable_wrapper::DrawCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::Drawable::DrawCallback::* )( ::osg::CopyOp const & )const)(&::osg::Drawable::DrawCallback::clone)
                , (::osg::Object * ( Drawable_wrapper::DrawCallback_wrapper::* )( ::osg::CopyOp const & )const)(&Drawable_wrapper::DrawCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::Drawable::DrawCallback::* )(  )const)(&::osg::Drawable::DrawCallback::cloneType)
                , (::osg::Object * ( Drawable_wrapper::DrawCallback_wrapper::* )(  )const)(&Drawable_wrapper::DrawCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "drawImplementation"
                , (void ( ::osg::Drawable::DrawCallback::* )( ::osg::RenderInfo &,::osg::Drawable const * )const)(&::osg::Drawable::DrawCallback::drawImplementation)
                , (void ( Drawable_wrapper::DrawCallback_wrapper::* )( ::osg::RenderInfo &,::osg::Drawable const * )const)(&Drawable_wrapper::DrawCallback_wrapper::default_drawImplementation)
                , ( bp::arg("arg0"), bp::arg("arg1") ) )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::Drawable::DrawCallback::* )( ::osg::Object const * )const)(&::osg::Drawable::DrawCallback::isSameKindAs)
                , (bool ( Drawable_wrapper::DrawCallback_wrapper::* )( ::osg::Object const * )const)(&Drawable_wrapper::DrawCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::Drawable::DrawCallback::* )(  )const)(&::osg::Drawable::DrawCallback::libraryName)
                , (char const * ( Drawable_wrapper::DrawCallback_wrapper::* )(  )const)(&Drawable_wrapper::DrawCallback_wrapper::default_libraryName) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( Drawable_wrapper::DrawCallback_wrapper::* )(  ))(&Drawable_wrapper::DrawCallback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( Drawable_wrapper::DrawCallback_wrapper::* )(  ))(&Drawable_wrapper::DrawCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( Drawable_wrapper::DrawCallback_wrapper::* )(  )const)(&Drawable_wrapper::DrawCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( Drawable_wrapper::DrawCallback_wrapper::* )( unsigned int ))(&Drawable_wrapper::DrawCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( Drawable_wrapper::DrawCallback_wrapper::* )( ::std::string const & ))(&Drawable_wrapper::DrawCallback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( Drawable_wrapper::DrawCallback_wrapper::* )( bool ))(&Drawable_wrapper::DrawCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( Drawable_wrapper::DrawCallback_wrapper::* )( ::osg::Referenced * ))(&Drawable_wrapper::DrawCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        bp::class_< Drawable_wrapper::EventCallback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "EventCallback", bp::init< >() )    
            .def( bp::init< osg::Drawable::EventCallback const &, osg::CopyOp const & >(( bp::arg("arg0"), bp::arg("arg1") )) )    
            .def( 
                "className"
                , (char const * ( ::osg::Drawable::EventCallback::* )(  )const)(&::osg::Drawable::EventCallback::className)
                , (char const * ( Drawable_wrapper::EventCallback_wrapper::* )(  )const)(&Drawable_wrapper::EventCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::Drawable::EventCallback::* )( ::osg::CopyOp const & )const)(&::osg::Drawable::EventCallback::clone)
                , (::osg::Object * ( Drawable_wrapper::EventCallback_wrapper::* )( ::osg::CopyOp const & )const)(&Drawable_wrapper::EventCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::Drawable::EventCallback::* )(  )const)(&::osg::Drawable::EventCallback::cloneType)
                , (::osg::Object * ( Drawable_wrapper::EventCallback_wrapper::* )(  )const)(&Drawable_wrapper::EventCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "event"
                , (void ( ::osg::Drawable::EventCallback::* )( ::osg::NodeVisitor *,::osg::Drawable * ))(&::osg::Drawable::EventCallback::event)
                , (void ( Drawable_wrapper::EventCallback_wrapper::* )( ::osg::NodeVisitor *,::osg::Drawable * ))(&Drawable_wrapper::EventCallback_wrapper::default_event)
                , ( bp::arg("arg0"), bp::arg("arg1") ) )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::Drawable::EventCallback::* )( ::osg::Object const * )const)(&::osg::Drawable::EventCallback::isSameKindAs)
                , (bool ( Drawable_wrapper::EventCallback_wrapper::* )( ::osg::Object const * )const)(&Drawable_wrapper::EventCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::Drawable::EventCallback::* )(  )const)(&::osg::Drawable::EventCallback::libraryName)
                , (char const * ( Drawable_wrapper::EventCallback_wrapper::* )(  )const)(&Drawable_wrapper::EventCallback_wrapper::default_libraryName) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( Drawable_wrapper::EventCallback_wrapper::* )(  ))(&Drawable_wrapper::EventCallback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( Drawable_wrapper::EventCallback_wrapper::* )(  ))(&Drawable_wrapper::EventCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( Drawable_wrapper::EventCallback_wrapper::* )(  )const)(&Drawable_wrapper::EventCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( Drawable_wrapper::EventCallback_wrapper::* )( unsigned int ))(&Drawable_wrapper::EventCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( Drawable_wrapper::EventCallback_wrapper::* )( ::std::string const & ))(&Drawable_wrapper::EventCallback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( Drawable_wrapper::EventCallback_wrapper::* )( bool ))(&Drawable_wrapper::EventCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( Drawable_wrapper::EventCallback_wrapper::* )( ::osg::Referenced * ))(&Drawable_wrapper::EventCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        { //::osg::Drawable::Extensions
            typedef bp::class_< Drawable_wrapper::Extensions_wrapper, bp::bases< osg::Referenced > > Extensions_exposer_t;
            Extensions_exposer_t Extensions_exposer = Extensions_exposer_t( "Extensions", bp::no_init );
            bp::scope Extensions_scope( Extensions_exposer );
            Extensions_exposer.def( bp::init< unsigned int >(( bp::arg("contextID") )) );
            bp::implicitly_convertible< unsigned int, osg::Drawable::Extensions >();
            Extensions_exposer.def( bp::init< osg::Drawable::Extensions const & >(( bp::arg("rhs") )) );
            { //::osg::Drawable::Extensions::glBeginOcclusionQuery
            
                typedef void ( ::osg::Drawable::Extensions::*glBeginOcclusionQuery_function_type)( ::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glBeginOcclusionQuery"
                    , glBeginOcclusionQuery_function_type( &::osg::Drawable::Extensions::glBeginOcclusionQuery )
                    , ( bp::arg("id") ) );
            
            }
            { //::osg::Drawable::Extensions::glBeginQuery
            
                typedef void ( ::osg::Drawable::Extensions::*glBeginQuery_function_type)( ::GLenum,::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glBeginQuery"
                    , glBeginQuery_function_type( &::osg::Drawable::Extensions::glBeginQuery )
                    , ( bp::arg("target"), bp::arg("id") ) );
            
            }
            { //::osg::Drawable::Extensions::glBindBuffer
            
                typedef void ( ::osg::Drawable::Extensions::*glBindBuffer_function_type)( ::GLenum,::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glBindBuffer"
                    , glBindBuffer_function_type( &::osg::Drawable::Extensions::glBindBuffer )
                    , ( bp::arg("target"), bp::arg("buffer") ) );
            
            }
            { //::osg::Drawable::Extensions::glBufferData
            
                typedef void ( ::osg::Drawable::Extensions::*glBufferData_function_type)( ::GLenum,::GLsizeiptrARB,::GLvoid const *,::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glBufferData"
                    , glBufferData_function_type( &::osg::Drawable::Extensions::glBufferData )
                    , ( bp::arg("target"), bp::arg("size"), bp::arg("data"), bp::arg("usage") ) );
            
            }
            { //::osg::Drawable::Extensions::glBufferSubData
            
                typedef void ( ::osg::Drawable::Extensions::*glBufferSubData_function_type)( ::GLenum,::GLintptrARB,::GLsizeiptrARB,::GLvoid const * ) const;
                
                Extensions_exposer.def( 
                    "glBufferSubData"
                    , glBufferSubData_function_type( &::osg::Drawable::Extensions::glBufferSubData )
                    , ( bp::arg("target"), bp::arg("offset"), bp::arg("size"), bp::arg("data") ) );
            
            }
            { //::osg::Drawable::Extensions::glDeleteBuffers
            
                typedef void ( ::osg::Drawable::Extensions::*glDeleteBuffers_function_type)( ::GLsizei,::GLuint const * ) const;
                
                Extensions_exposer.def( 
                    "glDeleteBuffers"
                    , glDeleteBuffers_function_type( &::osg::Drawable::Extensions::glDeleteBuffers )
                    , ( bp::arg("n"), bp::arg("buffers") ) );
            
            }
            { //::osg::Drawable::Extensions::glDeleteOcclusionQueries
            
                typedef void ( ::osg::Drawable::Extensions::*glDeleteOcclusionQueries_function_type)( ::GLsizei,::GLuint const * ) const;
                
                Extensions_exposer.def( 
                    "glDeleteOcclusionQueries"
                    , glDeleteOcclusionQueries_function_type( &::osg::Drawable::Extensions::glDeleteOcclusionQueries )
                    , ( bp::arg("n"), bp::arg("ids") ) );
            
            }
            { //::osg::Drawable::Extensions::glDeleteQueries
            
                typedef void ( ::osg::Drawable::Extensions::*glDeleteQueries_function_type)( ::GLsizei,::GLuint const * ) const;
                
                Extensions_exposer.def( 
                    "glDeleteQueries"
                    , glDeleteQueries_function_type( &::osg::Drawable::Extensions::glDeleteQueries )
                    , ( bp::arg("n"), bp::arg("ids") ) );
            
            }
            { //::osg::Drawable::Extensions::glEndOcclusionQuery
            
                typedef void ( ::osg::Drawable::Extensions::*glEndOcclusionQuery_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "glEndOcclusionQuery"
                    , glEndOcclusionQuery_function_type( &::osg::Drawable::Extensions::glEndOcclusionQuery ) );
            
            }
            { //::osg::Drawable::Extensions::glEndQuery
            
                typedef void ( ::osg::Drawable::Extensions::*glEndQuery_function_type)( ::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glEndQuery"
                    , glEndQuery_function_type( &::osg::Drawable::Extensions::glEndQuery )
                    , ( bp::arg("target") ) );
            
            }
            { //::osg::Drawable::Extensions::glFogCoordfv
            
                typedef void ( ::osg::Drawable::Extensions::*glFogCoordfv_function_type)( ::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glFogCoordfv"
                    , glFogCoordfv_function_type( &::osg::Drawable::Extensions::glFogCoordfv )
                    , ( bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glGenBuffers
            
                typedef void ( ::osg::Drawable::Extensions::*glGenBuffers_function_type)( ::GLsizei,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glGenBuffers"
                    , glGenBuffers_function_type( &::osg::Drawable::Extensions::glGenBuffers )
                    , ( bp::arg("n"), bp::arg("buffers") ) );
            
            }
            { //::osg::Drawable::Extensions::glGenOcclusionQueries
            
                typedef void ( ::osg::Drawable::Extensions::*glGenOcclusionQueries_function_type)( ::GLsizei,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glGenOcclusionQueries"
                    , glGenOcclusionQueries_function_type( &::osg::Drawable::Extensions::glGenOcclusionQueries )
                    , ( bp::arg("n"), bp::arg("ids") ) );
            
            }
            { //::osg::Drawable::Extensions::glGenQueries
            
                typedef void ( ::osg::Drawable::Extensions::*glGenQueries_function_type)( ::GLsizei,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glGenQueries"
                    , glGenQueries_function_type( &::osg::Drawable::Extensions::glGenQueries )
                    , ( bp::arg("n"), bp::arg("ids") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetBufferParameteriv
            
                typedef void ( ::osg::Drawable::Extensions::*glGetBufferParameteriv_function_type)( ::GLenum,::GLenum,::GLint * ) const;
                
                Extensions_exposer.def( 
                    "glGetBufferParameteriv"
                    , glGetBufferParameteriv_function_type( &::osg::Drawable::Extensions::glGetBufferParameteriv )
                    , ( bp::arg("target"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetBufferPointerv
            
                typedef void ( ::osg::Drawable::Extensions::*glGetBufferPointerv_function_type)( ::GLenum,::GLenum,::GLvoid * * ) const;
                
                Extensions_exposer.def( 
                    "glGetBufferPointerv"
                    , glGetBufferPointerv_function_type( &::osg::Drawable::Extensions::glGetBufferPointerv )
                    , ( bp::arg("target"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetBufferSubData
            
                typedef void ( ::osg::Drawable::Extensions::*glGetBufferSubData_function_type)( ::GLenum,::GLintptrARB,::GLsizeiptrARB,::GLvoid * ) const;
                
                Extensions_exposer.def( 
                    "glGetBufferSubData"
                    , glGetBufferSubData_function_type( &::osg::Drawable::Extensions::glGetBufferSubData )
                    , ( bp::arg("target"), bp::arg("offset"), bp::arg("size"), bp::arg("data") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetInteger64v
            
                typedef void ( ::osg::Drawable::Extensions::*glGetInteger64v_function_type)( ::GLenum,::GLint64EXT * ) const;
                
                Extensions_exposer.def( 
                    "glGetInteger64v"
                    , glGetInteger64v_function_type( &::osg::Drawable::Extensions::glGetInteger64v )
                    , ( bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetOcclusionQueryiv
            
                typedef void ( ::osg::Drawable::Extensions::*glGetOcclusionQueryiv_function_type)( ::GLuint,::GLenum,::GLint * ) const;
                
                Extensions_exposer.def( 
                    "glGetOcclusionQueryiv"
                    , glGetOcclusionQueryiv_function_type( &::osg::Drawable::Extensions::glGetOcclusionQueryiv )
                    , ( bp::arg("id"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetOcclusionQueryuiv
            
                typedef void ( ::osg::Drawable::Extensions::*glGetOcclusionQueryuiv_function_type)( ::GLuint,::GLenum,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glGetOcclusionQueryuiv"
                    , glGetOcclusionQueryuiv_function_type( &::osg::Drawable::Extensions::glGetOcclusionQueryuiv )
                    , ( bp::arg("id"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetQueryObjectiv
            
                typedef void ( ::osg::Drawable::Extensions::*glGetQueryObjectiv_function_type)( ::GLuint,::GLenum,::GLint * ) const;
                
                Extensions_exposer.def( 
                    "glGetQueryObjectiv"
                    , glGetQueryObjectiv_function_type( &::osg::Drawable::Extensions::glGetQueryObjectiv )
                    , ( bp::arg("id"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetQueryObjectui64v
            
                typedef void ( ::osg::Drawable::Extensions::*glGetQueryObjectui64v_function_type)( ::GLuint,::GLenum,::GLuint64EXT * ) const;
                
                Extensions_exposer.def( 
                    "glGetQueryObjectui64v"
                    , glGetQueryObjectui64v_function_type( &::osg::Drawable::Extensions::glGetQueryObjectui64v )
                    , ( bp::arg("id"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetQueryObjectuiv
            
                typedef void ( ::osg::Drawable::Extensions::*glGetQueryObjectuiv_function_type)( ::GLuint,::GLenum,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glGetQueryObjectuiv"
                    , glGetQueryObjectuiv_function_type( &::osg::Drawable::Extensions::glGetQueryObjectuiv )
                    , ( bp::arg("id"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glGetQueryiv
            
                typedef void ( ::osg::Drawable::Extensions::*glGetQueryiv_function_type)( ::GLenum,::GLenum,::GLint * ) const;
                
                Extensions_exposer.def( 
                    "glGetQueryiv"
                    , glGetQueryiv_function_type( &::osg::Drawable::Extensions::glGetQueryiv )
                    , ( bp::arg("target"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::Drawable::Extensions::glIsBuffer
            
                typedef ::GLboolean ( ::osg::Drawable::Extensions::*glIsBuffer_function_type)( ::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glIsBuffer"
                    , glIsBuffer_function_type( &::osg::Drawable::Extensions::glIsBuffer )
                    , ( bp::arg("buffer") ) );
            
            }
            { //::osg::Drawable::Extensions::glIsOcclusionQuery
            
                typedef ::GLboolean ( ::osg::Drawable::Extensions::*glIsOcclusionQuery_function_type)( ::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glIsOcclusionQuery"
                    , glIsOcclusionQuery_function_type( &::osg::Drawable::Extensions::glIsOcclusionQuery )
                    , ( bp::arg("id") ) );
            
            }
            { //::osg::Drawable::Extensions::glIsQuery
            
                typedef ::GLboolean ( ::osg::Drawable::Extensions::*glIsQuery_function_type)( ::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glIsQuery"
                    , glIsQuery_function_type( &::osg::Drawable::Extensions::glIsQuery )
                    , ( bp::arg("id") ) );
            
            }
            { //::osg::Drawable::Extensions::glMapBuffer
            
                typedef ::GLvoid * ( ::osg::Drawable::Extensions::*glMapBuffer_function_type)( ::GLenum,::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glMapBuffer"
                    , glMapBuffer_function_type( &::osg::Drawable::Extensions::glMapBuffer )
                    , ( bp::arg("target"), bp::arg("access") )
                    , bp::return_value_policy< bp::return_opaque_pointer >() );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord1d
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord1d_function_type)( ::GLenum,double ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord1d"
                    , glMultiTexCoord1d_function_type( &::osg::Drawable::Extensions::glMultiTexCoord1d )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord1f
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord1f_function_type)( ::GLenum,::GLfloat ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord1f"
                    , glMultiTexCoord1f_function_type( &::osg::Drawable::Extensions::glMultiTexCoord1f )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord2dv
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord2dv_function_type)( ::GLenum,double const * ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord2dv"
                    , glMultiTexCoord2dv_function_type( &::osg::Drawable::Extensions::glMultiTexCoord2dv )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord2fv
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord2fv_function_type)( ::GLenum,::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord2fv"
                    , glMultiTexCoord2fv_function_type( &::osg::Drawable::Extensions::glMultiTexCoord2fv )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord3dv
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord3dv_function_type)( ::GLenum,double const * ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord3dv"
                    , glMultiTexCoord3dv_function_type( &::osg::Drawable::Extensions::glMultiTexCoord3dv )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord3fv
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord3fv_function_type)( ::GLenum,::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord3fv"
                    , glMultiTexCoord3fv_function_type( &::osg::Drawable::Extensions::glMultiTexCoord3fv )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord4dv
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord4dv_function_type)( ::GLenum,double const * ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord4dv"
                    , glMultiTexCoord4dv_function_type( &::osg::Drawable::Extensions::glMultiTexCoord4dv )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glMultiTexCoord4fv
            
                typedef void ( ::osg::Drawable::Extensions::*glMultiTexCoord4fv_function_type)( ::GLenum,::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glMultiTexCoord4fv"
                    , glMultiTexCoord4fv_function_type( &::osg::Drawable::Extensions::glMultiTexCoord4fv )
                    , ( bp::arg("target"), bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glQueryCounter
            
                typedef void ( ::osg::Drawable::Extensions::*glQueryCounter_function_type)( ::GLuint,::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glQueryCounter"
                    , glQueryCounter_function_type( &::osg::Drawable::Extensions::glQueryCounter )
                    , ( bp::arg("id"), bp::arg("target") ) );
            
            }
            { //::osg::Drawable::Extensions::glSecondaryColor3fv
            
                typedef void ( ::osg::Drawable::Extensions::*glSecondaryColor3fv_function_type)( ::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glSecondaryColor3fv"
                    , glSecondaryColor3fv_function_type( &::osg::Drawable::Extensions::glSecondaryColor3fv )
                    , ( bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glSecondaryColor3ubv
            
                typedef void ( ::osg::Drawable::Extensions::*glSecondaryColor3ubv_function_type)( ::GLubyte const * ) const;
                
                Extensions_exposer.def( 
                    "glSecondaryColor3ubv"
                    , glSecondaryColor3ubv_function_type( &::osg::Drawable::Extensions::glSecondaryColor3ubv )
                    , ( bp::arg("coord") ) );
            
            }
            { //::osg::Drawable::Extensions::glUnmapBuffer
            
                typedef ::GLboolean ( ::osg::Drawable::Extensions::*glUnmapBuffer_function_type)( ::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glUnmapBuffer"
                    , glUnmapBuffer_function_type( &::osg::Drawable::Extensions::glUnmapBuffer )
                    , ( bp::arg("target") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib1d
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib1d_function_type)( unsigned int,double ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib1d"
                    , glVertexAttrib1d_function_type( &::osg::Drawable::Extensions::glVertexAttrib1d )
                    , ( bp::arg("index"), bp::arg("f") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib1f
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib1f_function_type)( unsigned int,::GLfloat ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib1f"
                    , glVertexAttrib1f_function_type( &::osg::Drawable::Extensions::glVertexAttrib1f )
                    , ( bp::arg("index"), bp::arg("f") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib1s
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib1s_function_type)( unsigned int,::GLshort ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib1s"
                    , glVertexAttrib1s_function_type( &::osg::Drawable::Extensions::glVertexAttrib1s )
                    , ( bp::arg("index"), bp::arg("s") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib2dv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib2dv_function_type)( unsigned int,double const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib2dv"
                    , glVertexAttrib2dv_function_type( &::osg::Drawable::Extensions::glVertexAttrib2dv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib2fv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib2fv_function_type)( unsigned int,::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib2fv"
                    , glVertexAttrib2fv_function_type( &::osg::Drawable::Extensions::glVertexAttrib2fv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib3dv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib3dv_function_type)( unsigned int,double const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib3dv"
                    , glVertexAttrib3dv_function_type( &::osg::Drawable::Extensions::glVertexAttrib3dv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib3fv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib3fv_function_type)( unsigned int,::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib3fv"
                    , glVertexAttrib3fv_function_type( &::osg::Drawable::Extensions::glVertexAttrib3fv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib4Nubv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib4Nubv_function_type)( unsigned int,::GLubyte const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib4Nubv"
                    , glVertexAttrib4Nubv_function_type( &::osg::Drawable::Extensions::glVertexAttrib4Nubv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib4dv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib4dv_function_type)( unsigned int,double const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib4dv"
                    , glVertexAttrib4dv_function_type( &::osg::Drawable::Extensions::glVertexAttrib4dv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib4fv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib4fv_function_type)( unsigned int,::GLfloat const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib4fv"
                    , glVertexAttrib4fv_function_type( &::osg::Drawable::Extensions::glVertexAttrib4fv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::glVertexAttrib4ubv
            
                typedef void ( ::osg::Drawable::Extensions::*glVertexAttrib4ubv_function_type)( unsigned int,::GLubyte const * ) const;
                
                Extensions_exposer.def( 
                    "glVertexAttrib4ubv"
                    , glVertexAttrib4ubv_function_type( &::osg::Drawable::Extensions::glVertexAttrib4ubv )
                    , ( bp::arg("index"), bp::arg("v") ) );
            
            }
            { //::osg::Drawable::Extensions::isARBOcclusionQuerySupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isARBOcclusionQuerySupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isARBOcclusionQuerySupported"
                    , isARBOcclusionQuerySupported_function_type( &::osg::Drawable::Extensions::isARBOcclusionQuerySupported ) );
            
            }
            { //::osg::Drawable::Extensions::isARBTimerQuerySupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isARBTimerQuerySupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isARBTimerQuerySupported"
                    , isARBTimerQuerySupported_function_type( &::osg::Drawable::Extensions::isARBTimerQuerySupported ) );
            
            }
            { //::osg::Drawable::Extensions::isFogCoordSupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isFogCoordSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isFogCoordSupported"
                    , isFogCoordSupported_function_type( &::osg::Drawable::Extensions::isFogCoordSupported ) );
            
            }
            { //::osg::Drawable::Extensions::isMultiTexSupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isMultiTexSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isMultiTexSupported"
                    , isMultiTexSupported_function_type( &::osg::Drawable::Extensions::isMultiTexSupported ) );
            
            }
            { //::osg::Drawable::Extensions::isOcclusionQuerySupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isOcclusionQuerySupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isOcclusionQuerySupported"
                    , isOcclusionQuerySupported_function_type( &::osg::Drawable::Extensions::isOcclusionQuerySupported ) );
            
            }
            { //::osg::Drawable::Extensions::isSecondaryColorSupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isSecondaryColorSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isSecondaryColorSupported"
                    , isSecondaryColorSupported_function_type( &::osg::Drawable::Extensions::isSecondaryColorSupported ) );
            
            }
            { //::osg::Drawable::Extensions::isTimerQuerySupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isTimerQuerySupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTimerQuerySupported"
                    , isTimerQuerySupported_function_type( &::osg::Drawable::Extensions::isTimerQuerySupported ) );
            
            }
            { //::osg::Drawable::Extensions::isVertexProgramSupported
            
                typedef bool ( ::osg::Drawable::Extensions::*isVertexProgramSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isVertexProgramSupported"
                    , isVertexProgramSupported_function_type( &::osg::Drawable::Extensions::isVertexProgramSupported ) );
            
            }
            { //::osg::Drawable::Extensions::lowestCommonDenominator
            
                typedef void ( ::osg::Drawable::Extensions::*lowestCommonDenominator_function_type)( ::osg::Drawable::Extensions const & ) ;
                
                Extensions_exposer.def( 
                    "lowestCommonDenominator"
                    , lowestCommonDenominator_function_type( &::osg::Drawable::Extensions::lowestCommonDenominator )
                    , ( bp::arg("rhs") ) );
            
            }
            { //::osg::Drawable::Extensions::setARBOcclusionQuerySupported
            
                typedef void ( ::osg::Drawable::Extensions::*setARBOcclusionQuerySupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setARBOcclusionQuerySupported"
                    , setARBOcclusionQuerySupported_function_type( &::osg::Drawable::Extensions::setARBOcclusionQuerySupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setARBTimerQuerySupported
            
                typedef void ( ::osg::Drawable::Extensions::*setARBTimerQuerySupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setARBTimerQuerySupported"
                    , setARBTimerQuerySupported_function_type( &::osg::Drawable::Extensions::setARBTimerQuerySupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setFogCoordSupported
            
                typedef void ( ::osg::Drawable::Extensions::*setFogCoordSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setFogCoordSupported"
                    , setFogCoordSupported_function_type( &::osg::Drawable::Extensions::setFogCoordSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setMultiTexSupported
            
                typedef void ( ::osg::Drawable::Extensions::*setMultiTexSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setMultiTexSupported"
                    , setMultiTexSupported_function_type( &::osg::Drawable::Extensions::setMultiTexSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setOcclusionQuerySupported
            
                typedef void ( ::osg::Drawable::Extensions::*setOcclusionQuerySupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setOcclusionQuerySupported"
                    , setOcclusionQuerySupported_function_type( &::osg::Drawable::Extensions::setOcclusionQuerySupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setSecondaryColorSupported
            
                typedef void ( ::osg::Drawable::Extensions::*setSecondaryColorSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setSecondaryColorSupported"
                    , setSecondaryColorSupported_function_type( &::osg::Drawable::Extensions::setSecondaryColorSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setTimerQuerySupported
            
                typedef void ( ::osg::Drawable::Extensions::*setTimerQuerySupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setTimerQuerySupported"
                    , setTimerQuerySupported_function_type( &::osg::Drawable::Extensions::setTimerQuerySupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setVertexProgramSupported
            
                typedef void ( ::osg::Drawable::Extensions::*setVertexProgramSupported_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setVertexProgramSupported"
                    , setVertexProgramSupported_function_type( &::osg::Drawable::Extensions::setVertexProgramSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::Drawable::Extensions::setupGLExtensions
            
                typedef void ( ::osg::Drawable::Extensions::*setupGLExtensions_function_type)( unsigned int ) ;
                
                Extensions_exposer.def( 
                    "setupGLExtensions"
                    , setupGLExtensions_function_type( &::osg::Drawable::Extensions::setupGLExtensions )
                    , ( bp::arg("contextID") ) );
            
            }
            { //::osg::Referenced::setThreadSafeRefUnref
            
                typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
                typedef void ( Drawable_wrapper::Extensions_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setThreadSafeRefUnref"
                    , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                    , default_setThreadSafeRefUnref_function_type(&Drawable_wrapper::Extensions_wrapper::default_setThreadSafeRefUnref)
                    , ( bp::arg("threadSafe") ) );
            
            }
        }
        bp::class_< Drawable_wrapper::UpdateCallback_wrapper, bp::bases< osg::Object >, boost::noncopyable >( "UpdateCallback", bp::init< >() )    
            .def( bp::init< osg::Drawable::UpdateCallback const &, osg::CopyOp const & >(( bp::arg("arg0"), bp::arg("arg1") )) )    
            .def( 
                "className"
                , (char const * ( ::osg::Drawable::UpdateCallback::* )(  )const)(&::osg::Drawable::UpdateCallback::className)
                , (char const * ( Drawable_wrapper::UpdateCallback_wrapper::* )(  )const)(&Drawable_wrapper::UpdateCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::Drawable::UpdateCallback::* )( ::osg::CopyOp const & )const)(&::osg::Drawable::UpdateCallback::clone)
                , (::osg::Object * ( Drawable_wrapper::UpdateCallback_wrapper::* )( ::osg::CopyOp const & )const)(&Drawable_wrapper::UpdateCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::Drawable::UpdateCallback::* )(  )const)(&::osg::Drawable::UpdateCallback::cloneType)
                , (::osg::Object * ( Drawable_wrapper::UpdateCallback_wrapper::* )(  )const)(&Drawable_wrapper::UpdateCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::Drawable::UpdateCallback::* )( ::osg::Object const * )const)(&::osg::Drawable::UpdateCallback::isSameKindAs)
                , (bool ( Drawable_wrapper::UpdateCallback_wrapper::* )( ::osg::Object const * )const)(&Drawable_wrapper::UpdateCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::Drawable::UpdateCallback::* )(  )const)(&::osg::Drawable::UpdateCallback::libraryName)
                , (char const * ( Drawable_wrapper::UpdateCallback_wrapper::* )(  )const)(&Drawable_wrapper::UpdateCallback_wrapper::default_libraryName) )    
            .def( 
                "update"
                , (void ( ::osg::Drawable::UpdateCallback::* )( ::osg::NodeVisitor *,::osg::Drawable * ))(&::osg::Drawable::UpdateCallback::update)
                , (void ( Drawable_wrapper::UpdateCallback_wrapper::* )( ::osg::NodeVisitor *,::osg::Drawable * ))(&Drawable_wrapper::UpdateCallback_wrapper::default_update)
                , ( bp::arg("arg0"), bp::arg("arg1") ) )    
            .def( 
                "computeDataVariance"
                , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
                , (void ( Drawable_wrapper::UpdateCallback_wrapper::* )(  ))(&Drawable_wrapper::UpdateCallback_wrapper::default_computeDataVariance) )    
            .def( 
                "getUserData"
                , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
                , (::osg::Referenced * ( Drawable_wrapper::UpdateCallback_wrapper::* )(  ))(&Drawable_wrapper::UpdateCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "getUserData"
                , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
                , (::osg::Referenced const * ( Drawable_wrapper::UpdateCallback_wrapper::* )(  )const)(&Drawable_wrapper::UpdateCallback_wrapper::default_getUserData)
                , bp::return_internal_reference< >() )    
            .def( 
                "resizeGLObjectBuffers"
                , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
                , (void ( Drawable_wrapper::UpdateCallback_wrapper::* )( unsigned int ))(&Drawable_wrapper::UpdateCallback_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
                , (void ( Drawable_wrapper::UpdateCallback_wrapper::* )( ::std::string const & ))(&Drawable_wrapper::UpdateCallback_wrapper::default_setName)
                , ( bp::arg("name") ) )    
            .def( 
                "setName"
                , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
                , ( bp::arg("name") ) )    
            .def( 
                "setThreadSafeRefUnref"
                , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
                , (void ( Drawable_wrapper::UpdateCallback_wrapper::* )( bool ))(&Drawable_wrapper::UpdateCallback_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) )    
            .def( 
                "setUserData"
                , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
                , (void ( Drawable_wrapper::UpdateCallback_wrapper::* )( ::osg::Referenced * ))(&Drawable_wrapper::UpdateCallback_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        Drawable_exposer.def( bp::init< >() );
        Drawable_exposer.def( bp::init< osg::Drawable const &, bp::optional< osg::CopyOp const & > >(( bp::arg("drawable"), bp::arg("copyop")=SHALLOW_COPY )) );
        { //::osg::Drawable::accept
        
            typedef void ( ::osg::Drawable::*accept_function_type)( ::osg::Drawable::AttributeFunctor & ) ;
            typedef void ( Drawable_wrapper::*default_accept_function_type)( ::osg::Drawable::AttributeFunctor & ) ;
            
            Drawable_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Drawable::accept)
                , default_accept_function_type(&Drawable_wrapper::default_accept)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::accept
        
            typedef void ( ::osg::Drawable::*accept_function_type)( ::osg::Drawable::ConstAttributeFunctor & ) const;
            typedef void ( Drawable_wrapper::*default_accept_function_type)( ::osg::Drawable::ConstAttributeFunctor & ) const;
            
            Drawable_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Drawable::accept)
                , default_accept_function_type(&Drawable_wrapper::default_accept)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::accept
        
            typedef void ( ::osg::Drawable::*accept_function_type)( ::osg::PrimitiveFunctor & ) const;
            typedef void ( Drawable_wrapper::*default_accept_function_type)( ::osg::PrimitiveFunctor & ) const;
            
            Drawable_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Drawable::accept)
                , default_accept_function_type(&Drawable_wrapper::default_accept)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::accept
        
            typedef void ( ::osg::Drawable::*accept_function_type)( ::osg::PrimitiveIndexFunctor & ) const;
            typedef void ( Drawable_wrapper::*default_accept_function_type)( ::osg::PrimitiveIndexFunctor & ) const;
            
            Drawable_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Drawable::accept)
                , default_accept_function_type(&Drawable_wrapper::default_accept)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::asGeometry
        
            typedef ::osg::Geometry * ( ::osg::Drawable::*asGeometry_function_type)(  ) ;
            typedef ::osg::Geometry * ( Drawable_wrapper::*default_asGeometry_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "asGeometry"
                , asGeometry_function_type(&::osg::Drawable::asGeometry)
                , default_asGeometry_function_type(&Drawable_wrapper::default_asGeometry)
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::asGeometry
        
            typedef ::osg::Geometry const * ( ::osg::Drawable::*asGeometry_function_type)(  ) const;
            typedef ::osg::Geometry const * ( Drawable_wrapper::*default_asGeometry_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "asGeometry"
                , asGeometry_function_type(&::osg::Drawable::asGeometry)
                , default_asGeometry_function_type(&Drawable_wrapper::default_asGeometry)
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::className
        
            typedef char const * ( ::osg::Drawable::*className_function_type)(  ) const;
            typedef char const * ( Drawable_wrapper::*default_className_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "className"
                , className_function_type(&::osg::Drawable::className)
                , default_className_function_type(&Drawable_wrapper::default_className) );
        
        }
        { //::osg::Drawable::compileGLObjects
        
            typedef void ( ::osg::Drawable::*compileGLObjects_function_type)( ::osg::RenderInfo & ) const;
            typedef void ( Drawable_wrapper::*default_compileGLObjects_function_type)( ::osg::RenderInfo & ) const;
            
            Drawable_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::Drawable::compileGLObjects)
                , default_compileGLObjects_function_type(&Drawable_wrapper::default_compileGLObjects)
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osg::Drawable::computeBound
        
            typedef ::osg::BoundingBox ( ::osg::Drawable::*computeBound_function_type)(  ) const;
            typedef ::osg::BoundingBox ( Drawable_wrapper::*default_computeBound_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::Drawable::computeBound)
                , default_computeBound_function_type(&Drawable_wrapper::default_computeBound) );
        
        }
        { //::osg::Drawable::computeDataVariance
        
            typedef void ( ::osg::Drawable::*computeDataVariance_function_type)(  ) ;
            typedef void ( Drawable_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Drawable::computeDataVariance)
                , default_computeDataVariance_function_type(&Drawable_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Drawable::deleteDisplayList
        
            typedef void ( *deleteDisplayList_function_type )( unsigned int,::GLuint,unsigned int );
            
            Drawable_exposer.def( 
                "deleteDisplayList"
                , deleteDisplayList_function_type( &::osg::Drawable::deleteDisplayList )
                , ( bp::arg("contextID"), bp::arg("globj"), bp::arg("sizeHint")=(unsigned int)(0) ) );
        
        }
        { //::osg::Drawable::dirtyBound
        
            typedef void ( ::osg::Drawable::*dirtyBound_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "dirtyBound"
                , dirtyBound_function_type( &::osg::Drawable::dirtyBound ) );
        
        }
        { //::osg::Drawable::dirtyDisplayList
        
            typedef void ( ::osg::Drawable::*dirtyDisplayList_function_type)(  ) ;
            typedef void ( Drawable_wrapper::*default_dirtyDisplayList_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "dirtyDisplayList"
                , dirtyDisplayList_function_type(&::osg::Drawable::dirtyDisplayList)
                , default_dirtyDisplayList_function_type(&Drawable_wrapper::default_dirtyDisplayList) );
        
        }
        { //::osg::Drawable::discardAllDeletedDisplayLists
        
            typedef void ( *discardAllDeletedDisplayLists_function_type )( unsigned int );
            
            Drawable_exposer.def( 
                "discardAllDeletedDisplayLists"
                , discardAllDeletedDisplayLists_function_type( &::osg::Drawable::discardAllDeletedDisplayLists )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::Drawable::draw
        
            typedef void ( ::osg::Drawable::*draw_function_type)( ::osg::RenderInfo & ) const;
            
            Drawable_exposer.def( 
                "draw"
                , draw_function_type( &::osg::Drawable::draw )
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osg::Drawable::drawImplementation
        
            typedef void ( ::osg::Drawable::*drawImplementation_function_type)( ::osg::RenderInfo & ) const;
            
            Drawable_exposer.def( 
                "drawImplementation"
                , bp::pure_virtual( drawImplementation_function_type(&::osg::Drawable::drawImplementation) )
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osg::Drawable::flushAllDeletedDisplayLists
        
            typedef void ( *flushAllDeletedDisplayLists_function_type )( unsigned int );
            
            Drawable_exposer.def( 
                "flushAllDeletedDisplayLists"
                , flushAllDeletedDisplayLists_function_type( &::osg::Drawable::flushAllDeletedDisplayLists )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::Drawable::flushDeletedDisplayLists
        
            typedef void ( *flushDeletedDisplayLists_function_type )( unsigned int,double & );
            
            Drawable_exposer.def( 
                "flushDeletedDisplayLists"
                , flushDeletedDisplayLists_function_type( &::osg::Drawable::flushDeletedDisplayLists )
                , ( bp::arg("contextID"), bp::arg("availableTime") ) );
        
        }
        { //::osg::Drawable::generateDisplayList
        
            typedef ::GLuint ( *generateDisplayList_function_type )( unsigned int,unsigned int );
            
            Drawable_exposer.def( 
                "generateDisplayList"
                , generateDisplayList_function_type( &::osg::Drawable::generateDisplayList )
                , ( bp::arg("contextID"), bp::arg("sizeHint")=(unsigned int)(0) ) );
        
        }
        { //::osg::Drawable::getBound
        
            typedef ::osg::BoundingBox const & ( ::osg::Drawable::*getBound_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getBound"
                , getBound_function_type( &::osg::Drawable::getBound )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Drawable::getComputeBoundingBoxCallback
        
            typedef ::osg::Drawable::ComputeBoundingBoxCallback * ( ::osg::Drawable::*getComputeBoundingBoxCallback_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getComputeBoundingBoxCallback"
                , getComputeBoundingBoxCallback_function_type( &::osg::Drawable::getComputeBoundingBoxCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getComputeBoundingBoxCallback
        
            typedef ::osg::Drawable::ComputeBoundingBoxCallback const * ( ::osg::Drawable::*getComputeBoundingBoxCallback_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getComputeBoundingBoxCallback"
                , getComputeBoundingBoxCallback_function_type( &::osg::Drawable::getComputeBoundingBoxCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getCullCallback
        
            typedef ::osg::Drawable::CullCallback * ( ::osg::Drawable::*getCullCallback_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getCullCallback"
                , getCullCallback_function_type( &::osg::Drawable::getCullCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getCullCallback
        
            typedef ::osg::Drawable::CullCallback const * ( ::osg::Drawable::*getCullCallback_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getCullCallback"
                , getCullCallback_function_type( &::osg::Drawable::getCullCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getDisplayList
        
            typedef ::GLuint & ( ::osg::Drawable::*getDisplayList_function_type)( unsigned int ) const;
            
            Drawable_exposer.def( 
                "getDisplayList"
                , getDisplayList_function_type( &::osg::Drawable::getDisplayList )
                , ( bp::arg("contextID") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Drawable::getDrawCallback
        
            typedef ::osg::Drawable::DrawCallback * ( ::osg::Drawable::*getDrawCallback_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getDrawCallback"
                , getDrawCallback_function_type( &::osg::Drawable::getDrawCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getDrawCallback
        
            typedef ::osg::Drawable::DrawCallback const * ( ::osg::Drawable::*getDrawCallback_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getDrawCallback"
                , getDrawCallback_function_type( &::osg::Drawable::getDrawCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getEventCallback
        
            typedef ::osg::Drawable::EventCallback * ( ::osg::Drawable::*getEventCallback_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::Drawable::getEventCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getEventCallback
        
            typedef ::osg::Drawable::EventCallback const * ( ::osg::Drawable::*getEventCallback_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::Drawable::getEventCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getExtensions
        
            typedef ::osg::Drawable::Extensions * ( *getExtensions_function_type )( unsigned int,bool );
            
            Drawable_exposer.def( 
                "getExtensions"
                , getExtensions_function_type( &::osg::Drawable::getExtensions )
                , ( bp::arg("contextID"), bp::arg("createIfNotInitalized") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getGLObjectSizeHint
        
            typedef unsigned int ( ::osg::Drawable::*getGLObjectSizeHint_function_type)(  ) const;
            typedef unsigned int ( Drawable_wrapper::*default_getGLObjectSizeHint_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getGLObjectSizeHint"
                , getGLObjectSizeHint_function_type(&::osg::Drawable::getGLObjectSizeHint)
                , default_getGLObjectSizeHint_function_type(&Drawable_wrapper::default_getGLObjectSizeHint) );
        
        }
        { //::osg::Drawable::getInitialBound
        
            typedef ::osg::BoundingBox const & ( ::osg::Drawable::*getInitialBound_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getInitialBound"
                , getInitialBound_function_type( &::osg::Drawable::getInitialBound )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Drawable::getMinimumNumberOfDisplayListsToRetainInCache
        
            typedef unsigned int ( *getMinimumNumberOfDisplayListsToRetainInCache_function_type )(  );
            
            Drawable_exposer.def( 
                "getMinimumNumberOfDisplayListsToRetainInCache"
                , getMinimumNumberOfDisplayListsToRetainInCache_function_type( &::osg::Drawable::getMinimumNumberOfDisplayListsToRetainInCache ) );
        
        }
        { //::osg::Drawable::getNumParents
        
            typedef unsigned int ( ::osg::Drawable::*getNumParents_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getNumParents"
                , getNumParents_function_type( &::osg::Drawable::getNumParents ) );
        
        }
        { //::osg::Drawable::getOrCreateStateSet
        
            typedef ::osg::StateSet * ( ::osg::Drawable::*getOrCreateStateSet_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getOrCreateStateSet"
                , getOrCreateStateSet_function_type( &::osg::Drawable::getOrCreateStateSet )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getParent
        
            typedef ::osg::Node * ( ::osg::Drawable::*getParent_function_type)( unsigned int ) ;
            
            Drawable_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::Drawable::getParent )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getParent
        
            typedef ::osg::Node const * ( ::osg::Drawable::*getParent_function_type)( unsigned int ) const;
            
            Drawable_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::Drawable::getParent )
                , ( bp::arg("i") )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getParents
        
            typedef ::std::vector< osg::Node* > const & ( ::osg::Drawable::*getParents_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::Drawable::getParents )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Drawable::getParents
        
            typedef ::std::vector< osg::Node* > ( ::osg::Drawable::*getParents_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::Drawable::getParents ) );
        
        }
        { //::osg::Drawable::getShape
        
            typedef ::osg::Shape * ( ::osg::Drawable::*getShape_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getShape"
                , getShape_function_type( &::osg::Drawable::getShape )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getShape
        
            typedef ::osg::Shape const * ( ::osg::Drawable::*getShape_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getShape"
                , getShape_function_type( &::osg::Drawable::getShape )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getStateSet
        
            typedef ::osg::StateSet * ( ::osg::Drawable::*getStateSet_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getStateSet"
                , getStateSet_function_type( &::osg::Drawable::getStateSet )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getStateSet
        
            typedef ::osg::StateSet const * ( ::osg::Drawable::*getStateSet_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getStateSet"
                , getStateSet_function_type( &::osg::Drawable::getStateSet )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getSupportsDisplayList
        
            typedef bool ( ::osg::Drawable::*getSupportsDisplayList_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getSupportsDisplayList"
                , getSupportsDisplayList_function_type( &::osg::Drawable::getSupportsDisplayList ) );
        
        }
        { //::osg::Drawable::getUpdateCallback
        
            typedef ::osg::Drawable::UpdateCallback * ( ::osg::Drawable::*getUpdateCallback_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::Drawable::getUpdateCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getUpdateCallback
        
            typedef ::osg::Drawable::UpdateCallback const * ( ::osg::Drawable::*getUpdateCallback_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::Drawable::getUpdateCallback )
                    /* undefined call policies */ );
        
        }
        { //::osg::Drawable::getUseDisplayList
        
            typedef bool ( ::osg::Drawable::*getUseDisplayList_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getUseDisplayList"
                , getUseDisplayList_function_type( &::osg::Drawable::getUseDisplayList ) );
        
        }
        { //::osg::Drawable::getUseVertexBufferObjects
        
            typedef bool ( ::osg::Drawable::*getUseVertexBufferObjects_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getUseVertexBufferObjects"
                , getUseVertexBufferObjects_function_type( &::osg::Drawable::getUseVertexBufferObjects ) );
        
        }
        { //::osg::Drawable::getWorldMatrices
        
            typedef ::osg::MatrixList ( ::osg::Drawable::*getWorldMatrices_function_type)( ::osg::Node const * ) const;
            
            Drawable_exposer.def( 
                "getWorldMatrices"
                , getWorldMatrices_function_type( &::osg::Drawable::getWorldMatrices )
                , ( bp::arg("haltTraversalAtNode")=bp::object() ) );
        
        }
        { //::osg::Drawable::isSameKindAs
        
            typedef bool ( ::osg::Drawable::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( Drawable_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            Drawable_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Drawable::isSameKindAs)
                , default_isSameKindAs_function_type(&Drawable_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Drawable::libraryName
        
            typedef char const * ( ::osg::Drawable::*libraryName_function_type)(  ) const;
            typedef char const * ( Drawable_wrapper::*default_libraryName_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Drawable::libraryName)
                , default_libraryName_function_type(&Drawable_wrapper::default_libraryName) );
        
        }
        { //::osg::Drawable::releaseGLObjects
        
            typedef void ( ::osg::Drawable::*releaseGLObjects_function_type)( ::osg::State * ) const;
            typedef void ( Drawable_wrapper::*default_releaseGLObjects_function_type)( ::osg::State * ) const;
            
            Drawable_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osg::Drawable::releaseGLObjects)
                , default_releaseGLObjects_function_type(&Drawable_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osg::Drawable::requiresEventTraversal
        
            typedef bool ( ::osg::Drawable::*requiresEventTraversal_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "requiresEventTraversal"
                , requiresEventTraversal_function_type( &::osg::Drawable::requiresEventTraversal ) );
        
        }
        { //::osg::Drawable::requiresUpdateTraversal
        
            typedef bool ( ::osg::Drawable::*requiresUpdateTraversal_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "requiresUpdateTraversal"
                , requiresUpdateTraversal_function_type( &::osg::Drawable::requiresUpdateTraversal ) );
        
        }
        { //::osg::Drawable::resizeGLObjectBuffers
        
            typedef void ( ::osg::Drawable::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( Drawable_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            Drawable_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Drawable::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Drawable_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Drawable::setComputeBoundingBoxCallback
        
            typedef void ( ::osg::Drawable::*setComputeBoundingBoxCallback_function_type)( ::osg::Drawable::ComputeBoundingBoxCallback * ) ;
            
            Drawable_exposer.def( 
                "setComputeBoundingBoxCallback"
                , setComputeBoundingBoxCallback_function_type( &::osg::Drawable::setComputeBoundingBoxCallback )
                , ( bp::arg("callback") ) );
        
        }
        { //::osg::Drawable::setCullCallback
        
            typedef void ( ::osg::Drawable::*setCullCallback_function_type)( ::osg::Drawable::CullCallback * ) ;
            typedef void ( Drawable_wrapper::*default_setCullCallback_function_type)( ::osg::Drawable::CullCallback * ) ;
            
            Drawable_exposer.def( 
                "setCullCallback"
                , setCullCallback_function_type(&::osg::Drawable::setCullCallback)
                , default_setCullCallback_function_type(&Drawable_wrapper::default_setCullCallback)
                , ( bp::arg("cc") ) );
        
        }
        { //::osg::Drawable::setDrawCallback
        
            typedef void ( ::osg::Drawable::*setDrawCallback_function_type)( ::osg::Drawable::DrawCallback * ) ;
            typedef void ( Drawable_wrapper::*default_setDrawCallback_function_type)( ::osg::Drawable::DrawCallback * ) ;
            
            Drawable_exposer.def( 
                "setDrawCallback"
                , setDrawCallback_function_type(&::osg::Drawable::setDrawCallback)
                , default_setDrawCallback_function_type(&Drawable_wrapper::default_setDrawCallback)
                , ( bp::arg("dc") ) );
        
        }
        { //::osg::Drawable::setEventCallback
        
            typedef void ( ::osg::Drawable::*setEventCallback_function_type)( ::osg::Drawable::EventCallback * ) ;
            typedef void ( Drawable_wrapper::*default_setEventCallback_function_type)( ::osg::Drawable::EventCallback * ) ;
            
            Drawable_exposer.def( 
                "setEventCallback"
                , setEventCallback_function_type(&::osg::Drawable::setEventCallback)
                , default_setEventCallback_function_type(&Drawable_wrapper::default_setEventCallback)
                , ( bp::arg("ac") ) );
        
        }
        { //::osg::Drawable::setExtensions
        
            typedef void ( *setExtensions_function_type )( unsigned int,::osg::Drawable::Extensions * );
            
            Drawable_exposer.def( 
                "setExtensions"
                , setExtensions_function_type( &::osg::Drawable::setExtensions )
                , ( bp::arg("contextID"), bp::arg("extensions") ) );
        
        }
        { //::osg::Drawable::setInitialBound
        
            typedef void ( ::osg::Drawable::*setInitialBound_function_type)( ::osg::BoundingBox const & ) ;
            
            Drawable_exposer.def( 
                "setInitialBound"
                , setInitialBound_function_type( &::osg::Drawable::setInitialBound )
                , ( bp::arg("bbox") ) );
        
        }
        { //::osg::Drawable::setMinimumNumberOfDisplayListsToRetainInCache
        
            typedef void ( *setMinimumNumberOfDisplayListsToRetainInCache_function_type )( unsigned int );
            
            Drawable_exposer.def( 
                "setMinimumNumberOfDisplayListsToRetainInCache"
                , setMinimumNumberOfDisplayListsToRetainInCache_function_type( &::osg::Drawable::setMinimumNumberOfDisplayListsToRetainInCache )
                , ( bp::arg("minimum") ) );
        
        }
        { //::osg::Drawable::setShape
        
            typedef void ( ::osg::Drawable::*setShape_function_type)( ::osg::Shape * ) ;
            
            Drawable_exposer.def( 
                "setShape"
                , setShape_function_type( &::osg::Drawable::setShape )
                , ( bp::arg("shape") ) );
        
        }
        { //::osg::Drawable::setStateSet
        
            typedef void ( ::osg::Drawable::*setStateSet_function_type)( ::osg::StateSet * ) ;
            
            Drawable_exposer.def( 
                "setStateSet"
                , setStateSet_function_type( &::osg::Drawable::setStateSet )
                , ( bp::arg("stateset") ) );
        
        }
        { //::osg::Drawable::setSupportsDisplayList
        
            typedef void ( ::osg::Drawable::*setSupportsDisplayList_function_type)( bool ) ;
            
            Drawable_exposer.def( 
                "setSupportsDisplayList"
                , setSupportsDisplayList_function_type( &::osg::Drawable::setSupportsDisplayList )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Drawable::setThreadSafeRefUnref
        
            typedef void ( ::osg::Drawable::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( Drawable_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            Drawable_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Drawable::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Drawable_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Drawable::setUpdateCallback
        
            typedef void ( ::osg::Drawable::*setUpdateCallback_function_type)( ::osg::Drawable::UpdateCallback * ) ;
            typedef void ( Drawable_wrapper::*default_setUpdateCallback_function_type)( ::osg::Drawable::UpdateCallback * ) ;
            
            Drawable_exposer.def( 
                "setUpdateCallback"
                , setUpdateCallback_function_type(&::osg::Drawable::setUpdateCallback)
                , default_setUpdateCallback_function_type(&Drawable_wrapper::default_setUpdateCallback)
                , ( bp::arg("ac") ) );
        
        }
        { //::osg::Drawable::setUseDisplayList
        
            typedef void ( ::osg::Drawable::*setUseDisplayList_function_type)( bool ) ;
            
            Drawable_exposer.def( 
                "setUseDisplayList"
                , setUseDisplayList_function_type( &::osg::Drawable::setUseDisplayList )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Drawable::setUseVertexBufferObjects
        
            typedef void ( ::osg::Drawable::*setUseVertexBufferObjects_function_type)( bool ) ;
            typedef void ( Drawable_wrapper::*default_setUseVertexBufferObjects_function_type)( bool ) ;
            
            Drawable_exposer.def( 
                "setUseVertexBufferObjects"
                , setUseVertexBufferObjects_function_type(&::osg::Drawable::setUseVertexBufferObjects)
                , default_setUseVertexBufferObjects_function_type(&Drawable_wrapper::default_setUseVertexBufferObjects)
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Drawable::supports
        
            typedef bool ( ::osg::Drawable::*supports_function_type)( ::osg::Drawable::AttributeFunctor const & ) const;
            typedef bool ( Drawable_wrapper::*default_supports_function_type)( ::osg::Drawable::AttributeFunctor const & ) const;
            
            Drawable_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Drawable::supports)
                , default_supports_function_type(&Drawable_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::supports
        
            typedef bool ( ::osg::Drawable::*supports_function_type)( ::osg::Drawable::ConstAttributeFunctor const & ) const;
            typedef bool ( Drawable_wrapper::*default_supports_function_type)( ::osg::Drawable::ConstAttributeFunctor const & ) const;
            
            Drawable_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Drawable::supports)
                , default_supports_function_type(&Drawable_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::supports
        
            typedef bool ( ::osg::Drawable::*supports_function_type)( ::osg::PrimitiveFunctor const & ) const;
            typedef bool ( Drawable_wrapper::*default_supports_function_type)( ::osg::PrimitiveFunctor const & ) const;
            
            Drawable_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Drawable::supports)
                , default_supports_function_type(&Drawable_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::supports
        
            typedef bool ( ::osg::Drawable::*supports_function_type)( ::osg::PrimitiveIndexFunctor const & ) const;
            typedef bool ( Drawable_wrapper::*default_supports_function_type)( ::osg::PrimitiveIndexFunctor const & ) const;
            
            Drawable_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Drawable::supports)
                , default_supports_function_type(&Drawable_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        Drawable_exposer.def_readwrite( "s_numberDeletedDrawablesInLastFrame", osg::Drawable::s_numberDeletedDrawablesInLastFrame );
        Drawable_exposer.def_readwrite( "s_numberDrawablesReusedLastInLastFrame", osg::Drawable::s_numberDrawablesReusedLastInLastFrame );
        Drawable_exposer.def_readwrite( "s_numberNewDrawablesInLastFrame", osg::Drawable::s_numberNewDrawablesInLastFrame );
        { //::osg::Object::clone
        
            typedef ::osg::Object * ( ::osg::Object::*clone_function_type)( ::osg::CopyOp const & ) const;
            
            Drawable_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::osg::Object::clone) )
                , ( bp::arg("arg0") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Object::cloneType
        
            typedef ::osg::Object * ( ::osg::Object::*cloneType_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "cloneType"
                , bp::pure_virtual( cloneType_function_type(&::osg::Object::cloneType) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( Drawable_wrapper::*default_getUserData_function_type)(  ) ;
            
            Drawable_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Drawable_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( Drawable_wrapper::*default_getUserData_function_type)(  ) const;
            
            Drawable_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&Drawable_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( Drawable_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            Drawable_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&Drawable_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            Drawable_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( Drawable_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            Drawable_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&Drawable_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
        Drawable_exposer.staticmethod( "deleteDisplayList" );
        Drawable_exposer.staticmethod( "discardAllDeletedDisplayLists" );
        Drawable_exposer.staticmethod( "flushAllDeletedDisplayLists" );
        Drawable_exposer.staticmethod( "flushDeletedDisplayLists" );
        Drawable_exposer.staticmethod( "generateDisplayList" );
        Drawable_exposer.staticmethod( "getExtensions" );
        Drawable_exposer.staticmethod( "getMinimumNumberOfDisplayListsToRetainInCache" );
        Drawable_exposer.staticmethod( "setExtensions" );
        Drawable_exposer.staticmethod( "setMinimumNumberOfDisplayListsToRetainInCache" );
    }

}
