// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "operationthread.pypp.hpp"

namespace bp = boost::python;

struct OperationThread_wrapper : osg::OperationThread, bp::wrapper< osg::OperationThread > {

    OperationThread_wrapper( )
    : osg::OperationThread( )
      , bp::wrapper< osg::OperationThread >(){
        // null constructor
    
    }

    virtual int cancel(  ) {
        if( bp::override func_cancel = this->get_override( "cancel" ) )
            return func_cancel(  );
        else{
            return this->osg::OperationThread::cancel(  );
        }
    }
    
    int default_cancel(  ) {
        return osg::OperationThread::cancel( );
    }

    virtual void run(  ) {
        if( bp::override func_run = this->get_override( "run" ) )
            func_run(  );
        else{
            this->osg::OperationThread::run(  );
        }
    }
    
    void default_run(  ) {
        osg::OperationThread::run( );
    }

    virtual void cancelCleanup(  ) {
        if( bp::override func_cancelCleanup = this->get_override( "cancelCleanup" ) )
            func_cancelCleanup(  );
        else{
            this->OpenThreads::Thread::cancelCleanup(  );
        }
    }
    
    void default_cancelCleanup(  ) {
        OpenThreads::Thread::cancelCleanup( );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_OperationThread_class(){

    bp::class_< OperationThread_wrapper, bp::bases< osg::Referenced, OpenThreads::Thread >, boost::noncopyable >( "OperationThread", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "add"
            , (void ( ::osg::OperationThread::* )( ::osg::Operation * ))( &::osg::OperationThread::add )
            , ( bp::arg("operation") ) )    
        .def( 
            "cancel"
            , (int ( ::osg::OperationThread::* )(  ))(&::osg::OperationThread::cancel)
            , (int ( OperationThread_wrapper::* )(  ))(&OperationThread_wrapper::default_cancel) )    
        .def( 
            "getCurrentOperation"
            , (::osg::ref_ptr< osg::Operation > ( ::osg::OperationThread::* )(  ))( &::osg::OperationThread::getCurrentOperation ) )    
        .def( 
            "getDone"
            , (bool ( ::osg::OperationThread::* )(  )const)( &::osg::OperationThread::getDone ) )    
        .def( 
            "getOperationQueue"
            , (::osg::OperationQueue * ( ::osg::OperationThread::* )(  ))( &::osg::OperationThread::getOperationQueue )
            , bp::return_internal_reference< >() )    
        .def( 
            "getOperationQueue"
            , (::osg::OperationQueue const * ( ::osg::OperationThread::* )(  )const)( &::osg::OperationThread::getOperationQueue )
            , bp::return_internal_reference< >() )    
        .def( 
            "getParent"
            , (::osg::Object * ( ::osg::OperationThread::* )(  ))( &::osg::OperationThread::getParent )
            , bp::return_internal_reference< >() )    
        .def( 
            "getParent"
            , (::osg::Object const * ( ::osg::OperationThread::* )(  )const)( &::osg::OperationThread::getParent )
            , bp::return_internal_reference< >() )    
        .def( 
            "remove"
            , (void ( ::osg::OperationThread::* )( ::osg::Operation * ))( &::osg::OperationThread::remove )
            , ( bp::arg("operation") ) )    
        .def( 
            "remove"
            , (void ( ::osg::OperationThread::* )( ::std::string const & ))( &::osg::OperationThread::remove )
            , ( bp::arg("name") ) )    
        .def( 
            "removeAllOperations"
            , (void ( ::osg::OperationThread::* )(  ))( &::osg::OperationThread::removeAllOperations ) )    
        .def( 
            "run"
            , (void ( ::osg::OperationThread::* )(  ))(&::osg::OperationThread::run)
            , (void ( OperationThread_wrapper::* )(  ))(&OperationThread_wrapper::default_run) )    
        .def( 
            "setDone"
            , (void ( ::osg::OperationThread::* )( bool ))( &::osg::OperationThread::setDone )
            , ( bp::arg("done") ) )    
        .def( 
            "setOperationQueue"
            , (void ( ::osg::OperationThread::* )( ::osg::OperationQueue * ))( &::osg::OperationThread::setOperationQueue )
            , ( bp::arg("opq") ) )    
        .def( 
            "setParent"
            , (void ( ::osg::OperationThread::* )( ::osg::Object * ))( &::osg::OperationThread::setParent )
            , ( bp::arg("parent") ) )    
        .def( 
            "cancelCleanup"
            , (void ( ::OpenThreads::Thread::* )(  ))(&::OpenThreads::Thread::cancelCleanup)
            , (void ( OperationThread_wrapper::* )(  ))(&OperationThread_wrapper::default_cancelCleanup) )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
            , (void ( OperationThread_wrapper::* )( bool ))(&OperationThread_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) );

}
