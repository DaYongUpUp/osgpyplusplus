// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "light.pypp.hpp"

namespace bp = boost::python;

struct Light_wrapper : osg::Light, bp::wrapper< osg::Light > {

    Light_wrapper( )
    : osg::Light( )
      , bp::wrapper< osg::Light >(){
        // null constructor
    
    }

    Light_wrapper(unsigned int lightnum )
    : osg::Light( lightnum )
      , bp::wrapper< osg::Light >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::Light::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::Light::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Light::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Light::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Light::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Light::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Light::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Light::cloneType( );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::Light::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::Light::getMember( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(usage) );
        else{
            return this->osg::Light::getModeUsage( boost::ref(usage) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        return osg::Light::getModeUsage( boost::ref(usage) );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::Light::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::Light::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Light::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Light::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Light::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Light::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Light_class(){

    bp::class_< Light_wrapper, osg::ref_ptr< ::osg::Light >, boost::noncopyable >( "Light", bp::no_init )    
        .def( bp::init< >() )    
        .def( bp::init< unsigned int >(( bp::arg("lightnum") )) )    
        .def( 
            "apply"
            , (void ( ::osg::Light::* )( ::osg::State & )const)(&::osg::Light::apply)
            , (void ( Light_wrapper::* )( ::osg::State & )const)(&Light_wrapper::default_apply)
            , ( bp::arg("state") ) )    
        .def( 
            "captureLightState"
            , (void ( ::osg::Light::* )(  ))( &::osg::Light::captureLightState ) )    
        .def( 
            "className"
            , (char const * ( ::osg::Light::* )(  )const)(&::osg::Light::className)
            , (char const * ( Light_wrapper::* )(  )const)(&Light_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::Light::* )( ::osg::CopyOp const & )const)(&::osg::Light::clone)
            , (::osg::Object * ( Light_wrapper::* )( ::osg::CopyOp const & )const)(&Light_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::Light::* )(  )const)(&::osg::Light::cloneType)
            , (::osg::Object * ( Light_wrapper::* )(  )const)(&Light_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getAmbient"
            , (::osg::Vec4 const & ( ::osg::Light::* )(  )const)( &::osg::Light::getAmbient )
            , bp::return_internal_reference< >() )    
        .def( 
            "getConstantAttenuation"
            , (float ( ::osg::Light::* )(  )const)( &::osg::Light::getConstantAttenuation ) )    
        .def( 
            "getDiffuse"
            , (::osg::Vec4 const & ( ::osg::Light::* )(  )const)( &::osg::Light::getDiffuse )
            , bp::return_internal_reference< >() )    
        .def( 
            "getDirection"
            , (::osg::Vec3 const & ( ::osg::Light::* )(  )const)( &::osg::Light::getDirection )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLightNum"
            , (int ( ::osg::Light::* )(  )const)( &::osg::Light::getLightNum ) )    
        .def( 
            "getLinearAttenuation"
            , (float ( ::osg::Light::* )(  )const)( &::osg::Light::getLinearAttenuation ) )    
        .def( 
            "getMember"
            , (unsigned int ( ::osg::Light::* )(  )const)(&::osg::Light::getMember)
            , (unsigned int ( Light_wrapper::* )(  )const)(&Light_wrapper::default_getMember) )    
        .def( 
            "getModeUsage"
            , (bool ( ::osg::Light::* )( ::osg::StateAttribute::ModeUsage & )const)(&::osg::Light::getModeUsage)
            , (bool ( Light_wrapper::* )( ::osg::StateAttribute::ModeUsage & )const)(&Light_wrapper::default_getModeUsage)
            , ( bp::arg("usage") ) )    
        .def( 
            "getPosition"
            , (::osg::Vec4 const & ( ::osg::Light::* )(  )const)( &::osg::Light::getPosition )
            , bp::return_internal_reference< >() )    
        .def( 
            "getQuadraticAttenuation"
            , (float ( ::osg::Light::* )(  )const)( &::osg::Light::getQuadraticAttenuation ) )    
        .def( 
            "getSpecular"
            , (::osg::Vec4 const & ( ::osg::Light::* )(  )const)( &::osg::Light::getSpecular )
            , bp::return_internal_reference< >() )    
        .def( 
            "getSpotCutoff"
            , (float ( ::osg::Light::* )(  )const)( &::osg::Light::getSpotCutoff ) )    
        .def( 
            "getSpotExponent"
            , (float ( ::osg::Light::* )(  )const)( &::osg::Light::getSpotExponent ) )    
        .def( 
            "getType"
            , (::osg::StateAttribute::Type ( ::osg::Light::* )(  )const)(&::osg::Light::getType)
            , (::osg::StateAttribute::Type ( Light_wrapper::* )(  )const)(&Light_wrapper::default_getType) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::Light::* )( ::osg::Object const * )const)(&::osg::Light::isSameKindAs)
            , (bool ( Light_wrapper::* )( ::osg::Object const * )const)(&Light_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::Light::* )(  )const)(&::osg::Light::libraryName)
            , (char const * ( Light_wrapper::* )(  )const)(&Light_wrapper::default_libraryName) )    
        .def( 
            "setAmbient"
            , (void ( ::osg::Light::* )( ::osg::Vec4 const & ))( &::osg::Light::setAmbient )
            , ( bp::arg("ambient") ) )    
        .def( 
            "setConstantAttenuation"
            , (void ( ::osg::Light::* )( float ))( &::osg::Light::setConstantAttenuation )
            , ( bp::arg("constant_attenuation") ) )    
        .def( 
            "setDiffuse"
            , (void ( ::osg::Light::* )( ::osg::Vec4 const & ))( &::osg::Light::setDiffuse )
            , ( bp::arg("diffuse") ) )    
        .def( 
            "setDirection"
            , (void ( ::osg::Light::* )( ::osg::Vec3 const & ))( &::osg::Light::setDirection )
            , ( bp::arg("direction") ) )    
        .def( 
            "setLightNum"
            , (void ( ::osg::Light::* )( int ))( &::osg::Light::setLightNum )
            , ( bp::arg("num") ) )    
        .def( 
            "setLinearAttenuation"
            , (void ( ::osg::Light::* )( float ))( &::osg::Light::setLinearAttenuation )
            , ( bp::arg("linear_attenuation") ) )    
        .def( 
            "setPosition"
            , (void ( ::osg::Light::* )( ::osg::Vec4 const & ))( &::osg::Light::setPosition )
            , ( bp::arg("position") ) )    
        .def( 
            "setQuadraticAttenuation"
            , (void ( ::osg::Light::* )( float ))( &::osg::Light::setQuadraticAttenuation )
            , ( bp::arg("quadratic_attenuation") ) )    
        .def( 
            "setSpecular"
            , (void ( ::osg::Light::* )( ::osg::Vec4 const & ))( &::osg::Light::setSpecular )
            , ( bp::arg("specular") ) )    
        .def( 
            "setSpotCutoff"
            , (void ( ::osg::Light::* )( float ))( &::osg::Light::setSpotCutoff )
            , ( bp::arg("spot_cutoff") ) )    
        .def( 
            "setSpotExponent"
            , (void ( ::osg::Light::* )( float ))( &::osg::Light::setSpotExponent )
            , ( bp::arg("spot_exponent") ) )    
        .def( 
            "computeDataVariance"
            , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
            , (void ( Light_wrapper::* )(  ))(&Light_wrapper::default_computeDataVariance) )    
        .def( 
            "getUserData"
            , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
            , (::osg::Referenced * ( Light_wrapper::* )(  ))(&Light_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "getUserData"
            , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
            , (::osg::Referenced const * ( Light_wrapper::* )(  )const)(&Light_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
            , (void ( Light_wrapper::* )( ::std::string const & ))(&Light_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
            , ( bp::arg("name") ) )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
            , (void ( Light_wrapper::* )( bool ))(&Light_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) )    
        .def( 
            "setUserData"
            , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
            , (void ( Light_wrapper::* )( ::osg::Referenced * ))(&Light_wrapper::default_setUserData)
            , ( bp::arg("obj") ) );

}
