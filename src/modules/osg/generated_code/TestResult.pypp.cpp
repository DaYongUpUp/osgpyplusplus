// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "testresult.pypp.hpp"

namespace bp = boost::python;

struct TestResult_wrapper : osg::TestResult, bp::wrapper< osg::TestResult > {

    TestResult_wrapper( )
    : osg::TestResult( )
      , bp::wrapper< osg::TestResult >(){
        // null constructor
    
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_TestResult_class(){

    bp::class_< TestResult_wrapper, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::TestResult >, boost::noncopyable >( "TestResult", bp::init< >() )    
        .def_readwrite( "_active", &osg::TestResult::_active )    
        .def_readwrite( "_contextID", &osg::TestResult::_contextID )    
        .def_readwrite( "_id", &osg::TestResult::_id )    
        .def_readwrite( "_init", &osg::TestResult::_init )    
        .def_readwrite( "_numPixels", &osg::TestResult::_numPixels )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Referenced::* )( bool ))(&::osg::Referenced::setThreadSafeRefUnref)
            , (void ( TestResult_wrapper::* )( bool ))(&TestResult_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) );

}
