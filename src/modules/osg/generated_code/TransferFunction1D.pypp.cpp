// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "transferfunction1d.pypp.hpp"

namespace bp = boost::python;

struct TransferFunction1D_wrapper : osg::TransferFunction1D, bp::wrapper< osg::TransferFunction1D > {

    TransferFunction1D_wrapper( )
    : osg::TransferFunction1D( )
      , bp::wrapper< osg::TransferFunction1D >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::TransferFunction1D::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::TransferFunction1D::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::TransferFunction1D::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::TransferFunction1D::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::TransferFunction1D::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::TransferFunction1D::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::TransferFunction1D::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::TransferFunction1D::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::TransferFunction1D::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::TransferFunction1D::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_TransferFunction1D_class(){

    bp::class_< TransferFunction1D_wrapper, bp::bases< osg::TransferFunction >, osg::ref_ptr< ::osg::TransferFunction1D >, boost::noncopyable >( "TransferFunction1D", "\n 1D variant of TransferFunction.\n", bp::init< >("\n 1D variant of TransferFunction.\n") )    
        .def( 
            "allocate"
            , (void ( ::osg::TransferFunction1D::* )( unsigned int ))( &::osg::TransferFunction1D::allocate )
            , ( bp::arg("numImageCells") )
            , " allocate the osg::Image with specified dimension.  The Image tracks the color map, and is used to represent the\n transfer function when download to GPU." )    
        .def( 
            "assign"
            , (void ( ::osg::TransferFunction1D::* )( ::std::map< float, osg::Vec4f > const & ))( &::osg::TransferFunction1D::assign )
            , ( bp::arg("vcm") )
            , " Assign a color map and automatically update the image to make sure they are in sync." )    
        .def( 
            "className"
            , (char const * ( ::osg::TransferFunction1D::* )(  )const)(&::osg::TransferFunction1D::className)
            , (char const * ( TransferFunction1D_wrapper::* )(  )const)(&TransferFunction1D_wrapper::default_className) )    
        .def( 
            "clear"
            , (void ( ::osg::TransferFunction1D::* )( ::osg::Vec4 const & ))( &::osg::TransferFunction1D::clear )
            , ( bp::arg("color")=osg::Vec4f(1.0e+0f, 1.0e+0f, 1.0e+0f, 1.0e+0f) )
            , " Clear the whole range to just represent a single color." )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::TransferFunction1D::* )( ::osg::CopyOp const & )const)(&::osg::TransferFunction1D::clone)
            , (::osg::Object * ( TransferFunction1D_wrapper::* )( ::osg::CopyOp const & )const)(&TransferFunction1D_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::TransferFunction1D::* )(  )const)(&::osg::TransferFunction1D::cloneType)
            , (::osg::Object * ( TransferFunction1D_wrapper::* )(  )const)(&TransferFunction1D_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getColor"
            , (::osg::Vec4 ( ::osg::TransferFunction1D::* )( float )const)( &::osg::TransferFunction1D::getColor )
            , ( bp::arg("v") )
            , " Get the color for a specified transfer function value, interpolating the value if no exact match is found." )    
        .def( 
            "getColorMap"
            , (::std::map< float, osg::Vec4f > & ( ::osg::TransferFunction1D::* )(  ))( &::osg::TransferFunction1D::getColorMap )
            , bp::return_internal_reference< >()
            , " Get the color map that stores the mapping between the the transfer function value and the colour it maps to." )    
        .def( 
            "getColorMap"
            , (::std::map< float, osg::Vec4f > const & ( ::osg::TransferFunction1D::* )(  )const)( &::osg::TransferFunction1D::getColorMap )
            , bp::return_internal_reference< >()
            , " Get the const color map that stores the mapping between the the transfer function value and the colour it maps to." )    
        .def( 
            "getMaximum"
            , (float ( ::osg::TransferFunction1D::* )(  )const)( &::osg::TransferFunction1D::getMaximum )
            , " Get the maximum transfer function value." )    
        .def( 
            "getMinimum"
            , (float ( ::osg::TransferFunction1D::* )(  )const)( &::osg::TransferFunction1D::getMinimum )
            , " Get the minimum transfer function value." )    
        .def( 
            "getNumberImageCells"
            , (unsigned int ( ::osg::TransferFunction1D::* )(  )const)( &::osg::TransferFunction1D::getNumberImageCells )
            , " Get the number of image cells that are assigned to the represent the transfer function when download to the GPU." )    
        .def( 
            "getPixelValue"
            , (::osg::Vec4 ( ::osg::TransferFunction1D::* )( unsigned int )const)( &::osg::TransferFunction1D::getPixelValue )
            , ( bp::arg("i") )
            , " Get pixel value from the image." )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::TransferFunction1D::* )( ::osg::Object const * )const)(&::osg::TransferFunction1D::isSameKindAs)
            , (bool ( TransferFunction1D_wrapper::* )( ::osg::Object const * )const)(&TransferFunction1D_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::TransferFunction1D::* )(  )const)(&::osg::TransferFunction1D::libraryName)
            , (char const * ( TransferFunction1D_wrapper::* )(  )const)(&TransferFunction1D_wrapper::default_libraryName) )    
        .def( 
            "setColor"
            , (void ( ::osg::TransferFunction1D::* )( float,::osg::Vec4 const &,bool ))( &::osg::TransferFunction1D::setColor )
            , ( bp::arg("v"), bp::arg("color"), bp::arg("updateImage")=(bool)(true) )
            , " Set the color for a specified transfer function value.\n updateImage defaults to true, and tells the setColor function to update the associate osg::Image that\n tracks the color map.  Pass in false as the updateImage parameter if you are setting up many values\n at once to avoid recomputation of the image data, then once all setColor calls are made explictly call\n updateImage() to bring the osg::Image back into sync with the color map." )    
        .def( 
            "updateImage"
            , (void ( ::osg::TransferFunction1D::* )(  ))( &::osg::TransferFunction1D::updateImage )
            , " Manually update the associate osg::Image to represent the colors assigned in the color map." )    
        .def( 
            "computeDataVariance"
            , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
            , (void ( TransferFunction1D_wrapper::* )(  ))(&TransferFunction1D_wrapper::default_computeDataVariance) )    
        .def( 
            "getUserData"
            , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
            , (::osg::Referenced * ( TransferFunction1D_wrapper::* )(  ))(&TransferFunction1D_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "getUserData"
            , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
            , (::osg::Referenced const * ( TransferFunction1D_wrapper::* )(  )const)(&TransferFunction1D_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "resizeGLObjectBuffers"
            , (void ( ::osg::Object::* )( unsigned int ))(&::osg::Object::resizeGLObjectBuffers)
            , (void ( TransferFunction1D_wrapper::* )( unsigned int ))(&TransferFunction1D_wrapper::default_resizeGLObjectBuffers)
            , ( bp::arg("arg0") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
            , (void ( TransferFunction1D_wrapper::* )( ::std::string const & ))(&TransferFunction1D_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
            , ( bp::arg("name") )
            , " Set the name of object using a C style string." )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
            , (void ( TransferFunction1D_wrapper::* )( bool ))(&TransferFunction1D_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) )    
        .def( 
            "setUserData"
            , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
            , (void ( TransferFunction1D_wrapper::* )( ::osg::Referenced * ))(&TransferFunction1D_wrapper::default_setUserData)
            , ( bp::arg("obj") ) );

}
