// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "glbufferobject.pypp.hpp"

namespace bp = boost::python;

struct GLBufferObject_wrapper : osg::GLBufferObject, bp::wrapper< osg::GLBufferObject > {

    struct BufferEntry_wrapper : osg::GLBufferObject::BufferEntry, bp::wrapper< osg::GLBufferObject::BufferEntry > {
    
        BufferEntry_wrapper( )
        : osg::GLBufferObject::BufferEntry( )
          , bp::wrapper< osg::GLBufferObject::BufferEntry >(){
            // null constructor
        
        }
    
        BufferEntry_wrapper(::osg::GLBufferObject::BufferEntry const & rhs )
        : osg::GLBufferObject::BufferEntry( boost::ref(rhs) )
          , bp::wrapper< osg::GLBufferObject::BufferEntry >(){
            // copy constructor
        
        }
    
        static ::osg::BufferData * get_dataSource(osg::GLBufferObject::BufferEntry const & inst ){
            return inst.dataSource;
        }
        
        static void set_dataSource( osg::GLBufferObject::BufferEntry & inst, ::osg::BufferData * new_value ){ 
            inst.dataSource = new_value;
        }
    
    };

    struct Extensions_wrapper : osg::GLBufferObject::Extensions, bp::wrapper< osg::GLBufferObject::Extensions > {
    
        Extensions_wrapper(unsigned int contextID )
        : osg::GLBufferObject::Extensions( contextID )
          , bp::wrapper< osg::GLBufferObject::Extensions >(){
            // constructor
        
        }
    
        Extensions_wrapper(::osg::GLBufferObject::Extensions const & rhs )
        : osg::GLBufferObject::Extensions( boost::ref(rhs) )
          , bp::wrapper< osg::GLBufferObject::Extensions >(){
            // copy constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    GLBufferObject_wrapper(unsigned int contextID, ::osg::BufferObject * bufferObject, unsigned int glObjectID=0 )
    : osg::GLBufferObject( contextID, boost::python::ptr(bufferObject), glObjectID )
      , bp::wrapper< osg::GLBufferObject >(){
        // constructor
    
    }

    static ::osg::GLBufferObject::Extensions * get__extensions(osg::GLBufferObject const & inst ){
        return inst._extensions;
    }
    
    static void set__extensions( osg::GLBufferObject & inst, ::osg::GLBufferObject::Extensions * new_value ){ 
        inst._extensions = new_value;
    }

    static ::osg::GLBufferObject * get__next(osg::GLBufferObject const & inst ){
        return inst._next;
    }
    
    static void set__next( osg::GLBufferObject & inst, ::osg::GLBufferObject * new_value ){ 
        inst._next = new_value;
    }

    static ::osg::GLBufferObject * get__previous(osg::GLBufferObject const & inst ){
        return inst._previous;
    }
    
    static void set__previous( osg::GLBufferObject & inst, ::osg::GLBufferObject * new_value ){ 
        inst._previous = new_value;
    }

    static ::osg::GLBufferObjectSet * get__set(osg::GLBufferObject const & inst ){
        return inst._set;
    }
    
    static void set__set( osg::GLBufferObject & inst, ::osg::GLBufferObjectSet * new_value ){ 
        inst._set = new_value;
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_GLBufferObject_class(){

    { //::osg::GLBufferObject
        typedef bp::class_< GLBufferObject_wrapper, bp::bases< osg::Referenced >, boost::noncopyable > GLBufferObject_exposer_t;
        GLBufferObject_exposer_t GLBufferObject_exposer = GLBufferObject_exposer_t( "GLBufferObject", bp::no_init );
        bp::scope GLBufferObject_scope( GLBufferObject_exposer );
        { //::osg::GLBufferObject::BufferEntry
            typedef bp::class_< GLBufferObject_wrapper::BufferEntry_wrapper > BufferEntry_exposer_t;
            BufferEntry_exposer_t BufferEntry_exposer = BufferEntry_exposer_t( "BufferEntry", bp::init< >() );
            bp::scope BufferEntry_scope( BufferEntry_exposer );
            BufferEntry_exposer.def( bp::init< osg::GLBufferObject::BufferEntry const & >(( bp::arg("rhs") )) );
            { //::osg::GLBufferObject::BufferEntry::getNumClients
            
                typedef unsigned int ( ::osg::GLBufferObject::BufferEntry::*getNumClients_function_type)(  ) const;
                
                BufferEntry_exposer.def( 
                    "getNumClients"
                    , getNumClients_function_type( &::osg::GLBufferObject::BufferEntry::getNumClients ) );
            
            }
            { //::osg::GLBufferObject::BufferEntry::operator=
            
                typedef ::osg::GLBufferObject::BufferEntry & ( ::osg::GLBufferObject::BufferEntry::*assign_function_type)( ::osg::GLBufferObject::BufferEntry const & ) ;
                
                BufferEntry_exposer.def( 
                    "assign"
                    , assign_function_type( &::osg::GLBufferObject::BufferEntry::operator= )
                    , ( bp::arg("rhs") )
                    , bp::return_self< >() );
            
            }
            BufferEntry_exposer.def_readwrite( "dataSize", &osg::GLBufferObject::BufferEntry::dataSize );
            BufferEntry_exposer.add_property( "dataSource"
                        , bp::make_function( (::osg::BufferData * (*)( ::osg::GLBufferObject::BufferEntry const & ))(&GLBufferObject_wrapper::BufferEntry_wrapper::get_dataSource), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osg::GLBufferObject::BufferEntry &,::osg::BufferData * ))(&GLBufferObject_wrapper::BufferEntry_wrapper::set_dataSource), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
            BufferEntry_exposer.def_readwrite( "modifiedCount", &osg::GLBufferObject::BufferEntry::modifiedCount );
            BufferEntry_exposer.def_readwrite( "numRead", &osg::GLBufferObject::BufferEntry::numRead );
            BufferEntry_exposer.def_readwrite( "offset", &osg::GLBufferObject::BufferEntry::offset );
        }
        { //::osg::GLBufferObject::Extensions
            typedef bp::class_< GLBufferObject_wrapper::Extensions_wrapper, bp::bases< osg::Referenced > > Extensions_exposer_t;
            Extensions_exposer_t Extensions_exposer = Extensions_exposer_t( "Extensions", bp::init< unsigned int >(( bp::arg("contextID") )) );
            bp::scope Extensions_scope( Extensions_exposer );
            bp::implicitly_convertible< unsigned int, osg::GLBufferObject::Extensions >();
            Extensions_exposer.def( bp::init< osg::GLBufferObject::Extensions const & >(( bp::arg("rhs") )) );
            { //::osg::GLBufferObject::Extensions::glBindBuffer
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glBindBuffer_function_type)( ::GLenum,::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glBindBuffer"
                    , glBindBuffer_function_type( &::osg::GLBufferObject::Extensions::glBindBuffer )
                    , ( bp::arg("target"), bp::arg("buffer") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glBindBufferBase
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glBindBufferBase_function_type)( ::GLenum,::GLuint,::GLuint ) ;
                
                Extensions_exposer.def( 
                    "glBindBufferBase"
                    , glBindBufferBase_function_type( &::osg::GLBufferObject::Extensions::glBindBufferBase )
                    , ( bp::arg("target"), bp::arg("index"), bp::arg("buffer") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glBindBufferRange
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glBindBufferRange_function_type)( ::GLenum,::GLuint,::GLuint,::GLintptr,::GLsizeiptr ) ;
                
                Extensions_exposer.def( 
                    "glBindBufferRange"
                    , glBindBufferRange_function_type( &::osg::GLBufferObject::Extensions::glBindBufferRange )
                    , ( bp::arg("target"), bp::arg("index"), bp::arg("buffer"), bp::arg("offset"), bp::arg("size") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glBufferData
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glBufferData_function_type)( ::GLenum,::GLsizeiptrARB,::GLvoid const *,::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glBufferData"
                    , glBufferData_function_type( &::osg::GLBufferObject::Extensions::glBufferData )
                    , ( bp::arg("target"), bp::arg("size"), bp::arg("data"), bp::arg("usage") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glBufferSubData
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glBufferSubData_function_type)( ::GLenum,::GLintptrARB,::GLsizeiptrARB,::GLvoid const * ) const;
                
                Extensions_exposer.def( 
                    "glBufferSubData"
                    , glBufferSubData_function_type( &::osg::GLBufferObject::Extensions::glBufferSubData )
                    , ( bp::arg("target"), bp::arg("offset"), bp::arg("size"), bp::arg("data") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glDeleteBuffers
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glDeleteBuffers_function_type)( ::GLsizei,::GLuint const * ) const;
                
                Extensions_exposer.def( 
                    "glDeleteBuffers"
                    , glDeleteBuffers_function_type( &::osg::GLBufferObject::Extensions::glDeleteBuffers )
                    , ( bp::arg("n"), bp::arg("buffers") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glGenBuffers
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glGenBuffers_function_type)( ::GLsizei,::GLuint * ) const;
                
                Extensions_exposer.def( 
                    "glGenBuffers"
                    , glGenBuffers_function_type( &::osg::GLBufferObject::Extensions::glGenBuffers )
                    , ( bp::arg("n"), bp::arg("buffers") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glGetBufferParameteriv
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glGetBufferParameteriv_function_type)( ::GLenum,::GLenum,::GLint * ) const;
                
                Extensions_exposer.def( 
                    "glGetBufferParameteriv"
                    , glGetBufferParameteriv_function_type( &::osg::GLBufferObject::Extensions::glGetBufferParameteriv )
                    , ( bp::arg("target"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glGetBufferPointerv
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glGetBufferPointerv_function_type)( ::GLenum,::GLenum,::GLvoid * * ) const;
                
                Extensions_exposer.def( 
                    "glGetBufferPointerv"
                    , glGetBufferPointerv_function_type( &::osg::GLBufferObject::Extensions::glGetBufferPointerv )
                    , ( bp::arg("target"), bp::arg("pname"), bp::arg("params") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glGetBufferSubData
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glGetBufferSubData_function_type)( ::GLenum,::GLintptrARB,::GLsizeiptrARB,::GLvoid * ) const;
                
                Extensions_exposer.def( 
                    "glGetBufferSubData"
                    , glGetBufferSubData_function_type( &::osg::GLBufferObject::Extensions::glGetBufferSubData )
                    , ( bp::arg("target"), bp::arg("offset"), bp::arg("size"), bp::arg("data") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glIsBuffer
            
                typedef ::GLboolean ( ::osg::GLBufferObject::Extensions::*glIsBuffer_function_type)( ::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glIsBuffer"
                    , glIsBuffer_function_type( &::osg::GLBufferObject::Extensions::glIsBuffer )
                    , ( bp::arg("buffer") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glMapBuffer
            
                typedef ::GLvoid * ( ::osg::GLBufferObject::Extensions::*glMapBuffer_function_type)( ::GLenum,::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glMapBuffer"
                    , glMapBuffer_function_type( &::osg::GLBufferObject::Extensions::glMapBuffer )
                    , ( bp::arg("target"), bp::arg("access") )
                    , bp::return_value_policy< bp::return_opaque_pointer >() );
            
            }
            { //::osg::GLBufferObject::Extensions::glTexBuffer
            
                typedef void ( ::osg::GLBufferObject::Extensions::*glTexBuffer_function_type)( ::GLenum,::GLenum,::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glTexBuffer"
                    , glTexBuffer_function_type( &::osg::GLBufferObject::Extensions::glTexBuffer )
                    , ( bp::arg("target"), bp::arg("internalFormat"), bp::arg("buffer") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::glUnmapBuffer
            
                typedef ::GLboolean ( ::osg::GLBufferObject::Extensions::*glUnmapBuffer_function_type)( ::GLenum ) const;
                
                Extensions_exposer.def( 
                    "glUnmapBuffer"
                    , glUnmapBuffer_function_type( &::osg::GLBufferObject::Extensions::glUnmapBuffer )
                    , ( bp::arg("target") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::isBufferObjectSupported
            
                typedef bool ( ::osg::GLBufferObject::Extensions::*isBufferObjectSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isBufferObjectSupported"
                    , isBufferObjectSupported_function_type( &::osg::GLBufferObject::Extensions::isBufferObjectSupported ) );
            
            }
            { //::osg::GLBufferObject::Extensions::isPBOSupported
            
                typedef bool ( ::osg::GLBufferObject::Extensions::*isPBOSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isPBOSupported"
                    , isPBOSupported_function_type( &::osg::GLBufferObject::Extensions::isPBOSupported ) );
            
            }
            { //::osg::GLBufferObject::Extensions::isTBOSupported
            
                typedef bool ( ::osg::GLBufferObject::Extensions::*isTBOSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isTBOSupported"
                    , isTBOSupported_function_type( &::osg::GLBufferObject::Extensions::isTBOSupported ) );
            
            }
            { //::osg::GLBufferObject::Extensions::isUniformBufferObjectSupported
            
                typedef bool ( ::osg::GLBufferObject::Extensions::*isUniformBufferObjectSupported_function_type)(  ) const;
                
                Extensions_exposer.def( 
                    "isUniformBufferObjectSupported"
                    , isUniformBufferObjectSupported_function_type( &::osg::GLBufferObject::Extensions::isUniformBufferObjectSupported ) );
            
            }
            { //::osg::GLBufferObject::Extensions::lowestCommonDenominator
            
                typedef void ( ::osg::GLBufferObject::Extensions::*lowestCommonDenominator_function_type)( ::osg::GLBufferObject::Extensions const & ) ;
                
                Extensions_exposer.def( 
                    "lowestCommonDenominator"
                    , lowestCommonDenominator_function_type( &::osg::GLBufferObject::Extensions::lowestCommonDenominator )
                    , ( bp::arg("rhs") ) );
            
            }
            { //::osg::GLBufferObject::Extensions::setupGLExtensions
            
                typedef void ( ::osg::GLBufferObject::Extensions::*setupGLExtensions_function_type)( unsigned int ) ;
                
                Extensions_exposer.def( 
                    "setupGLExtensions"
                    , setupGLExtensions_function_type( &::osg::GLBufferObject::Extensions::setupGLExtensions )
                    , ( bp::arg("contextID") ) );
            
            }
            { //::osg::Referenced::setThreadSafeRefUnref
            
                typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
                typedef void ( GLBufferObject_wrapper::Extensions_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
                
                Extensions_exposer.def( 
                    "setThreadSafeRefUnref"
                    , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                    , default_setThreadSafeRefUnref_function_type(&GLBufferObject_wrapper::Extensions_wrapper::default_setThreadSafeRefUnref)
                    , ( bp::arg("threadSafe") ) );
            
            }
        }
        GLBufferObject_exposer.def( bp::init< unsigned int, osg::BufferObject *, bp::optional< unsigned int > >(( bp::arg("contextID"), bp::arg("bufferObject"), bp::arg("glObjectID")=(unsigned int)(0) )) );
        { //::osg::GLBufferObject::assign
        
            typedef void ( ::osg::GLBufferObject::*assign_function_type)( ::osg::BufferObject * ) ;
            
            GLBufferObject_exposer.def( 
                "assign"
                , assign_function_type( &::osg::GLBufferObject::assign )
                , ( bp::arg("bufferObject") ) );
        
        }
        { //::osg::GLBufferObject::bindBuffer
        
            typedef void ( ::osg::GLBufferObject::*bindBuffer_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "bindBuffer"
                , bindBuffer_function_type( &::osg::GLBufferObject::bindBuffer ) );
        
        }
        { //::osg::GLBufferObject::clear
        
            typedef void ( ::osg::GLBufferObject::*clear_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "clear"
                , clear_function_type( &::osg::GLBufferObject::clear ) );
        
        }
        { //::osg::GLBufferObject::compileBuffer
        
            typedef void ( ::osg::GLBufferObject::*compileBuffer_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "compileBuffer"
                , compileBuffer_function_type( &::osg::GLBufferObject::compileBuffer ) );
        
        }
        { //::osg::GLBufferObject::createGLBufferObject
        
            typedef ::osg::GLBufferObject * ( *createGLBufferObject_function_type )( unsigned int,::osg::BufferObject const * );
            
            GLBufferObject_exposer.def( 
                "createGLBufferObject"
                , createGLBufferObject_function_type( &::osg::GLBufferObject::createGLBufferObject )
                , ( bp::arg("contextID"), bp::arg("bufferObject") )
                    /* undefined call policies */ );
        
        }
        { //::osg::GLBufferObject::deleteAllBufferObjects
        
            typedef void ( *deleteAllBufferObjects_function_type )( unsigned int );
            
            GLBufferObject_exposer.def( 
                "deleteAllBufferObjects"
                , deleteAllBufferObjects_function_type( &::osg::GLBufferObject::deleteAllBufferObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::GLBufferObject::deleteGLObject
        
            typedef void ( ::osg::GLBufferObject::*deleteGLObject_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "deleteGLObject"
                , deleteGLObject_function_type( &::osg::GLBufferObject::deleteGLObject ) );
        
        }
        { //::osg::GLBufferObject::dirty
        
            typedef void ( ::osg::GLBufferObject::*dirty_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "dirty"
                , dirty_function_type( &::osg::GLBufferObject::dirty ) );
        
        }
        { //::osg::GLBufferObject::discardAllBufferObjects
        
            typedef void ( *discardAllBufferObjects_function_type )( unsigned int );
            
            GLBufferObject_exposer.def( 
                "discardAllBufferObjects"
                , discardAllBufferObjects_function_type( &::osg::GLBufferObject::discardAllBufferObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::GLBufferObject::discardAllDeletedBufferObjects
        
            typedef void ( *discardAllDeletedBufferObjects_function_type )( unsigned int );
            
            GLBufferObject_exposer.def( 
                "discardAllDeletedBufferObjects"
                , discardAllDeletedBufferObjects_function_type( &::osg::GLBufferObject::discardAllDeletedBufferObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::GLBufferObject::flushAllDeletedBufferObjects
        
            typedef void ( *flushAllDeletedBufferObjects_function_type )( unsigned int );
            
            GLBufferObject_exposer.def( 
                "flushAllDeletedBufferObjects"
                , flushAllDeletedBufferObjects_function_type( &::osg::GLBufferObject::flushAllDeletedBufferObjects )
                , ( bp::arg("contextID") ) );
        
        }
        { //::osg::GLBufferObject::flushDeletedBufferObjects
        
            typedef void ( *flushDeletedBufferObjects_function_type )( unsigned int,double,double & );
            
            GLBufferObject_exposer.def( 
                "flushDeletedBufferObjects"
                , flushDeletedBufferObjects_function_type( &::osg::GLBufferObject::flushDeletedBufferObjects )
                , ( bp::arg("contextID"), bp::arg("currentTime"), bp::arg("availbleTime") ) );
        
        }
        { //::osg::GLBufferObject::getBufferObject
        
            typedef ::osg::BufferObject * ( ::osg::GLBufferObject::*getBufferObject_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "getBufferObject"
                , getBufferObject_function_type( &::osg::GLBufferObject::getBufferObject )
                    /* undefined call policies */ );
        
        }
        { //::osg::GLBufferObject::getContextID
        
            typedef unsigned int ( ::osg::GLBufferObject::*getContextID_function_type)(  ) const;
            
            GLBufferObject_exposer.def( 
                "getContextID"
                , getContextID_function_type( &::osg::GLBufferObject::getContextID ) );
        
        }
        { //::osg::GLBufferObject::getExtensions
        
            typedef ::osg::GLBufferObject::Extensions * ( *getExtensions_function_type )( unsigned int,bool );
            
            GLBufferObject_exposer.def( 
                "getExtensions"
                , getExtensions_function_type( &::osg::GLBufferObject::getExtensions )
                , ( bp::arg("contextID"), bp::arg("createIfNotInitalized") )
                    /* undefined call policies */ );
        
        }
        { //::osg::GLBufferObject::getGLObjectID
        
            typedef ::GLuint & ( ::osg::GLBufferObject::*getGLObjectID_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "getGLObjectID"
                , getGLObjectID_function_type( &::osg::GLBufferObject::getGLObjectID )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::GLBufferObject::getGLObjectID
        
            typedef ::GLuint ( ::osg::GLBufferObject::*getGLObjectID_function_type)(  ) const;
            
            GLBufferObject_exposer.def( 
                "getGLObjectID"
                , getGLObjectID_function_type( &::osg::GLBufferObject::getGLObjectID ) );
        
        }
        { //::osg::GLBufferObject::getOffset
        
            typedef ::GLsizeiptrARB ( ::osg::GLBufferObject::*getOffset_function_type)( unsigned int ) const;
            
            GLBufferObject_exposer.def( 
                "getOffset"
                , getOffset_function_type( &::osg::GLBufferObject::getOffset )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::GLBufferObject::getProfile
        
            typedef ::osg::BufferObjectProfile const & ( ::osg::GLBufferObject::*getProfile_function_type)(  ) const;
            
            GLBufferObject_exposer.def( 
                "getProfile"
                , getProfile_function_type( &::osg::GLBufferObject::getProfile )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::GLBufferObject::hasAllBufferDataBeenRead
        
            typedef bool ( ::osg::GLBufferObject::*hasAllBufferDataBeenRead_function_type)(  ) const;
            
            GLBufferObject_exposer.def( 
                "hasAllBufferDataBeenRead"
                , hasAllBufferDataBeenRead_function_type( &::osg::GLBufferObject::hasAllBufferDataBeenRead ) );
        
        }
        { //::osg::GLBufferObject::isDirty
        
            typedef bool ( ::osg::GLBufferObject::*isDirty_function_type)(  ) const;
            
            GLBufferObject_exposer.def( 
                "isDirty"
                , isDirty_function_type( &::osg::GLBufferObject::isDirty ) );
        
        }
        { //::osg::GLBufferObject::isPBOSupported
        
            typedef bool ( ::osg::GLBufferObject::*isPBOSupported_function_type)(  ) const;
            
            GLBufferObject_exposer.def( 
                "isPBOSupported"
                , isPBOSupported_function_type( &::osg::GLBufferObject::isPBOSupported ) );
        
        }
        { //::osg::GLBufferObject::releaseGLBufferObject
        
            typedef void ( *releaseGLBufferObject_function_type )( unsigned int,::osg::GLBufferObject * );
            
            GLBufferObject_exposer.def( 
                "releaseGLBufferObject"
                , releaseGLBufferObject_function_type( &::osg::GLBufferObject::releaseGLBufferObject )
                , ( bp::arg("contextID"), bp::arg("to") ) );
        
        }
        { //::osg::GLBufferObject::setBufferDataHasBeenRead
        
            typedef void ( ::osg::GLBufferObject::*setBufferDataHasBeenRead_function_type)( ::osg::BufferData const * ) ;
            
            GLBufferObject_exposer.def( 
                "setBufferDataHasBeenRead"
                , setBufferDataHasBeenRead_function_type( &::osg::GLBufferObject::setBufferDataHasBeenRead )
                , ( bp::arg("bd") ) );
        
        }
        { //::osg::GLBufferObject::setBufferObject
        
            typedef void ( ::osg::GLBufferObject::*setBufferObject_function_type)( ::osg::BufferObject * ) ;
            
            GLBufferObject_exposer.def( 
                "setBufferObject"
                , setBufferObject_function_type( &::osg::GLBufferObject::setBufferObject )
                , ( bp::arg("bufferObject") ) );
        
        }
        { //::osg::GLBufferObject::setExtensions
        
            typedef void ( *setExtensions_function_type )( unsigned int,::osg::GLBufferObject::Extensions * );
            
            GLBufferObject_exposer.def( 
                "setExtensions"
                , setExtensions_function_type( &::osg::GLBufferObject::setExtensions )
                , ( bp::arg("contextID"), bp::arg("extensions") ) );
        
        }
        { //::osg::GLBufferObject::setProfile
        
            typedef void ( ::osg::GLBufferObject::*setProfile_function_type)( ::osg::BufferObjectProfile const & ) ;
            
            GLBufferObject_exposer.def( 
                "setProfile"
                , setProfile_function_type( &::osg::GLBufferObject::setProfile )
                , ( bp::arg("profile") ) );
        
        }
        { //::osg::GLBufferObject::unbindBuffer
        
            typedef void ( ::osg::GLBufferObject::*unbindBuffer_function_type)(  ) ;
            
            GLBufferObject_exposer.def( 
                "unbindBuffer"
                , unbindBuffer_function_type( &::osg::GLBufferObject::unbindBuffer ) );
        
        }
        GLBufferObject_exposer.add_property( "_extensions"
                    , bp::make_function( (::osg::GLBufferObject::Extensions * (*)( ::osg::GLBufferObject const & ))(&GLBufferObject_wrapper::get__extensions), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::osg::GLBufferObject &,::osg::GLBufferObject::Extensions * ))(&GLBufferObject_wrapper::set__extensions), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        GLBufferObject_exposer.def_readwrite( "_frameLastUsed", &osg::GLBufferObject::_frameLastUsed );
        GLBufferObject_exposer.add_property( "_next"
                    , bp::make_function( (::osg::GLBufferObject * (*)( ::osg::GLBufferObject const & ))(&GLBufferObject_wrapper::get__next), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::osg::GLBufferObject &,::osg::GLBufferObject * ))(&GLBufferObject_wrapper::set__next), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        GLBufferObject_exposer.add_property( "_previous"
                    , bp::make_function( (::osg::GLBufferObject * (*)( ::osg::GLBufferObject const & ))(&GLBufferObject_wrapper::get__previous), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::osg::GLBufferObject &,::osg::GLBufferObject * ))(&GLBufferObject_wrapper::set__previous), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        GLBufferObject_exposer.add_property( "_set"
                    , bp::make_function( (::osg::GLBufferObjectSet * (*)( ::osg::GLBufferObject const & ))(&GLBufferObject_wrapper::get__set), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::osg::GLBufferObject &,::osg::GLBufferObjectSet * ))(&GLBufferObject_wrapper::set__set), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        { //::osg::Referenced::setThreadSafeRefUnref
        
            typedef void ( ::osg::Referenced::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( GLBufferObject_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            GLBufferObject_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Referenced::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&GLBufferObject_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        GLBufferObject_exposer.staticmethod( "createGLBufferObject" );
        GLBufferObject_exposer.staticmethod( "deleteAllBufferObjects" );
        GLBufferObject_exposer.staticmethod( "discardAllBufferObjects" );
        GLBufferObject_exposer.staticmethod( "discardAllDeletedBufferObjects" );
        GLBufferObject_exposer.staticmethod( "flushAllDeletedBufferObjects" );
        GLBufferObject_exposer.staticmethod( "flushDeletedBufferObjects" );
        GLBufferObject_exposer.staticmethod( "getExtensions" );
        GLBufferObject_exposer.staticmethod( "releaseGLBufferObject" );
        GLBufferObject_exposer.staticmethod( "setExtensions" );
    }

}
