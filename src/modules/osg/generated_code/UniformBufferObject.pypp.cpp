// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "uniformbufferobject.pypp.hpp"

namespace bp = boost::python;

struct UniformBufferObject_wrapper : osg::UniformBufferObject, bp::wrapper< osg::UniformBufferObject > {

    UniformBufferObject_wrapper( )
    : osg::UniformBufferObject( )
      , bp::wrapper< osg::UniformBufferObject >(){
        // null constructor
    
    }

    UniformBufferObject_wrapper(::osg::UniformBufferObject const & ubo, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::UniformBufferObject( boost::ref(ubo), boost::ref(copyop) )
      , bp::wrapper< osg::UniformBufferObject >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::UniformBufferObject::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::UniformBufferObject::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::UniformBufferObject::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::UniformBufferObject::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::UniformBufferObject::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::UniformBufferObject::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::UniformBufferObject::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::UniformBufferObject::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::UniformBufferObject::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::UniformBufferObject::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osg::BufferObject::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osg::BufferObject::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferObject::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferObject::resizeGLObjectBuffers( maxSize );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_UniformBufferObject_class(){

    { //::osg::UniformBufferObject
        typedef bp::class_< UniformBufferObject_wrapper, bp::bases< osg::BufferObject >, boost::noncopyable > UniformBufferObject_exposer_t;
        UniformBufferObject_exposer_t UniformBufferObject_exposer = UniformBufferObject_exposer_t( "UniformBufferObject", bp::no_init );
        bp::scope UniformBufferObject_scope( UniformBufferObject_exposer );
        UniformBufferObject_exposer.def( bp::init< >() );
        UniformBufferObject_exposer.def( bp::init< osg::UniformBufferObject const &, bp::optional< osg::CopyOp const & > >(( bp::arg("ubo"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osg::UniformBufferObject const &, osg::UniformBufferObject >();
        { //::osg::UniformBufferObject::className
        
            typedef char const * ( ::osg::UniformBufferObject::*className_function_type)(  ) const;
            typedef char const * ( UniformBufferObject_wrapper::*default_className_function_type)(  ) const;
            
            UniformBufferObject_exposer.def( 
                "className"
                , className_function_type(&::osg::UniformBufferObject::className)
                , default_className_function_type(&UniformBufferObject_wrapper::default_className) );
        
        }
        { //::osg::UniformBufferObject::clone
        
            typedef ::osg::Object * ( ::osg::UniformBufferObject::*clone_function_type)( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( UniformBufferObject_wrapper::*default_clone_function_type)( ::osg::CopyOp const & ) const;
            
            UniformBufferObject_exposer.def( 
                "clone"
                , clone_function_type(&::osg::UniformBufferObject::clone)
                , default_clone_function_type(&UniformBufferObject_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::UniformBufferObject::cloneType
        
            typedef ::osg::Object * ( ::osg::UniformBufferObject::*cloneType_function_type)(  ) const;
            typedef ::osg::Object * ( UniformBufferObject_wrapper::*default_cloneType_function_type)(  ) const;
            
            UniformBufferObject_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::UniformBufferObject::cloneType)
                , default_cloneType_function_type(&UniformBufferObject_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::UniformBufferObject::isSameKindAs
        
            typedef bool ( ::osg::UniformBufferObject::*isSameKindAs_function_type)( ::osg::Object const * ) const;
            typedef bool ( UniformBufferObject_wrapper::*default_isSameKindAs_function_type)( ::osg::Object const * ) const;
            
            UniformBufferObject_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::UniformBufferObject::isSameKindAs)
                , default_isSameKindAs_function_type(&UniformBufferObject_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::UniformBufferObject::libraryName
        
            typedef char const * ( ::osg::UniformBufferObject::*libraryName_function_type)(  ) const;
            typedef char const * ( UniformBufferObject_wrapper::*default_libraryName_function_type)(  ) const;
            
            UniformBufferObject_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::UniformBufferObject::libraryName)
                , default_libraryName_function_type(&UniformBufferObject_wrapper::default_libraryName) );
        
        }
        { //::osg::Object::computeDataVariance
        
            typedef void ( ::osg::Object::*computeDataVariance_function_type)(  ) ;
            typedef void ( UniformBufferObject_wrapper::*default_computeDataVariance_function_type)(  ) ;
            
            UniformBufferObject_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Object::computeDataVariance)
                , default_computeDataVariance_function_type(&UniformBufferObject_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced * ( ::osg::Object::*getUserData_function_type)(  ) ;
            typedef ::osg::Referenced * ( UniformBufferObject_wrapper::*default_getUserData_function_type)(  ) ;
            
            UniformBufferObject_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&UniformBufferObject_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::getUserData
        
            typedef ::osg::Referenced const * ( ::osg::Object::*getUserData_function_type)(  ) const;
            typedef ::osg::Referenced const * ( UniformBufferObject_wrapper::*default_getUserData_function_type)(  ) const;
            
            UniformBufferObject_exposer.def( 
                "getUserData"
                , getUserData_function_type(&::osg::Object::getUserData)
                , default_getUserData_function_type(&UniformBufferObject_wrapper::default_getUserData)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferObject::releaseGLObjects
        
            typedef void ( ::osg::BufferObject::*releaseGLObjects_function_type)( ::osg::State * ) const;
            typedef void ( UniformBufferObject_wrapper::*default_releaseGLObjects_function_type)( ::osg::State * ) const;
            
            UniformBufferObject_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osg::BufferObject::releaseGLObjects)
                , default_releaseGLObjects_function_type(&UniformBufferObject_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osg::BufferObject::resizeGLObjectBuffers
        
            typedef void ( ::osg::BufferObject::*resizeGLObjectBuffers_function_type)( unsigned int ) ;
            typedef void ( UniformBufferObject_wrapper::*default_resizeGLObjectBuffers_function_type)( unsigned int ) ;
            
            UniformBufferObject_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::BufferObject::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&UniformBufferObject_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( ::std::string const & ) ;
            typedef void ( UniformBufferObject_wrapper::*default_setName_function_type)( ::std::string const & ) ;
            
            UniformBufferObject_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Object::setName)
                , default_setName_function_type(&UniformBufferObject_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setName
        
            typedef void ( ::osg::Object::*setName_function_type)( char const * ) ;
            
            UniformBufferObject_exposer.def( 
                "setName"
                , setName_function_type( &::osg::Object::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Object::setThreadSafeRefUnref
        
            typedef void ( ::osg::Object::*setThreadSafeRefUnref_function_type)( bool ) ;
            typedef void ( UniformBufferObject_wrapper::*default_setThreadSafeRefUnref_function_type)( bool ) ;
            
            UniformBufferObject_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Object::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&UniformBufferObject_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Object::setUserData
        
            typedef void ( ::osg::Object::*setUserData_function_type)( ::osg::Referenced * ) ;
            typedef void ( UniformBufferObject_wrapper::*default_setUserData_function_type)( ::osg::Referenced * ) ;
            
            UniformBufferObject_exposer.def( 
                "setUserData"
                , setUserData_function_type(&::osg::Object::setUserData)
                , default_setUserData_function_type(&UniformBufferObject_wrapper::default_setUserData)
                , ( bp::arg("obj") ) );
        
        }
    }

}
