// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "indexarray.pypp.hpp"

namespace bp = boost::python;

struct IndexArray_wrapper : osg::IndexArray, bp::wrapper< osg::IndexArray > {

    IndexArray_wrapper(::osg::Array::Type arrayType=::osg::Array::ArrayType, ::GLint dataSize=0, ::GLenum dataType=0 )
    : osg::IndexArray( arrayType, dataSize, dataType )
      , bp::wrapper< osg::IndexArray >(){
        // constructor
    
    }

    IndexArray_wrapper(::osg::Array const & array, ::osg::CopyOp const & copyop=SHALLOW_COPY )
    : osg::IndexArray( boost::ref(array), boost::ref(copyop) )
      , bp::wrapper< osg::IndexArray >(){
        // constructor
    
    }

    virtual unsigned int index( unsigned int pos ) const {
        bp::override func_index = this->get_override( "index" );
        return func_index( pos );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::IndexArray::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::IndexArray::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual void accept( ::osg::ArrayVisitor & arg0 ){
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::ConstArrayVisitor & arg0 ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(arg0) );
    }

    virtual void accept( unsigned int index, ::osg::ValueVisitor & arg1 ){
        bp::override func_accept = this->get_override( "accept" );
        func_accept( index, boost::ref(arg1) );
    }

    virtual void accept( unsigned int index, ::osg::ConstValueVisitor & arg1 ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( index, boost::ref(arg1) );
    }

    virtual ::osg::Array * asArray(  ) {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::Array::asArray(  );
        }
    }
    
    ::osg::Array * default_asArray(  ) {
        return osg::Array::asArray( );
    }

    virtual ::osg::Array const * asArray(  ) const  {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::Array::asArray(  );
        }
    }
    
    ::osg::Array const * default_asArray(  ) const  {
        return osg::Array::asArray( );
    }

    virtual ::osg::Image * asImage(  ) {
        if( bp::override func_asImage = this->get_override( "asImage" ) )
            return func_asImage(  );
        else{
            return this->osg::BufferData::asImage(  );
        }
    }
    
    ::osg::Image * default_asImage(  ) {
        return osg::BufferData::asImage( );
    }

    virtual ::osg::Image const * asImage(  ) const  {
        if( bp::override func_asImage = this->get_override( "asImage" ) )
            return func_asImage(  );
        else{
            return this->osg::BufferData::asImage(  );
        }
    }
    
    ::osg::Image const * default_asImage(  ) const  {
        return osg::BufferData::asImage( );
    }

    virtual ::osg::PrimitiveSet * asPrimitiveSet(  ) {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::BufferData::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet * default_asPrimitiveSet(  ) {
        return osg::BufferData::asPrimitiveSet( );
    }

    virtual ::osg::PrimitiveSet const * asPrimitiveSet(  ) const  {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::BufferData::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet const * default_asPrimitiveSet(  ) const  {
        return osg::BufferData::asPrimitiveSet( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Array::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Array::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual int compare( unsigned int lhs, unsigned int rhs ) const {
        bp::override func_compare = this->get_override( "compare" );
        return func_compare( lhs, rhs );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::GLvoid const * getDataPointer(  ) const {
        bp::override func_getDataPointer = this->get_override( "getDataPointer" );
        return func_getDataPointer(  );
    }

    virtual unsigned int getElementSize(  ) const {
        bp::override func_getElementSize = this->get_override( "getElementSize" );
        return func_getElementSize(  );
    }

    virtual unsigned int getNumElements(  ) const {
        bp::override func_getNumElements = this->get_override( "getNumElements" );
        return func_getNumElements(  );
    }

    virtual unsigned int getTotalDataSize(  ) const {
        bp::override func_getTotalDataSize = this->get_override( "getTotalDataSize" );
        return func_getTotalDataSize(  );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Array::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Array::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osg::BufferData::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osg::BufferData::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void reserveArray( unsigned int num ){
        bp::override func_reserveArray = this->get_override( "reserveArray" );
        func_reserveArray( num );
    }

    virtual void resizeArray( unsigned int num ){
        bp::override func_resizeArray = this->get_override( "resizeArray" );
        func_resizeArray( num );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferData::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferData::resizeGLObjectBuffers( maxSize );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void trim(  ) {
        if( bp::override func_trim = this->get_override( "trim" ) )
            func_trim(  );
        else{
            this->osg::Array::trim(  );
        }
    }
    
    void default_trim(  ) {
        osg::Array::trim( );
    }

};

void register_IndexArray_class(){

    bp::class_< IndexArray_wrapper, bp::bases< osg::Array >, boost::noncopyable >( "IndexArray", bp::no_init )    
        .def( bp::init< bp::optional< osg::Array::Type, GLint, GLenum > >(( bp::arg("arrayType")=::osg::Array::ArrayType, bp::arg("dataSize")=(::GLint)(0), bp::arg("dataType")=(::GLenum)(0) )) )    
        .def( bp::init< osg::Array const &, bp::optional< osg::CopyOp const & > >(( bp::arg("array"), bp::arg("copyop")=SHALLOW_COPY )) )    
        .def( 
            "index"
            , bp::pure_virtual( (unsigned int ( ::osg::IndexArray::* )( unsigned int )const)(&::osg::IndexArray::index) )
            , ( bp::arg("pos") ) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::IndexArray::* )( ::osg::Object const * )const)(&::osg::IndexArray::isSameKindAs)
            , (bool ( IndexArray_wrapper::* )( ::osg::Object const * )const)(&IndexArray_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "accept"
            , bp::pure_virtual( (void ( ::osg::Array::* )( ::osg::ArrayVisitor & ))(&::osg::Array::accept) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "accept"
            , bp::pure_virtual( (void ( ::osg::Array::* )( ::osg::ConstArrayVisitor & )const)(&::osg::Array::accept) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "accept"
            , bp::pure_virtual( (void ( ::osg::Array::* )( unsigned int,::osg::ValueVisitor & ))(&::osg::Array::accept) )
            , ( bp::arg("index"), bp::arg("arg1") ) )    
        .def( 
            "accept"
            , bp::pure_virtual( (void ( ::osg::Array::* )( unsigned int,::osg::ConstValueVisitor & )const)(&::osg::Array::accept) )
            , ( bp::arg("index"), bp::arg("arg1") ) )    
        .def( 
            "asArray"
            , (::osg::Array * ( ::osg::Array::* )(  ))(&::osg::Array::asArray)
            , (::osg::Array * ( IndexArray_wrapper::* )(  ))(&IndexArray_wrapper::default_asArray)
                /* undefined call policies */ )    
        .def( 
            "asArray"
            , (::osg::Array const * ( ::osg::Array::* )(  )const)(&::osg::Array::asArray)
            , (::osg::Array const * ( IndexArray_wrapper::* )(  )const)(&IndexArray_wrapper::default_asArray)
                /* undefined call policies */ )    
        .def( 
            "asImage"
            , (::osg::Image * ( ::osg::BufferData::* )(  ))(&::osg::BufferData::asImage)
            , (::osg::Image * ( IndexArray_wrapper::* )(  ))(&IndexArray_wrapper::default_asImage)
                /* undefined call policies */ )    
        .def( 
            "asImage"
            , (::osg::Image const * ( ::osg::BufferData::* )(  )const)(&::osg::BufferData::asImage)
            , (::osg::Image const * ( IndexArray_wrapper::* )(  )const)(&IndexArray_wrapper::default_asImage)
                /* undefined call policies */ )    
        .def( 
            "asPrimitiveSet"
            , (::osg::PrimitiveSet * ( ::osg::BufferData::* )(  ))(&::osg::BufferData::asPrimitiveSet)
            , (::osg::PrimitiveSet * ( IndexArray_wrapper::* )(  ))(&IndexArray_wrapper::default_asPrimitiveSet)
                /* undefined call policies */ )    
        .def( 
            "asPrimitiveSet"
            , (::osg::PrimitiveSet const * ( ::osg::BufferData::* )(  )const)(&::osg::BufferData::asPrimitiveSet)
            , (::osg::PrimitiveSet const * ( IndexArray_wrapper::* )(  )const)(&IndexArray_wrapper::default_asPrimitiveSet)
                /* undefined call policies */ )    
        .def( 
            "className"
            , (char const * ( ::osg::Array::* )(  )const)(&::osg::Array::className)
            , (char const * ( IndexArray_wrapper::* )(  )const)(&IndexArray_wrapper::default_className) )    
        .def( 
            "clone"
            , bp::pure_virtual( (::osg::Object * ( ::osg::Object::* )( ::osg::CopyOp const & )const)(&::osg::Object::clone) )
            , ( bp::arg("arg0") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , bp::pure_virtual( (::osg::Object * ( ::osg::Object::* )(  )const)(&::osg::Object::cloneType) )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "compare"
            , bp::pure_virtual( (int ( ::osg::Array::* )( unsigned int,unsigned int )const)(&::osg::Array::compare) )
            , ( bp::arg("lhs"), bp::arg("rhs") ) )    
        .def( 
            "computeDataVariance"
            , (void ( ::osg::Object::* )(  ))(&::osg::Object::computeDataVariance)
            , (void ( IndexArray_wrapper::* )(  ))(&IndexArray_wrapper::default_computeDataVariance) )    
        .def( 
            "getDataPointer"
            , bp::pure_virtual( (::GLvoid const * ( ::osg::Array::* )(  )const)(&::osg::Array::getDataPointer) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getElementSize"
            , bp::pure_virtual( (unsigned int ( ::osg::Array::* )(  )const)(&::osg::Array::getElementSize) ) )    
        .def( 
            "getNumElements"
            , bp::pure_virtual( (unsigned int ( ::osg::Array::* )(  )const)(&::osg::Array::getNumElements) ) )    
        .def( 
            "getTotalDataSize"
            , bp::pure_virtual( (unsigned int ( ::osg::Array::* )(  )const)(&::osg::Array::getTotalDataSize) ) )    
        .def( 
            "getUserData"
            , (::osg::Referenced * ( ::osg::Object::* )(  ))(&::osg::Object::getUserData)
            , (::osg::Referenced * ( IndexArray_wrapper::* )(  ))(&IndexArray_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "getUserData"
            , (::osg::Referenced const * ( ::osg::Object::* )(  )const)(&::osg::Object::getUserData)
            , (::osg::Referenced const * ( IndexArray_wrapper::* )(  )const)(&IndexArray_wrapper::default_getUserData)
            , bp::return_internal_reference< >() )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::Array::* )(  )const)(&::osg::Array::libraryName)
            , (char const * ( IndexArray_wrapper::* )(  )const)(&IndexArray_wrapper::default_libraryName) )    
        .def( 
            "releaseGLObjects"
            , (void ( ::osg::BufferData::* )( ::osg::State * )const)(&::osg::BufferData::releaseGLObjects)
            , (void ( IndexArray_wrapper::* )( ::osg::State * )const)(&IndexArray_wrapper::default_releaseGLObjects)
            , ( bp::arg("state")=bp::object() ) )    
        .def( 
            "reserveArray"
            , bp::pure_virtual( (void ( ::osg::Array::* )( unsigned int ))(&::osg::Array::reserveArray) )
            , ( bp::arg("num") ) )    
        .def( 
            "resizeArray"
            , bp::pure_virtual( (void ( ::osg::Array::* )( unsigned int ))(&::osg::Array::resizeArray) )
            , ( bp::arg("num") ) )    
        .def( 
            "resizeGLObjectBuffers"
            , (void ( ::osg::BufferData::* )( unsigned int ))(&::osg::BufferData::resizeGLObjectBuffers)
            , (void ( IndexArray_wrapper::* )( unsigned int ))(&IndexArray_wrapper::default_resizeGLObjectBuffers)
            , ( bp::arg("maxSize") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( ::std::string const & ))(&::osg::Object::setName)
            , (void ( IndexArray_wrapper::* )( ::std::string const & ))(&IndexArray_wrapper::default_setName)
            , ( bp::arg("name") ) )    
        .def( 
            "setName"
            , (void ( ::osg::Object::* )( char const * ))( &::osg::Object::setName )
            , ( bp::arg("name") ) )    
        .def( 
            "setThreadSafeRefUnref"
            , (void ( ::osg::Object::* )( bool ))(&::osg::Object::setThreadSafeRefUnref)
            , (void ( IndexArray_wrapper::* )( bool ))(&IndexArray_wrapper::default_setThreadSafeRefUnref)
            , ( bp::arg("threadSafe") ) )    
        .def( 
            "setUserData"
            , (void ( ::osg::Object::* )( ::osg::Referenced * ))(&::osg::Object::setUserData)
            , (void ( IndexArray_wrapper::* )( ::osg::Referenced * ))(&IndexArray_wrapper::default_setUserData)
            , ( bp::arg("obj") ) )    
        .def( 
            "trim"
            , (void ( ::osg::Array::* )(  ))(&::osg::Array::trim)
            , (void ( IndexArray_wrapper::* )(  ))(&IndexArray_wrapper::default_trim) );

}
